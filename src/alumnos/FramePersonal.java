/*
 * FramePersonal.java
 *   Ventana de registro personal de alumno para consulta o modificaciones
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodríguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package alumnos;

import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import iconos.Iconos;
import javax.swing.ImageIcon;

/**  Es una ventana interna (JInternalFrame) la cual sirve para mostrar y permitir 
 *  modificar/actualizar el registro personald e un alumno. La ventana tiene tres secciones: datos
 *  personales, datos de historial academico y datos de antecedentes familiares.
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FramePersonal extends sistema.ModeloFrameInterno implements java.awt.event.ActionListener{
   
    /** Indica refencia a la foto actual donde: null=no hay foto, "fromBD"=Cargada desde la bd, otro valor=ruta+nombre de archivo local */
    private String refFoto;
    /** Menu pop up para opciones cambiar o quitar foto en el control lblFoto */
    private javax.swing.JPopupMenu pmnuFto;
    /** Clave de datos complementarios del alumno actual tabla datco relacion tiene en la base de datos */
    private int ClvDatCo;
    /** Referencia al objeto para detectar cambios en el contenido de los controles de texto */
    private ListenChanges listenCh;
    
    /** Crea una nueva ventana FramePersonal
     * @param ventana Referencia a la ventana principal contenedora 
     *   (sistema.FramePrincipal)
     */
    public FramePersonal(sistema.FramePrincipal ventana){
        super(ventana,"frmregistro.png");
        initComponents();
        javax.swing.JMenuItem m1;
        javax.swing.JMenuItem m2;
        btnGCambios.setIcon(Iconos.getIcono("guardar.png"));
        btnGCambios.setText("");
        btnDesAca.setIcon(Iconos.getIcono("frmregdesaca.png"));
        btnDesAca.setText("");
        btnAbRegDesG.setIcon(Iconos.getIcono("frmregdesgru.png"));
        btnAbRegDesG.setText("");
        btnAsesorias.setIcon(Iconos.getIcono("frmasesorias.png"));
        btnAsesorias.setText("");
        btnElim.setIcon(Iconos.getIcono("elimina.png"));
        btnElim.setText("");
        btnCarga.setIcon(Iconos.getIcono("cargar.png"));
        ClvDatCo=0; 
        setCambios(false);
        refFoto=null;
        pmnuFto=new javax.swing.JPopupMenu();
        m1=new javax.swing.JMenuItem("Cambiar foto");
        m1.setActionCommand("Cambiar foto");
        m1.addActionListener(this); pmnuFto.add(m1);
        m2=new javax.swing.JMenuItem("Quitar foto");
        m2.setActionCommand("Quitar foto");
        m2.addActionListener(this); pmnuFto.add(m2);
        escuchaCambios();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlDatPer = new javax.swing.JPanel();
        pnlDatosPer1 = new javax.swing.JPanel();
        txtNom = new javax.swing.JTextField();
        txtMat1 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txtApPat = new javax.swing.JTextField();
        txtApMat = new javax.swing.JTextField();
        lblFNac = new javax.swing.JLabel();
        txtFNac = new javax.swing.JTextField();
        pnlFoto = new javax.swing.JPanel();
        lblFoto = new javax.swing.JLabel();
        pnlDatosPer2 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        txtFIng = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtDom = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtMun = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtTelC = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtTelM = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        txtCrrE = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtExpec = new javax.swing.JTextArea();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtPas = new javax.swing.JTextArea();
        jLabel45 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        txtMatG = new javax.swing.JTextArea();
        jLabel46 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        txtMatNG = new javax.swing.JTextArea();
        jLabel47 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        pnlDatAca = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrim = new javax.swing.JTextField();
        txtSec = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBach = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPPrim = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPSec = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPBach = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOCur = new javax.swing.JTextArea();
        pnlDatFam = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        txtNPad = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNMad = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtEscP = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtMunO = new javax.swing.JTextField();
        txtDirP = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        txtTelP = new javax.swing.JTextField();
        txtPnac = new javax.swing.JTextField();
        txtNHnas = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtNHnos = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtNHjs = new javax.swing.JTextField();
        txtEmpP = new javax.swing.JTextField();
        txtEscM = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnGCambios = new javax.swing.JButton();
        btnDesAca = new javax.swing.JButton();
        btnAbRegDesG = new javax.swing.JButton();
        btnAsesorias = new javax.swing.JButton();
        btnElim = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMat = new javax.swing.JTextField();
        btnCarga = new javax.swing.JButton();
        lblIdAlumno = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Registro personal de alumno");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        pnlDatPer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtMat1.setEditable(false);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Matricula:");

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Nombre(s):");

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Apellido materno:");

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("Apellido paterno:");

        lblFNac.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFNac.setText("Fecha de nacimiento:");

        org.jdesktop.layout.GroupLayout pnlDatosPer1Layout = new org.jdesktop.layout.GroupLayout(pnlDatosPer1);
        pnlDatosPer1.setLayout(pnlDatosPer1Layout);
        pnlDatosPer1Layout.setHorizontalGroup(
            pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatosPer1Layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblFNac)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel33)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel32)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel34)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel31))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtNom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtApPat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtApMat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtMat1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtFNac, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDatosPer1Layout.setVerticalGroup(
            pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatosPer1Layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel31)
                    .add(txtMat1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel34)
                    .add(txtNom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel32)
                    .add(txtApPat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel33)
                    .add(txtApMat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblFNac)
                    .add(txtFNac, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlFoto.setLayout(new java.awt.BorderLayout());

        lblFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoto.setText("Foto");
        lblFoto.setToolTipText("Click derecho para cambiar");
        lblFoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblFotoMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblFotoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblFotoMouseReleased(evt);
            }
        });
        lblFoto.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                lblFotoComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                lblFotoComponentShown(evt);
            }
        });
        pnlFoto.add(lblFoto, java.awt.BorderLayout.CENTER);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Fecha ingreso:");

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Domicilio:");

        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel39.setText("Municipio:");

        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel40.setText("Teléfono casa:");

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel41.setText("Teléfono celular:");

        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel42.setText("Correo electrónico:");

        jLabel43.setText(" Expectativas:");

        txtExpec.setColumns(20);
        txtExpec.setRows(5);
        jScrollPane10.setViewportView(txtExpec);

        jLabel44.setText(" Pasatiempos:");

        txtPas.setColumns(20);
        txtPas.setRows(5);
        jScrollPane11.setViewportView(txtPas);

        jLabel45.setText(" ¿Qué materias le gustan más y porque?");

        txtMatG.setColumns(20);
        txtMatG.setRows(5);
        jScrollPane12.setViewportView(txtMatG);

        jLabel46.setText(" ¿Quématerias NO le gustan y porque?");

        txtMatNG.setColumns(20);
        txtMatNG.setRows(5);
        jScrollPane13.setViewportView(txtMatNG);

        jLabel47.setText(" Observaciones:");

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane14.setViewportView(txtObs);

        org.jdesktop.layout.GroupLayout pnlDatosPer2Layout = new org.jdesktop.layout.GroupLayout(pnlDatosPer2);
        pnlDatosPer2.setLayout(pnlDatosPer2Layout);
        pnlDatosPer2Layout.setHorizontalGroup(
            pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatosPer2Layout.createSequentialGroup()
                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlDatosPer2Layout.createSequentialGroup()
                        .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel36)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel40)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel39)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel38))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtFIng, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pnlDatosPer2Layout.createSequentialGroup()
                                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(txtMun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(txtTelC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel42)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel41))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(txtCrrE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(txtTelM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(txtDom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel43)
                    .add(jScrollPane11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel44)
                    .add(jLabel45)
                    .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel46)
                    .add(jScrollPane13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel47)
                    .add(jScrollPane14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDatosPer2Layout.setVerticalGroup(
            pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatosPer2Layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(txtDom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel39)
                    .add(txtMun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel42)
                    .add(txtCrrE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel40)
                    .add(txtTelC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel41)
                    .add(txtTelM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel36)
                    .add(txtFIng, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel43)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel44)
                .add(1, 1, 1)
                .add(jScrollPane11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel45)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel46)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel47)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnlDatPerLayout = new org.jdesktop.layout.GroupLayout(pnlDatPer);
        pnlDatPer.setLayout(pnlDatPerLayout);
        pnlDatPerLayout.setHorizontalGroup(
            pnlDatPerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatPerLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatPerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlDatPerLayout.createSequentialGroup()
                        .add(pnlFoto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(pnlDatosPer1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlDatosPer2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        pnlDatPerLayout.setVerticalGroup(
            pnlDatPerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatPerLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatPerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlFoto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlDatosPer1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatosPer2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(pnlDatPer);

        jTabbedPane1.addTab("Datos personales", jScrollPane1);

        pnlDatAca.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText("Escuelas en las cuales ha cursado sus estudios:");

        jLabel4.setText("Escuela primaria:");

        jLabel6.setText("Escuela secundaria:");

        jLabel8.setText("Preparatoria o bachiller:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setText("Promedios obtenidos:");

        jLabel5.setText("Primaria:");

        jLabel7.setText("Secundaria:");

        jLabel9.setText(" Preparatoria/bachiller:");

        jLabel12.setText("Otros cursos: (especificar escuela, título obtenido y promedio)");

        txtOCur.setColumns(20);
        txtOCur.setRows(5);
        jScrollPane2.setViewportView(txtOCur);

        org.jdesktop.layout.GroupLayout pnlDatAcaLayout = new org.jdesktop.layout.GroupLayout(pnlDatAca);
        pnlDatAca.setLayout(pnlDatAcaLayout);
        pnlDatAcaLayout.setHorizontalGroup(
            pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatAcaLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlDatAcaLayout.createSequentialGroup()
                        .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel8)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel6)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtBach, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtPrim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtSec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jLabel11)
                    .add(pnlDatAcaLayout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtPPrim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtPSec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtPBach, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel12)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 412, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        pnlDatAcaLayout.setVerticalGroup(
            pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatAcaLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(txtPrim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(txtSec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(txtBach, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatAcaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(txtPPrim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7)
                    .add(txtPSec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9)
                    .add(txtPBach, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Historial académico", pnlDatAca);

        pnlDatFam.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel20.setText("Nombre del padre:");

        jLabel21.setText("Nombre de la madre:");

        jLabel23.setText("Escolaridad del padre:");

        jLabel24.setText("Escolaridad de la madre:");

        jLabel25.setText("Empleo del padre:");

        jLabel26.setText("Número total de hijos:");

        jLabel29.setText("Posicion en el orden de nacimiento entre los hermanos:");

        jLabel30.setText("Dirección de los padres:");

        jLabel48.setText("Municipio de origen:");

        jLabel49.setText("Teléfono de los padres:");

        jLabel28.setText("Número de hermanos:");

        jLabel27.setText("Número de hermanas:");

        org.jdesktop.layout.GroupLayout pnlDatFamLayout = new org.jdesktop.layout.GroupLayout(pnlDatFam);
        pnlDatFam.setLayout(pnlDatFamLayout);
        pnlDatFamLayout.setHorizontalGroup(
            pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatFamLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlDatFamLayout.createSequentialGroup()
                        .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel20)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel21)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel23)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel24)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel25)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel26))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtNPad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtNMad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtEmpP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pnlDatFamLayout.createSequentialGroup()
                                .add(txtNHjs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel27)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtNHnas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel28)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtNHnos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(txtEscP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtEscM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(pnlDatFamLayout.createSequentialGroup()
                        .add(jLabel48)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtMunO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel49)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtTelP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlDatFamLayout.createSequentialGroup()
                        .add(jLabel30)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtDirP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 336, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlDatFamLayout.createSequentialGroup()
                        .add(jLabel29)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtPnac, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        pnlDatFamLayout.setVerticalGroup(
            pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlDatFamLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(txtNPad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel21)
                    .add(txtNMad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel23)
                    .add(txtEscP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(txtEscM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel25)
                    .add(txtEmpP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel26)
                    .add(txtNHjs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel27)
                    .add(txtNHnas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel28)
                    .add(txtNHnos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel29)
                    .add(txtPnac, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel30)
                    .add(txtDirP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlDatFamLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel48)
                    .add(txtMunO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel49)
                    .add(txtTelP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Antecedentes familiares", pnlDatFam);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnGCambios.setText("g");
        btnGCambios.setToolTipText("Guardar cambios");
        btnGCambios.setEnabled(false);
        btnGCambios.setFocusable(false);
        btnGCambios.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGCambios.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGCambiosActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGCambios);

        btnDesAca.setText("d");
        btnDesAca.setToolTipText("Desempeño academico");
        btnDesAca.setEnabled(false);
        btnDesAca.setFocusable(false);
        btnDesAca.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDesAca.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDesAca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesAcaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDesAca);

        btnAbRegDesG.setText("dg");
        btnAbRegDesG.setToolTipText("Abrir registro de desempeño en grupo del alumno");
        btnAbRegDesG.setEnabled(false);
        btnAbRegDesG.setFocusable(false);
        btnAbRegDesG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbRegDesG.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbRegDesG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbRegDesGActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAbRegDesG);

        btnAsesorias.setText("As");
        btnAsesorias.setToolTipText("Asesorias");
        btnAsesorias.setEnabled(false);
        btnAsesorias.setFocusable(false);
        btnAsesorias.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAsesorias.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAsesorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsesoriasActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAsesorias);

        btnElim.setText("e");
        btnElim.setToolTipText(" Eliminar registro actual");
        btnElim.setEnabled(false);
        btnElim.setFocusable(false);
        btnElim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnElim.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnElim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimActionPerformed(evt);
            }
        });
        jToolBar1.add(btnElim);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Buscar Matricula:");

        btnCarga.setMnemonic('C');
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(252, Short.MAX_VALUE)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(txtMat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnCarga)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(btnCarga)
                .add(txtMat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel1))
        );

        jToolBar1.add(jPanel1);

        jPanel2.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        lblIdAlumno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIdAlumno.setText("Registro personal de alumno");
        jPanel2.add(lblIdAlumno, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Llama al metodo guardaCambios y muestra un mensaje en caso de que los cambios
     *   se guarden satisfactoriamente
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGCambiosActionPerformed
        if(guardaCambios()){
            muestraMensaje("Acción realizada","Se ha actualizado el registro",TipoMensaje.INFORMACION);
        }
}//GEN-LAST:event_btnGCambiosActionPerformed

    /** Guarda los cambios realizados en el registro del alumno actual
     * @return true si el registro se guardo correctamente. 
     *   false si no se pudo guardar el registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        String[] datos;
        java.io.FileInputStream foto=null;
        long tamFoto=0;
        datos = obtenDtsValidos(); // obtener datos validados
        boolean cmbFto=false;
        if(datos!=null){ // si son validos enviar a la clase que inserta en la bd            
            if(refFoto==null||(refFoto!=null&&!refFoto.equals("fromBD"))){
                if(refFoto!=null){
                    try{
                        java.io.File archFoto = new java.io.File(refFoto);
                        foto = new java.io.FileInputStream(archFoto);
                        tamFoto = archFoto.length();
                    }
                    catch(java.io.FileNotFoundException fnfExc){
                        muestraMensaje("Error al tratar de crear el registro","Error al tratar de leer el archivo de la foto",TipoMensaje.ERROR);
                        return false;
                    }
                }
                cmbFto=true;
            }
            if(!database.Actualiza.actualizaRegAl(datos,ClvDatCo,foto,tamFoto,cmbFto,true)){
                muestraMensaje("Error al tratar de actualizar el registro",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                lblIdAlumno.setText("Registro personal de alumno: "+datos[3]+" "+datos[1]+" "+datos[2]);
                setCambios(false);
                return true;
            }
        }
        return false;
    }
    
    /** Valida la matricula ingresada en el control txtMat y si es valida carga los datos del alumno al que corresponda
     * @param evt El ActionEvent que genero el evento
     */
    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed
        String mat=txtMat.getText().trim();
        if(!operaciones.Datos.valMatricula(mat)){ // validar la matricula ingresada
            muestraMensaje("Error en el parámetro","Matricula invalida",TipoMensaje.ERROR);
            return;
        }
        if(hayCambios()){
            TipoRespuesta opc=pideDesicion(getTitle(),"Hay cambios sin guardar, ¿Desea guardarlos?");
            if(opc.getTipo()==TipoRespuesta.CANCELAR.getTipo()) return;
            else if(opc.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()){
                if(!guardaCambios()){
                    return;
                }
            }
        }
        if(getTitle().equals("Registro personal de alumno "+mat))
            cargaDatosAlumno(mat);
        else if(existeVentana("Registro personal de alumno "+mat,true)){ 
            txtMat.setText(txtMat1.getText());
            return;
        }
        else cargaDatosAlumno(mat);
        setCambios(false);
    }//GEN-LAST:event_btnCargaActionPerformed

    /** Carga el registro de desempeño academico del alumno actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnDesAcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesAcaActionPerformed
        getPrincipalVnt().agregaVentanaAlumno(txtMat1.getText(),2);
    }//GEN-LAST:event_btnDesAcaActionPerformed

    /** Carga el registro de desempeño dentro de grupos del alumno actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnAbRegDesGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbRegDesGActionPerformed
        getPrincipalVnt().agregaVentanaAlumno(txtMat1.getText(),3);
    }//GEN-LAST:event_btnAbRegDesGActionPerformed

    /** Carga el registro de asesorias de tesis del alumno actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnAsesoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsesoriasActionPerformed
        getPrincipalVnt().agregaVentanaAlumno(txtMat1.getText(),4);
    }//GEN-LAST:event_btnAsesoriasActionPerformed

    /** Elimina el registro de este alumno (incluyendo datos relacionados como: desempeño 
     *   en grupos, academico, asesorias de tesis) si esta configurado pide password de 
     *   seguridad antes de realizar la accion
     * @param evt El ActionEvent que genero el evento
     */
    private void btnElimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimActionPerformed
        TipoRespuesta aux=pideDesicion("Confirme acción","En verdad desea eliminar este alumno");
        String matr=txtMat1.getText();
        java.util.ArrayList<String> trans = new java.util.ArrayList<String>();        
        if(aux.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()) return;
        trans.add("delete from pertenece where matricula='"+matr+"';");
        trans.add("delete DatCo.*,tiene.* from DatCo,tiene where tiene.matricula='"+matr+"' and tiene.clvdc=datco.clvdc;");
        trans.add("delete DesAca.*,Muestra.* from DesAca,Muestra where Muestra.matricula='"+matr+"' and Muestra.clvda=DesAca.clvda;");
        trans.add("delete SeTitula from SeTitula where matricula='"+matr+"';");
        trans.add("delete from Alumno where matricula='"+matr+"';");
        if(!database.Actualiza.transaccion(trans,false,true))
            muestraMensaje("No se pudo realizar la acción", database.Actualiza.obtenError(),TipoMensaje.ERROR);
        else{
            muestraMensaje("Se ha realizado la acción", "Se elimino completamente el alumno",TipoMensaje.INFORMACION);
            if(existeVentana("Registro personal de desempeño academico alumno "+matr,false)){
                cerrarVentana("Registro personal de desempeño academico alumno "+matr);                
                (obtenVentana("Registro personal de desempeño academico alumno "+matr)).dispose();
            }
            if(existeVentana("Registro personal de desempeño en grupo alumno "+matr,false)){
                cerrarVentana("Registro personal de desempeño en grupo alumno "+matr);
                (obtenVentana("Registro personal de desempeño en grupo alumno "+matr)).dispose();
            }
            if(existeVentana("Ficha de asesorias alumno "+matr,false)){
                cerrarVentana("Ficha de asesorias alumno "+matr);
                (obtenVentana("Ficha de asesorias alumno "+matr)).dispose();
            }
            cerrarVentana(getTitle());
            dispose();
        }
    }//GEN-LAST:event_btnElimActionPerformed

    /** Si el un evento popUpTrigger muestra el menu popup para opciones en el control
     *   de la foto (lblFoto) cambiar foto o quitar foto
     * @param evt El MouseEvent que genero el evento
     */
    private void lblFotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFotoMouseClicked
        if (evt.isPopupTrigger()) pmnuFto.show(evt.getComponent(),evt.getX(),evt.getY());
    }//GEN-LAST:event_lblFotoMouseClicked

    /** Si el un evento popUpTrigger muestra el menu popup para opciones en el control
     *   de la foto (lblFoto) cambiar foto o quitar foto
     * @param evt El MouseEvent que genero el evento
     */
    private void lblFotoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFotoMousePressed
        if (evt.isPopupTrigger()) pmnuFto.show(evt.getComponent(),evt.getX(),evt.getY());
    }//GEN-LAST:event_lblFotoMousePressed

    /** Si el un evento popUpTrigger muestra el menu popup para opciones en el control
     *   de la foto (lblFoto) cambiar foto o quitar foto
     * @param evt El MouseEvent que genero el evento
     */
    private void lblFotoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFotoMouseReleased
        if (evt.isPopupTrigger()) pmnuFto.show(evt.getComponent(),evt.getX(),evt.getY());
    }//GEN-LAST:event_lblFotoMouseReleased

    /** Llama al metodo que refresca la foto por si cambio el tamanio del control lblFoto
     * @param evt El ComponentEvent que genero el evento
     */
    private void lblFotoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_lblFotoComponentResized
        refrescaFoto();
    }//GEN-LAST:event_lblFotoComponentResized

    /** Llama al metodo que refresca la foto por si cambio el tamanio del control lblFoto
     * @param evt El ComponentEvent que genero el evento
     */
    private void lblFotoComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_lblFotoComponentShown
        refrescaFoto();
    }//GEN-LAST:event_lblFotoComponentShown

    /** Llama al metodo que refresca la foto por si cambio el tamanio del control lblFoto
     * @param evt El ComponentEvent que genero el evento
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        refrescaFoto();
    }//GEN-LAST:event_formComponentShown

    /** Llama al metodo que refresca la foto por si cambio el tamanio del control lblFoto
     * @param evt El ComponentEvent que genero el evento
     */
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        refrescaFoto();
    }//GEN-LAST:event_formComponentResized
 
    /** Refresca (actualiza) el tamaio de la foto (si la hay) al tamnio del control 
     *   que la contiene lblFoto
     */
    private void refrescaFoto(){
        ImageIcon foto=(ImageIcon)lblFoto.getIcon();
        int ancho=lblFoto.getSize().width;
        int alto=lblFoto.getSize().height;
        if(foto==null || ancho<1 || alto<1) return;
        foto.setImage(foto.getImage().getScaledInstance(ancho,alto,java.awt.Image.SCALE_DEFAULT));
        lblFoto.setIcon(foto);
    }
   
    /** Consulta en la base de datos el registro de un alumno y si existe obtiene 
     *   los datos de su registro para llamar al metodo que carga los datos en los controles de la ventana
     * @param matricula La matricula del alumno a cargar
     * @return true si se cargaron los datos del alumno false en caso de que no exista
     *   alumno para la matricula o hayan ocurrido errores al procesar en la bd
     */
    public boolean cargaDatosAlumno(String matricula){
        String[] datos;
        String[] datos2;     
        ImageIcon foto=null;
        byte[] btsFoto;
        String sen="select Matricula,ApPat,ApMat,Nom,FNac,FIng,Dom,Mun,TCasa,TMovil,";
        sen+="CorreoE,Expectativas,Pasatiempos,MatPref,MatNPref,Observaciones from";
        datos=database.Consultas.consultaUnCampo(sen+" alumno where matricula='"+matricula+"'",true);
        if(datos==null){
            muestraMensaje("Error al buscar el alumno",database.Consultas.obtenError(),TipoMensaje.INFORMACION);
            return false;
        }
        else if(datos[0]==null){
            muestraMensaje("Resultados","No se encontraron datos para esa matricula",TipoMensaje.INFORMACION);
            return false;
        }
        datos2=database.Consultas.consultaUnCampo("select DatCo.* from DatCo, Tiene where DatCo.ClvDC=Tiene.ClvDC and Tiene.matricula='"+matricula+"'",false);
        btsFoto=database.Consultas.consultaBts("select foto from alumno where matricula='"+matricula+"';");
        if(btsFoto==null && database.Consultas.obtenError()!=null){
            muestraMensaje("Error al leer foto del alumno",database.Consultas.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else if(btsFoto!=null){ 
            foto=new ImageIcon(btsFoto);
            foto.setImage(foto.getImage().getScaledInstance(120,175,java.awt.Image.SCALE_DEFAULT));
        }
        cargaDatosAlumno(datos,datos2,foto);
        refrescaFoto(); setCambios(false);
        return true;
    }
    
    /** Carga los datos del alumno, este metodo solo debe ser llamado desde el metodo  cargaDatosAlumno(String)
     * @param personales Vector con los datos personales: matricula, apellido paterno, apellido materno, nombre,
     *   fecha de nacimiento, fecha de ingreso, domicilio, municipio, telefono casa, telefono movil, correo electronico,
     *   expectativas, pasatiempos, materias que le gustan, materias que no le gustan y observaciones.
     * @param complementarios Vector con los datos complementarios del alumno: nombre del padre, nombre de la madre,
     *   escolaridad del padre, escolaridad de la madre, empleo del padre, numero total de hijos, numero de hermanas,
     *   nuemro de hermanos, posicion en el orden de nacimiento entre los hermanos, municipio de origen, direccion
     *   de los padres, telefono de los padres, escuela primaria, promedio de primaria, escuela secundaria, promedio
     *   de secundaria, escuela bachiller, promedio de bachiller y otro cursos.
     * @param foto La foto del alumno si existe registrada o null en caso contrario contrario
     */
    private void cargaDatosAlumno(String[] personales, String[] complementarios, ImageIcon foto){
        setTitle("Registro personal de alumno "+personales[0]);
        ClvDatCo=Integer.parseInt(complementarios[0]);
        lblIdAlumno.setText("Registro personal de alumno: "+personales[3]+" "+personales[1]+" "+personales[2]);
        txtMat1.setText(personales[0]);
        txtNom.setText(personales[3]);
        txtApPat.setText(personales[1]);
        txtApMat.setText(personales[2]);
        txtFNac.setText(personales[4]);
        if(foto!=null){ lblFoto.setIcon(foto); lblFoto.setText(""); }
        else{ lblFoto.setIcon(null); lblFoto.setText("Foto"); }
        refFoto="fromBD";
        txtFIng.setText(personales[5]);
        txtDom.setText(personales[6]);
        txtMun.setText(personales[7]);
        txtTelC.setText(personales[8]);
        txtTelM.setText(personales[9]);
        txtCrrE.setText(personales[10]);
        txtExpec.setText(personales[11]);
        txtPas.setText(personales[12]);
        txtMatG.setText(personales[13]);
        txtMatNG.setText(personales[14]);
        txtObs.setText(personales[15]);
        txtNPad.setText(complementarios[1]);
        txtNMad.setText(complementarios[2]);
        txtEscP.setText(complementarios[3]);
        txtEscM.setText(complementarios[4]);
        txtEmpP.setText(complementarios[5]);
        txtNHjs.setText(complementarios[6]);
        txtNHnas.setText(complementarios[7]);
        txtNHnos.setText(complementarios[8]);
        txtPnac.setText(complementarios[9]);
        txtMunO.setText(complementarios[10]);
        txtDirP.setText(complementarios[11]);
        txtTelP.setText(complementarios[12]);
        txtPrim.setText(complementarios[13]);
        txtPPrim.setText(complementarios[14]);
        txtSec.setText(complementarios[15]);
        txtPSec.setText(complementarios[16]);
        txtBach.setText(complementarios[17]);
        txtPBach.setText(complementarios[18]);
        txtOCur.setText(complementarios[19]);        
        btnGCambios.setEnabled(true);
        btnDesAca.setEnabled(true);
        btnAbRegDesG.setEnabled(true);
        btnAsesorias.setEnabled(true);
        btnElim.setEnabled(true);
    }

    /** valida todos los datos
     * @return null si hay datos invalidos o un vector de Strings con todos los datos en 
     *   el orden: matricula, apellido paterno, apellido materno, nombre, fecha nacimiento,
     *   fecha de ingreso, domicilio, municipio, telefono casa, telefono movil, correo electronico,
     *   expectativas, pasatiempos, materias que le gustan, materias que no le gustan, observaciones, 
     *   nombre del padre, nombre de la madre, escolaridad del padre, escolaridad de la madre,
     *   empleo del padre, numero de hijos, numero de hermanas, numero de hermanos, posicion en 
     *   el orden de nacimiento entre los hermanos, municipio de origen, direccion de los padres,
     *   telefono de los padres, primaria, promedio de primaria, secundaria, promedio de secundaria,
     *   bachiller, promedio de bachiller y otros cursos.
     */
    private String[] obtenDtsValidos(){                                        
        int num=0;
        float numf=0;
        boolean bnd;
        // los indices indican [0]-[15] datos personales; [16]-[27] antecedentes 
        // familiares; [28]-[34] Historial academico
        String[] datos = new String[35];
        // Obteniendo y validando datos personales
        datos[0]=txtMat1.getText().trim(); // deber ser una cadena de 8 digitos
        datos[1]=txtApPat.getText().trim(); // No debe ser nulo ni mayor a 25 caracteres
        if(datos[1].equals("") || datos[1].length()>25){
            muestraMensaje("Error en los datos!","Apellido paterno invalido",TipoMensaje.ERROR); return null; 
        }
        datos[2]=txtApMat.getText().trim(); // No debe ser nulo ni mayor a 25 caracteres
        if(datos[2].equals("") || datos[2].length()>25){
            muestraMensaje("Error en los datos!","Apellido materno invalido",TipoMensaje.ERROR); return null; 
        }
        datos[3]=txtNom.getText().trim(); // No debe ser nulo ni mayor a 25 caracteres
        if(datos[3].equals("") || datos[3].length()>25){
            muestraMensaje("Error en los datos!","Nombre invalido",TipoMensaje.ERROR); return null; 
        }
        datos[4]=txtFNac.getText().trim(); // debe tener formato dd-mm-aaa
        if(!operaciones.Datos.valFecha(datos[4])){ 
            muestraMensaje("Error en los datos!","Fecha de nacimiento invalida",TipoMensaje.ERROR); return null; 
        }
        datos[5]=txtFIng.getText().trim(); // debe tener formato dd-mm-aaa
        if(!operaciones.Datos.valFecha(datos[5])){ 
            muestraMensaje("Error en los datos!","Fecha de ingreso invalida",TipoMensaje.ERROR); return null; 
        }
        datos[6]=txtDom.getText().trim(); // No debe ser nulo ni mayor a 64 caracteres
        if(datos[6].equals("") || datos[6].length()>64){
            muestraMensaje("Error en los datos!","Domicilio invalido",TipoMensaje.ERROR); return null; 
        }
        datos[7]=txtMun.getText().trim(); // No debe ser nulo ni mayor a 32 caracteres
        if(datos[7].equals("") || datos[7].length()>32){
            muestraMensaje("Error en los datos!","Municipio invalido",TipoMensaje.ERROR); return null; 
        }
        datos[8]=txtTelC.getText().trim(); // No debe ser mayor a 10 caracteres y solo digitos
        if(!operaciones.Datos.valTel(datos[8])){ 
            muestraMensaje("Error en los datos!","Teléfono de casa invalido",TipoMensaje.ERROR); return null; 
        }
        datos[9]=txtTelM.getText().trim(); // No debe ser mayor a 10 caracteres y solo digitos       
        if(!operaciones.Datos.valTel(datos[9])){ 
            muestraMensaje("Error en los datos!","Teléfono celular invalido",TipoMensaje.ERROR); return null; 
        }
        datos[10]=txtCrrE.getText().trim(); // debe tener formato de mail
        if(!operaciones.Datos.valMail(datos[10])){ 
            muestraMensaje("Error en los datos!","Correo electrónico invalido",TipoMensaje.ERROR); return null; 
        }
        datos[11]=txtExpec.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[11].length()>255){ 
            muestraMensaje("Error en los datos!","Expectativas supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        datos[12]=txtPas.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[12].length()>255){ 
            muestraMensaje("Error en los datos!","Pasatiempos supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        datos[13]=txtMatG.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[13].length()>255){ 
            muestraMensaje("Error en los datos!","Materias preferidas supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        datos[14]=txtMatNG.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[14].length()>255){ 
            muestraMensaje("Error en los datos!","Materias no preferidas supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        datos[15]=txtObs.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[15].length()>255){ 
            muestraMensaje("Error en los datos!","Observaciones supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        // Obteniendo y validando antecedentes familiares
        datos[16]=txtNPad.getText().trim(); // No debe ser mayor a 75 caracteres 
        if(datos[16].length()>75){
            muestraMensaje("Error en los datos!","Nombre del padre invalido",TipoMensaje.ERROR); return null; 
        }
        datos[17]=txtNMad.getText().trim(); // No debe ser mayor a 75 caracteres 
        if(datos[17].length()>75){
            muestraMensaje("Error en los datos!","Nombre de la madre invalido",TipoMensaje.ERROR); return null; 
        }
        datos[18]=txtEscP.getText().trim(); // No debe ser mayor a 25 caracteres 
        if(datos[18].length()>25){
            muestraMensaje("Error en los datos!","Escolaridad del padre invalida",TipoMensaje.ERROR); return null; 
        }
        datos[19]=txtEscM.getText().trim(); // No debe ser mayor a 25 caracteres 
        if(datos[19].length()>25){
            muestraMensaje("Error en los datos!","Escolaridad de la madre invalida",TipoMensaje.ERROR); return null; 
        }
        datos[20]=txtEmpP.getText().trim(); // No debe ser mayor a 25 caracteres 
        if(datos[20].length()>25){
            muestraMensaje("Error en los datos!","Empleo del padre invalido",TipoMensaje.ERROR); return null; 
        }
        datos[21]=txtNHjs.getText().trim(); // Si se indica debe ser un entero >=0 y <=255
        bnd=true;
        try{ num=Integer.parseInt(datos[21]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[21].equals("") && (!bnd || num<0 || num>=255)){ 
            muestraMensaje("Error en los datos!","Número total de hijos invalido",TipoMensaje.ERROR); return null; 
        }
        datos[21]=(datos[21].equals("")?"0":datos[21]);
        datos[22]=txtNHnas.getText().trim(); // Si se indica debe ser un entero >=0 y <=255
        bnd=true;
        try{ num=Integer.parseInt(datos[22]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[22].equals("") && (!bnd || num<0 || num>=255)){ 
            muestraMensaje("Error en los datos!","Número de hermanas invalido",TipoMensaje.ERROR); return null; 
        }
        datos[22]=(datos[22].equals("")?"0":datos[22]);
        datos[23]=txtNHnos.getText().trim(); // Si se indica debe ser un entero >=0 y <=255
        bnd=true;
        try{ num=Integer.parseInt(datos[23]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[23].equals("") && (!bnd || num<0 || num>=255)){ 
            muestraMensaje("Error en los datos!","Número de hermanos invalido",TipoMensaje.ERROR); return null; 
        }
        datos[23]=(datos[23].equals("")?"0":datos[23]);
        datos[24]=txtPnac.getText().trim(); // Si se indica debe ser un entero >=0 y <=255
        bnd=true;
        try{ num=Integer.parseInt(datos[24]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[24].equals("") && (!bnd || num<0 || num>=255)){ 
            muestraMensaje("Error en los datos!","Posición orden de nacimiento invalido",TipoMensaje.ERROR); return null; 
        }
        datos[24]=(datos[24].equals("")?"0":datos[24]);
        datos[25]=txtMunO.getText().trim(); // No debe ser mayor a 25 caracteres 
        if(datos[25].length()>25){
            muestraMensaje("Error en los datos!","Municipio de origen invalido",TipoMensaje.ERROR); return null; 
        }        
        datos[26]=txtDirP.getText().trim(); // No debe ser mayor a 85 caracteres 
        if(datos[26].length()>85){
            muestraMensaje("Error en los datos!","Dirección de los padres invalida",TipoMensaje.ERROR); return null; 
        }        
        datos[27]=txtTelP.getText().trim(); // No debe ser mayor a 10 caracteres y solo digitos
        if(!operaciones.Datos.valTel(datos[27])){ 
            muestraMensaje("Error en los datos!","Teléfono de los padres invalido",TipoMensaje.ERROR); return null; 
        }
        // Obteniendo y validando historial academico
        datos[28]=txtPrim.getText().trim(); // No debe ser mayor a 85 caracteres 
        if(datos[28].length()>85){
            muestraMensaje("Error en los datos!","Nombre de primaria invalido",TipoMensaje.ERROR); return null; 
        }
        datos[29]=txtPPrim.getText().trim(); // Si se indica debe ser un numero entre 0 y 10
        bnd=true;
        try{ numf=Float.parseFloat(datos[29]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[29].equals("") && (!bnd || numf<0 || numf>10)){
            muestraMensaje("Error en los datos!","Promedio de primaria invalido",TipoMensaje.ERROR); return null; 
        }
        datos[29]=(datos[29].equals("")?"0.0":datos[29]);
        datos[30]=txtSec.getText().trim(); // No debe ser mayor a 85 caracteres 
        if(datos[30].length()>85){
            muestraMensaje("Error en los datos!","Nombre de secundaria invalido",TipoMensaje.ERROR); return null; 
        }
        datos[31]=txtPSec.getText().trim(); // Si se indica debe ser un numero entre 0 y 10
        bnd=true;
        try{ numf=Float.parseFloat(datos[31]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[31].equals("") && (!bnd || numf<0 || numf>10)){ 
            muestraMensaje("Error en los datos!","Promedio de secundaria invalido",TipoMensaje.ERROR); return null; 
        }
        datos[31]=(datos[31].equals("")?"0.0":datos[31]);
        datos[32]=txtBach.getText().trim(); // No debe ser mayor a 85 caracteres 
        if(datos[32].length()>85){
            muestraMensaje("Error en los datos!","Nombre de preparatoria invalido",TipoMensaje.ERROR); return null; 
        }                
        datos[33]=txtPBach.getText().trim(); // Si se indica debe ser un numero entre 0 y 10
        bnd=true;
        try{ numf=Float.parseFloat(datos[33]); }
        catch(NumberFormatException nbfExc){ bnd=false; }
        if(!datos[33].equals("") && (!bnd || numf<0 || numf>10)){ 
            muestraMensaje("Error en los datos!","Promedio de preparatoria invalido",TipoMensaje.ERROR); return null; 
        }
        datos[33]=(datos[33].equals("")?"0.0":datos[33]);
        datos[34]=txtOCur.getText().trim(); // No debe ser mayor a 255 caracteres 
        if(datos[34].length()>255){ 
            muestraMensaje("Error en los datos!","Otros cursos supera los caracteres permitidos",TipoMensaje.ERROR); return null; 
        }
        return datos;
    }
    
    /** Es la implementacion del action command de los menus del menu emergente 
     *   (control pmnuFto) de acuerdo al ActionCommand del evento llama al metodo 
     *   de la accion en la cual se hizo click (modificar o quitar foto)
     * @param evt El ActionEvent que genero el evento
     */
    public void actionPerformed(java.awt.event.ActionEvent evt){
        String accion=evt.getActionCommand();
        javax.swing.JFileChooser cajaArchivo;
        javax.swing.filechooser.FileNameExtensionFilter exts = new javax.swing.filechooser.FileNameExtensionFilter("Imagenes","jpg","gif","png");
        ImageIcon imagen;
        java.io.File archFoto;
        String aux;
        int opcion;
        if(accion.equals("Cambiar foto")){
            cajaArchivo = new javax.swing.JFileChooser();
            cajaArchivo.setFileFilter(exts);
            opcion = cajaArchivo.showOpenDialog(this);
            if(opcion==javax.swing.JFileChooser.APPROVE_OPTION){
                archFoto=cajaArchivo.getSelectedFile();
                aux=(archFoto.getPath().substring(archFoto.getPath().length()-4)).toLowerCase();
                if(!aux.equals(".jpg")&&!aux.equals(".png")&&!aux.equals(".gif")){
                    muestraMensaje("Acción fallida","Archivo invalido",TipoMensaje.ERROR);
                    return;
                }
                if((long)archFoto.length()>15728640){
                    muestraMensaje("Acción fallida","El tamaño del archivo supera el espacio de almacenamiento",TipoMensaje.ERROR);
                    return;
                }
                imagen = new javax.swing.ImageIcon(archFoto.getPath());
                imagen.setImage(imagen.getImage().getScaledInstance(lblFoto.getSize().width,lblFoto.getSize().height,java.awt.Image.SCALE_DEFAULT));
                lblFoto.setIcon(imagen); lblFoto.setText("");
                refFoto=archFoto.getPath();
                setCambios(txtMat1.getText().length()>0);
            }
        }
        else if(accion.equals("Quitar foto") && refFoto!=null){
            lblFoto.setIcon(null); lblFoto.setText("Foto"); refFoto=null;
            setCambios(txtMat1.getText().length()>0);
        }
        pmnuFto.setVisible(false);
    }
    
    /** Crea un objeto que implementa el DocumentListener y lo agrega a los controles de texto
     * para detectar si un campo es editado y por lo tanto saber si hay cambios sin guardar.
     */
    private void escuchaCambios(){
        listenCh= new ListenChanges();
        txtNom.getDocument().addDocumentListener(listenCh);
        txtApPat.getDocument().addDocumentListener(listenCh);
        txtApMat.getDocument().addDocumentListener(listenCh);
        txtDom.getDocument().addDocumentListener(listenCh);
        txtMun.getDocument().addDocumentListener(listenCh);
        txtFNac.getDocument().addDocumentListener(listenCh);
        txtFIng.getDocument().addDocumentListener(listenCh);
        txtCrrE.getDocument().addDocumentListener(listenCh);
        txtTelC.getDocument().addDocumentListener(listenCh);
        txtTelM.getDocument().addDocumentListener(listenCh);
        txtExpec.getDocument().addDocumentListener(listenCh);
        txtPas.getDocument().addDocumentListener(listenCh);
        txtMatG.getDocument().addDocumentListener(listenCh);
        txtMatNG.getDocument().addDocumentListener(listenCh);
        txtObs.getDocument().addDocumentListener(listenCh);
        txtNPad.getDocument().addDocumentListener(listenCh);
        txtNMad.getDocument().addDocumentListener(listenCh);
        txtEscP.getDocument().addDocumentListener(listenCh);
        txtEscM.getDocument().addDocumentListener(listenCh);
        txtEmpP.getDocument().addDocumentListener(listenCh);
        txtNHjs.getDocument().addDocumentListener(listenCh);
        txtNHnas.getDocument().addDocumentListener(listenCh);
        txtNHnos.getDocument().addDocumentListener(listenCh);
        txtPnac.getDocument().addDocumentListener(listenCh);
        txtDirP.getDocument().addDocumentListener(listenCh);
        txtMunO.getDocument().addDocumentListener(listenCh);
        txtTelP.getDocument().addDocumentListener(listenCh);
        txtPrim.getDocument().addDocumentListener(listenCh);
        txtSec.getDocument().addDocumentListener(listenCh);
        txtBach.getDocument().addDocumentListener(listenCh);
        txtPPrim.getDocument().addDocumentListener(listenCh);
        txtPSec.getDocument().addDocumentListener(listenCh);
        txtPBach.getDocument().addDocumentListener(listenCh);
        txtOCur.getDocument().addDocumentListener(listenCh);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbRegDesG;
    private javax.swing.JButton btnAsesorias;
    private javax.swing.JButton btnCarga;
    private javax.swing.JButton btnDesAca;
    private javax.swing.JButton btnElim;
    private javax.swing.JButton btnGCambios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblFNac;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblIdAlumno;
    private javax.swing.JPanel pnlDatAca;
    private javax.swing.JPanel pnlDatFam;
    private javax.swing.JPanel pnlDatPer;
    private javax.swing.JPanel pnlDatosPer1;
    private javax.swing.JPanel pnlDatosPer2;
    private javax.swing.JPanel pnlFoto;
    private javax.swing.JTextField txtApMat;
    private javax.swing.JTextField txtApPat;
    private javax.swing.JTextField txtBach;
    private javax.swing.JTextField txtCrrE;
    private javax.swing.JTextField txtDirP;
    private javax.swing.JTextField txtDom;
    private javax.swing.JTextField txtEmpP;
    private javax.swing.JTextField txtEscM;
    private javax.swing.JTextField txtEscP;
    private javax.swing.JTextArea txtExpec;
    private javax.swing.JTextField txtFIng;
    private javax.swing.JTextField txtFNac;
    private javax.swing.JTextField txtMat;
    private javax.swing.JTextField txtMat1;
    private javax.swing.JTextArea txtMatG;
    private javax.swing.JTextArea txtMatNG;
    private javax.swing.JTextField txtMun;
    private javax.swing.JTextField txtMunO;
    private javax.swing.JTextField txtNHjs;
    private javax.swing.JTextField txtNHnas;
    private javax.swing.JTextField txtNHnos;
    private javax.swing.JTextField txtNMad;
    private javax.swing.JTextField txtNPad;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextArea txtOCur;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtPBach;
    private javax.swing.JTextField txtPPrim;
    private javax.swing.JTextField txtPSec;
    private javax.swing.JTextArea txtPas;
    private javax.swing.JTextField txtPnac;
    private javax.swing.JTextField txtPrim;
    private javax.swing.JTextField txtSec;
    private javax.swing.JTextField txtTelC;
    private javax.swing.JTextField txtTelM;
    private javax.swing.JTextField txtTelP;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FramePersonal que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(txtMat1.getText().length()>0); 
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FramePersonal que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(txtMat1.getText().length()>0);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
    
}
