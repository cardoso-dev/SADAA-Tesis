/*
 * FrmRegDesAca.java
 *   Encargado de manejar registros individuales de desempeño academico (materias) de alumnos
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package alumnos;

import definiciones.TipoMensaje;
import iconos.Iconos;
import operaciones.Datos;

/**  Es una ventana interna (JInternalFrame) la cual sirve para la creación
 *  y manejo de individuales de desempeño academico de un alumno, cada ventana depende 
 *  una instancia de tipo FrameDesAca
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrmRegDesAca extends sistema.ModeloFrameInterno{
    
    /**Nombre de la ventana (clase FrameDesAca) de la cual depende*/
    private String nomVRef; 
    /**La matricula del alumno correpondiente al registro actual*/
    private String matricula; 
    /** Clave del curso actual en la bd (tabla sestesis) -1 si no se ha guardado el registro */
    private int clave;
    /**Vector con las claves de las materias impartidas por el docente el orden corresponde
      con el orden en que listan lo nombres de las materia en el control jcbMaterias*/
    private String[] clvsMats;
    /** Referencia al objeto para detectar cambios en el contenido de los controles de texto */
    private ListenChanges listenCh;
    
    /** Crea una nueva ventana de FrmRegDesAca
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     * @param nomVRef Nombre de la ventana (clase FrameDesAca) de la cual depende
     * @param matricula La matricula del alumno correpondiente al registro actual
     * @param clave Clave del curso actual en la bd (tabla sestesis) -1 si no se ha guardado el registro 
     * @param dts Datos del curso actual en el orden: clave de materia; nombre de la materia; docente; 
     *   grado; grupo; calificacion obtenida. null si es registro de nuevo curso
     */
    public FrmRegDesAca(sistema.FramePrincipal ventana, String nomVRef, String matricula, int clave, String[] dts) {
        super(ventana,"frmregdesaca.png");
        initComponents();
        this.nomVRef=nomVRef;
        this.matricula=matricula; this.clave=clave;
        setTitle("Registro de curso"+(clave==-1?"":" "+clave)+" alumno: "+matricula);
        lblMens.setText("Datos de "+(clave==-1?"nuevo":"")+" curso: "+(clave==-1?"":""+clave));
        btnGuarda.setIcon(Iconos.getIcono("guardar.png"));
        listaMaterias();
        if(clave!=-1){ // si ya existe el curso cargarlo desde dts
            txtClave.setText(""+clave);
            jcbMaterias.setSelectedItem(dts[0]); txtPer.setText(dts[1]);
            txtDoc.setText(dts[2]); txtGrd.setText(dts[3]);
            txtGrp.setText(dts[4]); txtCal.setText(dts[5]);
        }
        setCambios(false);
        listenCh= new ListenChanges();
        escuchaCambios();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDoc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPer = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtGrd = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtGrp = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCal = new javax.swing.JTextField();
        btnGuarda = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        lblMens = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcbMaterias = new javax.swing.JComboBox();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setTitle("Registro de curso alumno");

        jLabel1.setText("Clave: ");

        jLabel2.setText("Docente:");

        jLabel3.setText("*Periodo:");

        txtPer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPerFocusLost(evt);
            }
        });

        jLabel4.setText("Grado:");

        jLabel5.setText("Grupo:");

        jLabel6.setText("Calificación obtenida:");

        btnGuarda.setMnemonic('G');
        btnGuarda.setText("Guardar");
        btnGuarda.setToolTipText("Guardar cambios realizados");
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });

        jLabel7.setText("Materia:");

        txtClave.setEditable(false);

        lblMens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMens.setText("Datos de nuevo curso:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel8.setText("y AA los dos digitos finales del año. Ejemplo ENE09-MAY09");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel9.setText("*Formato de periodo debe ser: MMMAA-MMMAA donde: MMM las 3 letras iniciales del mes ");

        jcbMaterias.setEditable(true);
        jcbMaterias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMateriasItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblMens, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCal, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnGuarda))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)))))
                    .addGap(12, 12, 12)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(lblMens)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtCal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGuarda))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel8)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Consulta en la bd la lista de materias impartidas por el docente y carga sus 
     *   nombres en el control jcbMaterias y sus claves respectivas en el vector clvsMats
     */
    private void listaMaterias(){
        String[] materias;
        materias=database.Consultas.consultaLista("select clvm,nombre from materias order by nombre;",false);
        if(materias==null){
            muestraMensaje("Error al consultar lista de materias",database.Consultas.obtenError(),TipoMensaje.ERROR);
            clvsMats=null;
        }
        else{
            clvsMats=new String[materias.length];
            for(int g=0;g<materias.length;g++){
                clvsMats[g]=materias[g].substring(0,3);
                jcbMaterias.addItem(materias[g].substring(4));
            }            
        } 
        jcbMaterias.addItem("Otra (Escribir Directamente)");
        jcbMaterias.setSelectedIndex(-1);
    }
    
    /** Llama al metodo guardaCambios
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        guardaCambios();
    }//GEN-LAST:event_btnGuardaActionPerformed

    /** Guarda los cambios realizados en el registro de curso actual
     * (si es la primera vez que se edita se crea el registro)
     * @return true si el registro se creo/guardo correctamente. 
     *   false si no se pudo crear/guardar el registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        String[] datos = obtenDtsVal();
        String sentencia;
        FrameDesAca tmpreg;
        if(datos!=null){ // si clave no existe hacer un insert si no hacer update 
            if(clave==-1){
                if(database.Actualiza.nuevoRgDesAca(datos,true)){
                    clave=database.Actualiza.obtenClave();
                    muestraMensaje("Acción realizada","Se ha agregado el nuevo registro ",TipoMensaje.INFORMACION); 
                    txtClave.setText(""+clave);
                    setTitle("Registro de curso "+clave+" alumno: "+matricula);
                    lblMens.setText("Datos de curso:");
                    tmpreg=(FrameDesAca)obtenVentana(nomVRef);
                    if(tmpreg!=null) tmpreg.actualiza();
                    setCambios(false);
                }
                else{
                    muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    return false;
                }
                return true;      
            }
            sentencia="update DesAca set Materia='"+datos[1]+"', Periodo='"+datos[2]+"', CalF="+datos[6]+",";
            sentencia+=" Docente='"+datos[3]+"', Grado="+datos[4]+", Grupo='"+datos[5]+"' where ClvDA="+clave;
            if(!database.Actualiza.actualiza(sentencia,true,true)){
                muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                muestraMensaje("Acción Realizada","Se han actualizado los datos",TipoMensaje.INFORMACION);
                tmpreg=(FrameDesAca)obtenVentana(nomVRef);
                if(tmpreg!=null) tmpreg.actualiza();
                setCambios(false);
                return true;
            }
        }
        return false;
    }
   
    /** Convierte el contenido del control txtPer a mayuscula
     * @param evt El FocusEvent que genro el evento
     */
    private void txtPerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPerFocusLost
        String txt = txtPer.getText();
        txtPer.setText(txt.toUpperCase());
    }//GEN-LAST:event_txtPerFocusLost

    /** Indica que hay cambios sin guardar al haber un cambio en el item seleccionado del control jcbMaterias
     * @param evt El ItemEvent que genro el evento
     */
    private void jcbMateriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMateriasItemStateChanged
        setCambios(true);
    }//GEN-LAST:event_jcbMateriasItemStateChanged
    
    /** Valida todos los datos ingresados en los controles (area dato de tesis) y los regresa en un arreglo de String
     *  en el orden: matricula del alumno actual, materia, periodo, docente, grado, grupo, calificacion.
     * @return La lista de datos o null si hay al menos un dato invalido en cuyo caso muestra un mensaje indicando
     *  el error encontrado.
     */
    private String[] obtenDtsVal(){
        String[] datos = new String[7];
        datos[0]=matricula;
        datos[1]=""+(jcbMaterias.getSelectedItem()==null?"":jcbMaterias.getSelectedItem());
        datos[2]=txtPer.getText().trim();
        datos[3]=txtDoc.getText().trim();
        datos[4]=txtGrd.getText().trim();
        datos[5]=txtGrp.getText().trim();
        datos[6]=txtCal.getText().trim();
        int aux=0;
        float auxf=0f;
        boolean bandera=false;
        // materia que no sea cadena vacia ni sobrepase una logitud de 45 caracteres
        if(datos[1].equals("") || datos[1].length()>45){
            muestraMensaje("Error en los datos", "Materia invalida",TipoMensaje.ERROR);
            return null;
        }
        // periodo que tenga formato valido
        if(!Datos.valPeriodo(datos[2])){
            muestraMensaje("Error en los datos", "Periodo invalido",TipoMensaje.ERROR);
            return null;
        }
        // docente que no sea cadena vacia ni tenga mas de 75 caracteres
        if(datos[3].length()==0 || datos[3].length()>75){
            muestraMensaje("Error en los datos", "Docente invalido",TipoMensaje.ERROR);
            return null;
        }
        // grado debe se un numero entre 0 y 99
        try{
            aux=Integer.parseInt(datos[4]);
            bandera=(aux<1||aux>99);
        }
        catch(NumberFormatException nbfExc){ bandera=true; }
        if(bandera){
            muestraMensaje("Error en los datos", "Grado invalido",TipoMensaje.ERROR);
            return null;
        }
        // grupo que no sea cadena vacia ni tenga mas de 4 caracteres
        if(datos[5].length()==0 || datos[5].length()>4){
            muestraMensaje("Error en los datos", "Grupo invalido",TipoMensaje.ERROR);
            return null;
        }
        // calificacion debe se un float entre 0 y 10
        try{
            auxf=Float.parseFloat(datos[6]);
            bandera=(auxf<0f||auxf>10f);
        }
        catch(NumberFormatException nbfExc){ bandera=true; }
        if(bandera){
            muestraMensaje("Error en los datos", "Calificación invalida",TipoMensaje.ERROR);
            return null;
        }
        return datos;
    }
    
    /** Regresa el nombre de la ventana (clase FrameDesAca) de la cual depende
     * @return nombre de la ventana de la cual depende
     */
    public String nomFather(){
        return nomVRef;
    }
    
    /** Crea un objeto que implementa el DocumentListener y lo agrega a los controles de texto
     * para detectar si un campo es editado y por lo tanto saber si hay cambios sin guardar.
     */
    private void escuchaCambios(){
        txtDoc.getDocument().addDocumentListener(listenCh);
        txtPer.getDocument().addDocumentListener(listenCh);
        txtGrd.getDocument().addDocumentListener(listenCh);
        txtGrp.getDocument().addDocumentListener(listenCh);
        txtCal.getDocument().addDocumentListener(listenCh);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuarda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox jcbMaterias;
    private javax.swing.JLabel lblMens;
    private javax.swing.JTextField txtCal;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtDoc;
    private javax.swing.JTextField txtGrd;
    private javax.swing.JTextField txtGrp;
    private javax.swing.JTextField txtPer;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrmRegDesAca que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrmRegDesAca que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}
