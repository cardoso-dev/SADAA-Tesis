/*
 * FrmRegAse.java
 *   Encargado de manejar registros individuales de sesiones para asesorias a alumnos tesistas
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguezz
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package alumnos;

import database.Actualiza;
import definiciones.TipoMensaje;
import iconos.Iconos;
import operaciones.Datos;

/**  Es una ventana interna (JInternalFrame) la cual sirve para la creación
 *  y manejo de registros de asesorias para un alumno tesista. Cada ventana
 *  depende de una instancia de tipo FrameDesGru
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrmRegAse extends sistema.ModeloFrameInterno{
    
    /**Nombre de la ventana (clase FrameAsesorias) de la cual depende*/
    private String nomVRef; 
    /**La matricula del alumno correpondiente al registro actual*/
    private String matricula; 
    /** Clave de la sesion actual en la bd (tabla sestesis) -1 si no se ha guardado el registro */
    private int clave; 
    /** Clave del registro de la tesis correspondiente al alumno actual (tabla tesis de la bd) */
    private int claveTesis;
    /** Referencia al objeto para detectar cambios en el contenido de los controles de texto */
    private ListenChanges listenCh;
    
    /** Crea una nueva ventana FrmRegAse
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     * @param nomVRef Nombre de la ventana (clase FrameAsesorias) de la cual depende
     * @param matricula La matricula del alumno correpondiente al registro actual
     * @param clave Clave de la sesion a cargar -1 si es nueva sesion
     * @param claveTesis Clave del registro de la tesis correspondiente al alumno actual
     * @param dts Datos de la sesion actual en el orden: fecha y hora; tema; lugar; observaciones.
     *   null si es registro de nueva sesion 
     */
    public FrmRegAse(sistema.FramePrincipal ventana, String nomVRef, String matricula, int clave, int claveTesis,String[] dts) {
        super(ventana,"frmsesase.png");
        initComponents();
        this.nomVRef=nomVRef;
        this.matricula=matricula; this.clave=clave; 
        this.claveTesis=claveTesis;
        setTitle("Registro de sesion "+(clave==-1?"":clave+" ")+"Asesoria a alumno: "+matricula);
        btnGuardar.setIcon(Iconos.getIcono("guardar.png"));
        if(clave!=-1){ // si ya existe el curso cargarlo desde dts
            java.util.StringTokenizer toks = new java.util.StringTokenizer(dts[0]);
            txtClave.setText(""+clave); txtTema.setText(dts[1]);
            txtLgr.setText(dts[2]!=null?dts[2]:""); txtObser.setText(dts[3]!=null?dts[3]:"");
            txtFecha.setText(toks.nextToken()); txtHora.setText(toks.nextToken()); 
        }
        setCambios(false);
        escuchaCambios();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblMens = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTema = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtLgr = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObser = new javax.swing.JTextArea();
        btnGuardar = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setTitle("Registro de sesion Asesoria a alumno");

        jLabel1.setText("Clave:");

        lblMens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMens.setText("Datos de la sesion");

        txtClave.setEditable(false);

        jLabel2.setText("Fecha:");

        jLabel3.setText("Hora:");

        jLabel4.setText("Tema:");

        jLabel5.setText("Lugar:");

        jLabel6.setText("Observaciones:");

        txtObser.setColumns(20);
        txtObser.setRows(5);
        jScrollPane1.setViewportView(txtObser);

        btnGuardar.setMnemonic('G');
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addComponent(lblMens, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLgr, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuardar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTema, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMens)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtLgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Llama al metodo guardaCambios
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardaCambios();
    }//GEN-LAST:event_btnGuardarActionPerformed
    
    /** Guarda los cambios realizados en el registro de sesion actual 
     * (si es la primera vez que se edita se crea el registro)
     * @return true si el registro se creo/guardo correctamente. 
     *   false si no se pudo crear/guardar el registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        String[] datos = obtenDtsVal();
        String sentencia;
        FrameAsesoria tmpase;
        if(datos!=null){ // si clave no existe hacer un insert si no hacer update 
            if(clave==-1){
                if(Actualiza.nuevoRgSesT(datos,true)){
                    clave=database.Actualiza.obtenClave();
                    muestraMensaje("Accion realizada","Se ha agregado el nuevo registro ",TipoMensaje.INFORMACION); 
                    txtClave.setText(""+clave);
                    setTitle("Registro de sesion "+clave+" Asesoria a alumno: "+matricula);
                    tmpase=(FrameAsesoria)obtenVentana(nomVRef);
                    if(tmpase!=null) tmpase.actualiza();
                    setCambios(false);
                }
                else{
                    muestraMensaje("Accion fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    return false;
                }
                return true;
            }
            sentencia="update sestesis set fechayhora='"+datos[2]+"', tema='"+datos[3]+"',";
            sentencia+=" lugar='"+datos[4]+"', observaciones='"+datos[5]+"' where clvsest="+clave+";";
            if(!database.Actualiza.actualiza(sentencia,true,true)){
                muestraMensaje("Accion fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                muestraMensaje("Accion Realizada","Se han actualizado los datos",TipoMensaje.INFORMACION);
                tmpase=(FrameAsesoria)obtenVentana(nomVRef);
                if(tmpase!=null) tmpase.actualiza();
                setCambios(false);
                return true;
            }
        }
        return false;
    }
    
    /** Valida todos los datos ingresados en los controles y los regresa en un arreglo de String
     *  en el orden: matricula del alumno actual, fecha de la sesion, hora de la sesion, tema, 
     *  lugar, observaciones.
     * @return La lista de datos o null si hay al menos un dato invalido en cuyo caso muestra un mensaje indicando
     *  el error encontrado.
     */
    private String[] obtenDtsVal(){
        String[] datos = new String[6];
        //datos[0]=matricula;  datos[1]=""+claveTesis;
        datos[0]=matricula; 
        datos[2]=txtFecha.getText().trim();
        datos[1]=txtHora.getText().trim();
        datos[3]=txtTema.getText().trim();
        datos[4]=txtLgr.getText().trim();
        datos[5]=txtObser.getText().trim();
        // validar el formato de la fecha
        if(!Datos.valFecha(datos[2])){
            muestraMensaje("Error en los datos", "Fecha invalida",TipoMensaje.ERROR);
            return null;
        }        
        // validar el formato de la hora
        if(!Datos.valHorarioSimple(datos[1])){
            muestraMensaje("Error en los datos", "Hora invalida",TipoMensaje.ERROR);
            return null;
        }
        datos[2]=Datos.transformatFcha(datos[2])+" "+datos[1];
        datos[1]=""+claveTesis;
        // validar que el tema no sea null y no sobrepase de 105 caracteres
        if(datos[3].equals("")||datos[3].length()>105){
            muestraMensaje("Error en los datos", "Tema invalido",TipoMensaje.ERROR);
            return null;
        }        
        // validar que el lugar no sobrepase de 26 caracteres
        if(datos[4].length()>26){
            muestraMensaje("Error en los datos", "Lugar invalido",TipoMensaje.ERROR);
            return null;
        }
        // validar que observaciones no sobrepase de 255 caracteres
        if(datos[5].length()>255){
            muestraMensaje("Error en los datos", "Observaciones invalidas",TipoMensaje.ERROR);
            return null;
        }
        return datos;
    }
    
    /** Regresa el nombre de la ventana (clase FrameAsesorias) de la cual depende
     * @return nombre de la ventana de la cual depende
     */
    public String nomFather(){
        return nomVRef;
    }
    
    /** Crea un objeto que implementa el DocumentListener y lo agrega a los controles de texto
     * para detectar si un campo es editado y por lo tanto saber si hay cambios sin guardar.
     */
    private void escuchaCambios(){
        listenCh= new ListenChanges();
        txtLgr.getDocument().addDocumentListener(listenCh);
        txtTema.getDocument().addDocumentListener(listenCh);
        txtFecha.getDocument().addDocumentListener(listenCh);
        txtHora.getDocument().addDocumentListener(listenCh);
        txtObser.getDocument().addDocumentListener(listenCh);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMens;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtLgr;
    private javax.swing.JTextArea txtObser;
    private javax.swing.JTextField txtTema;
    // End of variables declaration//GEN-END:variables
    
    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
       /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrmRegAse que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrmRegAse que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}
