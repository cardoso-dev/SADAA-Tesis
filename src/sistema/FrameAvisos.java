/*
 * FrameAvisos.java
 *   Ventana emergente al iniciar el sistema que muestra avisos 
 *   como recordatorios de sesiones de asesorias o clases programadas
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.StringTokenizer;

/** Es una ventana interna (JInternalFrame) utilizada para como ventana emergente para
 *   desplegar avisos de sesiones o asesorias programadas
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameAvisos extends sistema.ModeloFrameInterno implements MouseListener{
    
    /** Lista de acciones a mostrar */
    private ArrayList<String> acciones;
    
    /** Crea una nueva FrameAvisos
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameAvisos(sistema.FramePrincipal ventana){
        super(ventana,"avisos.png");
        initComponents();
    }
   
    /** Carga la lista de avisos a mostrar
     * @param avisos la lista de avisos a mostrar
     */
    public void cargaAvisos(ArrayList<String> avisos){
        StringTokenizer toks;
        panel.removeAll();        
        if(avisos.size()!=0){
            panel.setLayout(new java.awt.GridLayout(avisos.size(),0));
            for(int f=0;f<avisos.size();f++){
                toks=new StringTokenizer(avisos.get(f),"%");
                javax.swing.JLabel etq = new javax.swing.JLabel(toks.nextToken());
                if(!etq.getText().startsWith(" &gt;&gt;")){
                    etq.addMouseListener(this);
                    etq.setToolTipText("Click para ver mas detalles");
                }            
                else etq.setText("<html><u>"+etq.getText()+"</u></html>");
                panel.add(etq);
            }
        }
        else{
            panel.setLayout(new java.awt.GridLayout(1,0));
            panel.add(new javax.swing.JLabel("Actualmente no hay avisos para las preferencias establecidas"));
        }
        Dimension dim = getTamJDesktop();
        setLocation(dim.width-getSize().width,dim.height-getSize().height);
        acciones=avisos;
        validate();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspPanel = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Avisos del sistema");

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        jspPanel.setViewportView(panel);

        getContentPane().add(jspPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jspPanel;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    /** Abre el registro de la accion sobre la que se hace click
     * @param e El MouseEvent que genero el evento
     */
    public void mouseClicked(MouseEvent e) {
        StringTokenizer toks;
        String txt=((javax.swing.JLabel)e.getComponent()).getText();
        int ini=(txt.startsWith("<html><u>")?13:1);
        int fin=(txt.endsWith("</u></html>")?txt.length()-15:txt.length()-1);
        txt=txt.substring(ini,fin);
        for(int g=0;g<acciones.size();g++){
            String accion=acciones.get(g);
            if(accion.startsWith(txt)){
                toks=new StringTokenizer(accion,"<%");
                toks.nextToken();
                String acc=toks.nextToken();
                String clave1=toks.nextToken();
                String clave2=toks.nextToken();
                if(acc.equals("ASE")){
                    getPrincipalVnt().agregaVentanaAlumno(clave1,4);
                    alumnos.FrameAsesoria fichaAse=(alumnos.FrameAsesoria)obtenVentana("Ficha de asesorias alumno "+clave1);
                    fichaAse.muestraRegistro(clave2);
                }                
                else if(acc.equals("CLA")){
                    getPrincipalVnt().agregaVentanaGrupo(clave1,2);
                    grupos.FrameCalendario cal=(grupos.FrameCalendario)obtenVentana("Calendario de grupo "+clave1);
                    cal.muestraSesion(clave2);
                }
            }
        }
    }        
    public void mousePressed(MouseEvent e) {}
    public void mouseReleased(MouseEvent e) {}
    /** Cambia el color a azul y subraya el texto del aviso sobre el que se posa el mouse
     * @param e El MouseEvent que genero el evento
     */
    public void mouseEntered(MouseEvent e) {
        javax.swing.JLabel etq=(javax.swing.JLabel)e.getComponent();
        etq.setText("<html><u>&lt;"+etq.getText()+"&gt;</u></html>");
        etq.setForeground(new java.awt.Color(0,0,255));
    }
    /** Cambia el color a negro y quita el subrayado del texto del aviso del que sale el mouse
     * @param e El MouseEvent que genero el evento
     */
    public void mouseExited(MouseEvent e) {
        javax.swing.JLabel etq=(javax.swing.JLabel)e.getComponent();
        String txt=etq.getText();
        int ini=(txt.startsWith("<html><u>")?13:0);
        int fin=(txt.endsWith("</u></html>")?etq.getText().length()-15:etq.getText().length());
        etq.setForeground(new java.awt.Color(0,0,0));
        etq.setText(etq.getText().substring(ini,fin));
    }
 
    
}

