/*
 * FrameDocente.java
 *   Encargado de manejar datos de docente y control de materias
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import database.Actualiza;
import database.Consultas;
import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import iconos.Iconos;

/** Encargado de manejar los datos del docente y control de materias
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameDocente extends sistema.ModeloFrameInterno{
    
    private java.util.ArrayList<ControlMateria> listaMats;
    
    /** Crea un nuevo FrameDocente
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameDocente(sistema.FramePrincipal ventana){
        super(ventana,"frmaltas.png");
        initComponents();
        listaMats=new java.util.ArrayList<ControlMateria>();
        btnGuarda.setIcon(Iconos.getIcono("guardar.png")); btnGuarda.setText("");
        btnNewMat.setIcon(Iconos.getIcono("nuevo.png")); btnNewMat.setText("");  
        btnQuitaMat.setIcon(Iconos.getIcono("elimina.png")); btnQuitaMat.setText("");  
        cargaDatos(); setCambios(false); escuchaCambios(); empaqueta();
    }

    /**Carga los datos del docente desde la base de da datos y los datos de materias registradas*/
    public void cargaDatos(){
        String[] datos=Consultas.consultaUnCampo("select * from datosdoc,datosinst;",true);
        ControlMateria mat;
        if(datos==null)
            muestraMensaje("Error al cargar datos",Consultas.obtenError(),TipoMensaje.ERROR);
        else{
            txtNom.setText(datos[0]); txtTit.setText(datos[1]);
            txtInst.setText(datos[2]); txtUniEsc.setText(datos[3]); txtAreaProg.setText(datos[4]);
            datos=Consultas.consultaLista("select ClvM from Materias",false);
            if(datos==null)
                muestraMensaje("Error al cargar materias",Consultas.obtenError(),TipoMensaje.ERROR);
            else if(datos[0]==null){
                lblMats.setText("Materias que imparte: No hay materias registradas");
                setCambios(false);
            }
            else{
                jtbMaterias.removeAll(); listaMats.clear();
                for(int j=0;j<datos.length;j++){
                    mat=new ControlMateria(this);
                    if(!mat.cargaMateria(datos[j].trim(),-1)){
                        muestraMensaje("Error al cargar materia: "+datos[j],mat.getError(),TipoMensaje.ERROR);
                        return;
                    }
                    jtbMaterias.add(new javax.swing.JScrollPane(mat));
                    listaMats.add(mat);
                    jtbMaterias.setTitleAt(jtbMaterias.getTabCount()-1,datos[j].trim());
                }
                setCambios(false);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnGuarda = new javax.swing.JButton();
        btnNewMat = new javax.swing.JButton();
        btnQuitaMat = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jtbMaterias = new javax.swing.JTabbedPane();
        lblMats = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        txtNom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTit = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtInst = new javax.swing.JTextField();
        txtUniEsc = new javax.swing.JTextField();
        txtAreaProg = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Datos del docente");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnGuarda.setText("grd");
        btnGuarda.setToolTipText("Guardar todos los datos");
        btnGuarda.setFocusable(false);
        btnGuarda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuarda.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGuarda);

        btnNewMat.setText("nMat");
        btnNewMat.setToolTipText("Agregar nueva materia");
        btnNewMat.setFocusable(false);
        btnNewMat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewMat.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMatActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewMat);

        btnQuitaMat.setText("qMat");
        btnQuitaMat.setToolTipText("Quitar una materia");
        btnQuitaMat.setFocusable(false);
        btnQuitaMat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnQuitaMat.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnQuitaMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitaMatActionPerformed(evt);
            }
        });
        jToolBar1.add(btnQuitaMat);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setDividerLocation(160);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jtbMaterias.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jtbMaterias.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jPanel2.add(jtbMaterias, java.awt.BorderLayout.CENTER);

        lblMats.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblMats.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMats.setText("Materias que imparte:");
        jPanel2.add(lblMats, java.awt.BorderLayout.NORTH);

        jSplitPane1.setBottomComponent(jPanel2);

        jLabel2.setText("Titulo profesional:");

        jLabel1.setText("Nombre del docente:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Datos generales:");

        jLabel9.setText("Institución educativa:");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Unidad académica o escuela:");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Área o Programa:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUniEsc, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtInst, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAreaProg, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtUniEsc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtAreaProg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jSplitPane1.setTopComponent(jScrollPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Llama el evento que guarda los cambios en los datos
     * @param evt El ActionEvent que genro el evento
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        if(guardaCambios()){
            muestraMensaje("Acción realizada","Se han guardado los datos",TipoMensaje.INFORMACION);
        }
    }//GEN-LAST:event_btnGuardaActionPerformed

    /** Valida y uarda los datos del docente y de las materias en la base de datos
     * @return true si los datos se guardaron correctamente, false en caso contrario
     */
    @Override
    public boolean guardaCambios(){
        java.util.ArrayList<String> trans = new java.util.ArrayList<String>();
        java.util.ArrayList<String> subtrans;
        String[] datos=new String[5];
        datos[0]=txtNom.getText().trim(); datos[1]=txtTit.getText().trim();
        datos[2]=txtInst.getText().trim(); datos[3]=txtUniEsc.getText().trim();
        datos[4]=txtAreaProg.getText().trim();
        if(datos[0].equals("")||datos[0].length()>32){
            muestraMensaje("Error","Nombre del docente invalido",TipoMensaje.ERROR);
            return false;
        }
        if(datos[1].equals("")||datos[1].length()>65){
            muestraMensaje("Error","Titulo del docente invalido",TipoMensaje.ERROR);
            return false;
        }
        if(datos[2].equals("")||datos[2].length()>65){
            muestraMensaje("Error","Nombre de institución invalido",TipoMensaje.ERROR);
            return false;
        }
        if(datos[3].equals("")||datos[3].length()>65){
            muestraMensaje("Error","Unidad académica o escuela invalida",TipoMensaje.ERROR);
            return false;
        }
        if(datos[4].equals("")||datos[4].length()>65){
            muestraMensaje("Error","Área o programa invalido",TipoMensaje.ERROR);
            return false;
        } 
        trans.add("update datosdoc set nombre='"+datos[0]+"', titulo='"+datos[1]+"';");
        trans.add("update datosinst set nominst='"+datos[2]+"', NomUnEsc='"+datos[3]+"', AreaProg='"+datos[4]+"';");
        for(int k=0;k<jtbMaterias.getTabCount();k++){
            if(listaMats.get(k).hayCambios()){
                subtrans=listaMats.get(k).getTransGuardar();
                if(subtrans==null){
                    muestraMensaje("Error","Ocurrio el error al intentar guardar la materia: "+jtbMaterias.getTitleAt(k)+"\n"+listaMats.get(k).getError(),TipoMensaje.ERROR);
                    jtbMaterias.setSelectedIndex(k);
                    return false;
                }
                for(int j=0;j<subtrans.size();j++){
                    trans.add(subtrans.get(j));
                }
            }
        }
        if(!Actualiza.transaccion(trans,true,true)){
            muestraMensaje("Error",Actualiza.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else{
            for(int k=0;k<jtbMaterias.getTabCount();k++){
                if(listaMats.get(k).hayCambios()){
                    listaMats.get(k).setCambios(false,false);
                    jtbMaterias.setTitleAt(k,listaMats.get(k).getClave());
                }
            }
            setCambios(false);
            return true;
        }
    }
  
    /** Agrega un nuevo COntrolMateria al jtbMaterias para registrar una nueva materia
     * @param evt El ActionEvent que genero el evento
     */
    private void btnNewMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMatActionPerformed
        ControlMateria mat=new ControlMateria(this);
        jtbMaterias.add(new javax.swing.JScrollPane(mat));
        listaMats.add(mat);
        jtbMaterias.setTitleAt(jtbMaterias.getTabCount()-1,"Nueva");
        jtbMaterias.setSelectedIndex(jtbMaterias.getTabCount()-1);
        setCambios(true);
}//GEN-LAST:event_btnNewMatActionPerformed

    /** Quita una mteria y borra su registro de la base de datos
     * @param evt El ActionEvent que genero el evento
     */
    private void btnQuitaMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitaMatActionPerformed
        int indice=-1;
        String clv=pideString("Quitar una materia", "Ingrese la clave de la materia");
        String nom="";
        TipoRespuesta res;
        if(clv==null) return;
        clv=clv.toUpperCase();
        for(int k=0;k<jtbMaterias.getTabCount();k++){
            if(jtbMaterias.getTitleAt(k).toUpperCase().equals(clv)){
                indice=k;
                nom=listaMats.get(indice).getNombre();
                break;
            }
        }
        res=pideDesicion("Confirme acción","En verdad desea quitar la materia: "+nom+"\nEsta acción no se podra deshacer");
        if(indice!=-1&&res.getTipo()==TipoRespuesta.ACEPTAR.getTipo()){
            if(!Actualiza.actualiza("delete from materias where clvm='"+clv+"'",false,true))
                muestraMensaje("Error",Actualiza.obtenError(),TipoMensaje.ERROR);
            else{
                jtbMaterias.remove(indice);
                listaMats.remove(indice);
                muestraMensaje("Acción realizada","Se ha quitado la materia",TipoMensaje.INFORMACION);
            }
        }
}//GEN-LAST:event_btnQuitaMatActionPerformed

    /**Crea un listener para escuchar si hay cambios en los controles de texto*/
    private void escuchaCambios(){
        ListenChanges listenCh= new ListenChanges();
        txtNom.getDocument().addDocumentListener(listenCh);
        txtTit.getDocument().addDocumentListener(listenCh);
        txtInst.getDocument().addDocumentListener(listenCh);
        txtUniEsc.getDocument().addDocumentListener(listenCh);
        txtAreaProg.getDocument().addDocumentListener(listenCh);
    }
    
    /**Revisa si hay cambios sin guardar en las materias para indicarlo en la bandera hayCambios*/
    public void actualizaCambiosMaterias(){
        for(int g=0;g<listaMats.size();g++){
            if(listaMats.get(g).hayCambios()){
                setCambios(true);
                return;
            }
        }
        setCambios(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuarda;
    private javax.swing.JButton btnNewMat;
    private javax.swing.JButton btnQuitaMat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTabbedPane jtbMaterias;
    private javax.swing.JLabel lblMats;
    private javax.swing.JTextField txtAreaProg;
    private javax.swing.JTextField txtInst;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtTit;
    private javax.swing.JTextField txtUniEsc;
    // End of variables declaration//GEN-END:variables
    
    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrameDocente que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrameDocente que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}

