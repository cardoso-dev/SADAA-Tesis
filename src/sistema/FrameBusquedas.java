/*
 * FrameBusquedas.java
 *   Ventana encargada de mostrar resultados de busquedas de mas de un registro encontrado
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import definiciones.TipoMensaje;

/** Ventana encargada de mostrar resultados de busquedas de mas de un registro encontrado
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameBusquedas extends sistema.ModeloFrameInterno implements java.awt.event.ActionListener{
    
    /** Crea una nueva FrameBusquedas
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameBusquedas(FramePrincipal ventana){
        super(ventana,"frmbusca.png");
        initComponents();
    }

    /** Carga un resultado de una busqueda
     * @param modTabla El model obtenido de la busqueda a cargar
     * @param titulo El titulo de la busqueda
     * @param desc La descripcion de la busqueda
     * @param aCols El ancho de las columnas preferido de la tabla a mostrar
     * @param mnus La lista de acciones del popupmenu de mostrar para los registros de la tabla
     * @param isAl Indica si los registros son de alumnos
     */
    public void cargaResultados(javax.swing.table.DefaultTableModel modTabla, String titulo, String desc, String[] aCols,String[] mnus,boolean isAl){
        ControlTablaBusqueda resBusTmp = new ControlTablaBusqueda(modTabla,aCols,mnus,this,isAl);
        jtpResultados.add(resBusTmp);
        ControlTituloTab pestanya = new ControlTituloTab(titulo,desc,jtpResultados.getTabCount()-1);
        jtpResultados.setTabComponentAt(jtpResultados.getTabCount()-1, pestanya);
        jtpResultados.setSelectedIndex(jtpResultados.getTabCount()-1);
        resBusTmp.setTitulo(titulo);
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpResultados = new javax.swing.JTabbedPane();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Resultado de búsquedas");

        jtpResultados.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jtpResultados.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jtpResultadosComponentRemoved(evt);
            }
        });
        getContentPane().add(jtpResultados, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Revisa el numero de tabs en el control jtpResultados y si este es cero cierra la ventana
     * @param evt El ContainerEvent que genero el evento
     */
    private void jtpResultadosComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jtpResultadosComponentRemoved
        for(int i=0;i<jtpResultados.getTabCount();i++)
            ((ControlTituloTab)jtpResultados.getTabComponentAt(i)).cambiaIndice(i);
        if(jtpResultados.getTabCount()==0){ 
            cerrarVentana(getTitle());
            dispose();
        }
    }//GEN-LAST:event_jtpResultadosComponentRemoved

    /** Implementacion de acciones del popupmenu usado en el ControlTablaBusqueda recibe
     *   cuando se hace click sobre una accion y por su command procesa la accion correspondiente
     * @param evt El ActionEvent que genero el evento
     */
    public void actionPerformed(java.awt.event.ActionEvent evt){
        java.util.StringTokenizer toks=new java.util.StringTokenizer(evt.getActionCommand(),":");
        String accion=toks.nextToken();
        String clavita=toks.nextToken();
        int aux;
        if(accion.equals("Registro personal")){
            getPrincipalVnt().agregaVentanaAlumno(clavita,1);
        }
        else if(accion.equals("Desempeño académico")){
            getPrincipalVnt().agregaVentanaAlumno(clavita,2);
        }
        else if(accion.equals("Desempeño en grupo")){
            getPrincipalVnt().agregaVentanaAlumno(clavita,3);
        }
        else if(accion.equals("Asesorías")){
            getPrincipalVnt().agregaVentanaAlumno(clavita,4);
        }
        else if(accion.equals("Ver ficha")){
            getPrincipalVnt().agregaVentanaGrupo(clavita,1);
        }
        else if(accion.equals("Ver calendario")){
            getPrincipalVnt().agregaVentanaGrupo(clavita,2);
        }
        else if(accion.equals("Ver rubros de evaluación")){
            getPrincipalVnt().agregaVentanaGrupo(clavita,3);
        }
        else if(accion.equals("Abrir ficha")){
            ControlTituloTab pesta=(ControlTituloTab)jtpResultados.getTabComponentAt(jtpResultados.getSelectedIndex());
            if(pesta.getTitulo().equals("Fichas Biliograficas")){
                accion=toks.nextToken().toLowerCase();
                aux=(accion.equals("bibliografica general")?1:(accion.equals("hemeroteca general")?2:3));
                getPrincipalVnt().agregaFichaBiliografica(Integer.parseInt(clavita),aux);
            }
            else{
                accion=pesta.getTitulo().toLowerCase();
                aux=(accion.equals("bibliografica general")?1:(accion.equals("hemeroteca general")?2:3));
                getPrincipalVnt().agregaFichaBiliografica(Integer.parseInt(clavita),aux);
            }
        }
        else{ // se espera clvgrupo:matricula para agregar el alumno al grupo con clave clvgrupo
            if(!database.Actualiza.agregaAluGrupo(clavita,accion,true))
                muestraMensaje("No se pudo realizar la acción", database.Actualiza.obtenError(),TipoMensaje.ERROR);
            else{
                muestraMensaje("Se ha realizado la acción", "Se agrego el alumno al grupo seleccionado",TipoMensaje.INFORMACION);
                if(existeVentana("Ficha de grupo "+accion,false)){
                    grupos.FrameGrupo fich=((grupos.FrameGrupo)obtenVentana("Ficha de grupo "+accion));
                    fich.cargaDatosGrupo(accion);
                }
            }
        }
        javax.swing.JMenuItem menu=((javax.swing.JMenuItem)evt.getSource());
        javax.swing.JPopupMenu popmenu=((javax.swing.JPopupMenu)menu.getParent());
        popmenu.setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jtpResultados;
    // End of variables declaration//GEN-END:variables
    
}
