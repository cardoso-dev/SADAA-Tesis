/*
 * ControlTablaBusqueda.java
 *   Control para recibir y mostrar resultados de busquedas con mas de un registro encontrado
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import database.Consultas;
import javax.swing.table.DefaultTableModel;
import operaciones.Datos;
import operaciones.Tiempo;

/** Crea un control para recibir y mostrar resultados de busquedas con mas de un registro encontrado
 * 
 * @author  Pedro Cardoso Rodriguez
 */
public class ControlTablaBusqueda extends javax.swing.JPanel {

    /**Popupmenu para la tabla de resultados*/
    private javax.swing.JPopupMenu pmnuaccs;
    /**Indica si los registros son registros de alumnos*/
    private boolean isAlumno;
    /**Popupmenu con la lista de grupos vigentes para agregar alumnos (en caso de que los registros sean de alumnos)*/
    private javax.swing.JMenu mnuGrupos;
    
    /** Crea un nuevo ControlTablaBusqueda
     * @param modTabla El model de la tabla a cargar con los resultados de la busqueda
     * @param anchCols El anchor preferido para cada columna de la tabla
     * @param acPopMnu Nombres de las acciones del popupmenu para las filas de la tabla
     * @param resbus Referencia a la ventana a la que pertenece este control
     * @param isAlumno Indica si los registros son registros de alumnos
     */
    public ControlTablaBusqueda(DefaultTableModel modTabla, String[] anchCols, String[] acPopMnu,FrameBusquedas resbus,boolean isAlumno) {
        initComponents();
        this.isAlumno=isAlumno;
        tabla.setModel(modTabla);        
        for(int h=0;h<anchCols.length;h+=2)
            tabla.getColumn(anchCols[h]).setPreferredWidth(Integer.parseInt(anchCols[h+1]));
        if(acPopMnu!=null){
            pmnuaccs=new javax.swing.JPopupMenu();
            if(isAlumno){
                mnuGrupos = new javax.swing.JMenu("Agregar a un grupo");
                java.util.StringTokenizer toks;                
                String[] grupos;
                String sentencia="select Grupos.ClvG,Grado,Grupo,nombre from Grupos,Imparte,Materias where datediff(PerFin,'";
                sentencia+=Datos.transformatFcha(Tiempo.getFechaFormatoNums())+"')>0 and Grupos.ClvG=Imparte.ClvG ";
                sentencia+="and Materias.ClvM=Imparte.ClvM order by Grado,Grupo,nombre;";
                grupos=Consultas.consultaLista(sentencia,false);
                if(grupos==null) return;
                else if(grupos[0]!=null){
                    for(int g=0;g<grupos.length;g++){
                        toks = new java.util.StringTokenizer(grupos[g]);
                        String claveGrupo=toks.nextToken();
                        javax.swing.JMenuItem mnus=new javax.swing.JMenuItem(toks.nextToken()+toks.nextToken()+" "+toks.nextToken("\0"));
                        mnus.setActionCommand(claveGrupo+":matricula");
                        mnus.addActionListener(resbus);
                        mnuGrupos.add(mnus);
                    }
                }
                pmnuaccs.add(mnuGrupos);
            }
            for(int h=0;h<acPopMnu.length;h++){
                javax.swing.JMenuItem mnus=new javax.swing.JMenuItem(acPopMnu[h]);
                mnus.setActionCommand(acPopMnu[h]);
                mnus.addActionListener(resbus);
                pmnuaccs.add(mnus);
            }            
        }
    }       
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        lblMensaje = new javax.swing.JLabel();

        tabla.setAutoCreateRowSorter(true);
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Columnas Variables"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla.setEnabled(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        tabla.getColumnModel().getColumn(0).setPreferredWidth(200);

        lblMensaje.setText("Mensaje");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMensaje)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /** Establece el titulo de los resultados actuales
     * @param tit el titulo de los resultados actuales
     */
    public void setTitulo(String tit){
        lblMensaje.setText(tit+" "+tabla.getRowCount()+" Registros encontrados (Pulse mouse derecho sobre un registro para ver opciones)");
    }
  
    /** Llama el metodo que prepara el popmenu si el click se hizo sobre una celda valida
     * @param evt El MouseEvent que genero el evento
     */
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        llamaMenu(evt);
    }//GEN-LAST:event_tablaMouseClicked

    /** Llama el metodo que prepara el popmenu si el click se hizo sobre una celda valida
     * @param evt El MouseEvent que genero el evento
     */
    private void tablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMousePressed
        llamaMenu(evt);
    }//GEN-LAST:event_tablaMousePressed

    /** Llama el metodo que prepara el popmenu si el click se hizo sobre una celda valida
     * @param evt El MouseEvent que genero el evento
     */
    private void tablaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseReleased
        llamaMenu(evt);
    }//GEN-LAST:event_tablaMouseReleased
    
    /** Si el click se hizo sobre una celda valida llama al metodo que muestra el popupmenu
     * @param evt El MouseEvent que genero el evento
     */
    private void llamaMenu(java.awt.event.MouseEvent evt){
        int col=tabla.columnAtPoint(evt.getPoint());
        int fila=tabla.rowAtPoint(evt.getPoint());
        int filaClave=0;
        String nomCmpClv=(isAlumno?"Matricula":"Clave");
        for(int i=0;i<tabla.getColumnCount();i++)
            if(tabla.getColumnName(i).equals(nomCmpClv)){
                filaClave=i; break;
            }
        if (fila>-1&&col>-1&&tabla.getValueAt(fila,filaClave)!=null)
            mostrarPopupMenu(evt,""+tabla.getValueAt(fila,filaClave),fila);
    }
    
    /** Muestra el popupmenu de acciones sobre los registros mostrados
     * @param evt El MouseEvent que genero el evento
     * @param tx El texto de la celda donde se hizo click
     * @param fila el indice de la celda donde se hizo click
     */
    private void mostrarPopupMenu(java.awt.event.MouseEvent evt, String tx, int fila){
        java.awt.Component[] mns;
        java.util.StringTokenizer toks;
        tabla.setRowSelectionInterval(fila,fila);
        if (evt.isPopupTrigger()){
            mns = pmnuaccs.getComponents();
            for(int y=0;y<mns.length;y++){
                String tmp=((javax.swing.JMenuItem)mns[y]).getText();
                ((javax.swing.JMenuItem)mns[y]).setActionCommand(tmp+":"+tx);
                if(tmp.equals("Abrir ficha")) // puede ser de tipo universal buscar si hay la columna tipo
                    for(int l=0;l<tabla.getColumnCount();l++)
                        if(tabla.getColumnName(l).equals("Tipo de ficha")){
                            ((javax.swing.JMenuItem)mns[y]).setActionCommand(tmp+":"+tx+":"+tabla.getValueAt(fila,l));
                            break;
                        }
            }
            if(isAlumno){ 
                mns = mnuGrupos.getMenuComponents();
                for(int y=0;y<mns.length;y++){
                    String tmp=((javax.swing.JMenuItem)mns[y]).getActionCommand();
                    toks = new java.util.StringTokenizer(tmp,":");
                    ((javax.swing.JMenuItem)mns[y]).setActionCommand(toks.nextToken()+":"+tx);
                }
            }
            pmnuaccs.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }
           
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
    
}
