/*
 * FrameConexion.java
 *   Encargado de manejar parametros de conexion y establecer conexion con el servidor de la base de datos
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import database.Conexion;
import definiciones.TipoMensaje;
import iconos.Iconos;
import java.io.File;
import operaciones.Archivos;
import operaciones.Datos;

/** Encargado de manejar parametros de conexion y establecer 
 *   conexion con el servidor de la base de datos
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameConexion extends sistema.ModeloFrameInterno{
    
    /**Crea un listener para escuchar si hay cambios en los controles de texto*/
    private ListenChanges listenCh;
    
    /** Crea un nuevo  FrameConexion
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameConexion(sistema.FramePrincipal ventana){
        super(ventana,"servidor.png");
        initComponents();
        btnGuarda.setIcon(Iconos.getIcono("guardar.png"));
        String[] prm=Conexion.obtenParms();
        if(prm[0]!=null){
            txtIp.setText(prm[0]);
            jcbLclH.setSelected(prm[0].equals("127.0.0.1"));
            txtIp.setEnabled(!jcbLclH.isSelected());
            txtPrt.setText(prm[1]);
            txtUser.setText(prm[2]);   
            setCambios(false);
        }
        actuBtnCon();             
        setCambios(false);
        listenCh= new ListenChanges();
        escuchaCambios();
    }

    /** Actualiza el icono adecuado en el boton conectar-desconectar
     */
    private void actuBtnCon(){
        btnConecta.setIcon(iconos.Iconos.getIcono(Conexion.hayConexion()?"desconecta.png":"conecta.png"));
        btnConecta.setText(Conexion.hayConexion()?"Desconectar":"Conectar");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jcbLclH = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPass = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        txtIp = new javax.swing.JTextField();
        txtPrt = new javax.swing.JTextField();
        btnGuarda = new javax.swing.JButton();
        btnConecta = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setTitle("Conexión al servidor");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Parámetros de conexión al servidor");

        jLabel2.setText("Dirección IP:");

        jcbLclH.setMnemonic('M');
        jcbLclH.setText("Esta Máquina es el servidor");
        jcbLclH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbLclHItemStateChanged(evt);
            }
        });

        jLabel3.setText("Puerto:");

        jLabel4.setText("Usuario:");

        jLabel5.setText("Password:");

        btnGuarda.setMnemonic('G');
        btnGuarda.setText("Guardar parámetros");
        btnGuarda.setToolTipText("Guarda los parametros para autoconectar al iniciar el sistema");
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });

        btnConecta.setText("Conecta");
        btnConecta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPass)
                            .addComponent(txtUser)
                            .addComponent(txtPrt)
                            .addComponent(txtIp)
                            .addComponent(jcbLclH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnGuarda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConecta)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbLclH)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConecta)
                    .addComponent(btnGuarda))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    /** Llama al metodo que guarda los parametros de conexion en archivo local para conectar automaticamente al inicial el sistema
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        if(guardaCambios()){
            muestraMensaje("La operación se realizo","Los datos han sido guardados",TipoMensaje.INFORMACION);
        }
}//GEN-LAST:event_btnGuardaActionPerformed

    /** Guarda los parametros de conexion en archivo local para conectar automaticamente al inicial el sistema
     * @return true si los datos se guardaron correctamente false en caso contrario
     */
    @Override
    public boolean guardaCambios(){
        String[] prmscnx=obtenValPrms();
        String dirBase=System.getProperty("user.dir");
        if(prmscnx!=null){
            if(Archivos.escribeBin(dirBase+File.separator+"lib"+File.separator+"prmscnx", prmscnx)){
                setCambios(false);
                return true;
            }
            else{
                muestraMensaje("Ocurrió un error de E/S!",Archivos.obtenError(),TipoMensaje.ERROR);
            }
        }
        return false;
    }
    
    /** Conecta-Desconecta del servidor dela base de datos
     * @param evt El ActionEvent que genero el evento
     */
    private void btnConectaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectaActionPerformed
        if(btnConecta.getText().equals("Conectar")){
            String[] prmscnx=obtenValPrms();
            boolean bandera;
            // si los parametros se obtuvieron correctamente conectar al servidor de la bd
            if(prmscnx!=null){
                Conexion.estableceParms(prmscnx);
                bandera=Conexion.conecta();
                if(!bandera) muestraMensaje("Error al intentar la conexión", Conexion.obtenError(),TipoMensaje.ERROR);
                else muestraMensaje("Conexión realizada","La conexión ha sido establecida",TipoMensaje.INFORMACION); 
            }
        }
        else Conexion.desconecta();
        actuBtnCon();
    }//GEN-LAST:event_btnConectaActionPerformed

    /** Establece que hay cambios sin guardar cuando cambia la seleccion del control jcbLclH
     * @param evt El ItemEvent que genero el evento
     */
    private void jcbLclHItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbLclHItemStateChanged
        txtIp.setEnabled(!jcbLclH.isSelected());
        setCambios(true);
    }//GEN-LAST:event_jcbLclHItemStateChanged
 
    /** obtiene y valida los parametros de conexion ingresados
     * @return null si hay error en al menos un parametro o los parametros en orden:
     *    direccion ip, numero de puerto, usuario y password
     */
    private String[] obtenValPrms(){
        // obtener parametros
        int puerto=0;
        boolean bandera=false;
        String[] parms = new String[4];
        validate();
        parms[0]=(jcbLclH.isSelected()?"127.0.0.1":txtIp.getText().trim());
        parms[1]=txtPrt.getText().trim();
        parms[2]=txtUser.getText().trim();
        parms[3]=(new String(txtPass.getPassword())).trim();
        // validar parametros
        for(int h=0;h<4;h++)
            if(parms[h].equals("")) {
                muestraMensaje("Error","Debe especificar todos los parámetros",TipoMensaje.ERROR);
                return null;
            }
        try{ puerto=Integer.parseInt(parms[1]); }
        catch(NumberFormatException nbfExc){ bandera=true; }
        if(bandera || puerto<1024 || puerto>65536){
            muestraMensaje("Error","El puerto es invalido",TipoMensaje.ERROR);
            return null;
        }        
        if(!Datos.vaDirlIP(parms[0])){
            muestraMensaje("Error","La dirección ip es invalida",TipoMensaje.ERROR);
            return null;
        }
        return parms;
    }
 
    /**Crea un listener para escuchar si hay cambios en los controles de texto*/
    private void escuchaCambios(){
        txtUser.getDocument().addDocumentListener(listenCh);
        txtPrt.getDocument().addDocumentListener(listenCh);
        txtIp.getDocument().addDocumentListener(listenCh);
        txtPass.getDocument().addDocumentListener(listenCh);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConecta;
    private javax.swing.JButton btnGuarda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox jcbLclH;
    private javax.swing.JTextField txtIp;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPrt;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrameConexion que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrameConexion que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}
