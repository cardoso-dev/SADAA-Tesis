/*
 * ModeloFrameInterno.java
 *   Ventana interna de la cual deben heredar todas las ventanas internas a utilizar en el sistema
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package sistema;

import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import java.util.ArrayList;
import java.util.Map;

/** Ventana interna de la cual deben heredar todas las ventanas internas a utilizar en el sistema
 *  provee de metodos generales tales como manejo de bandera de cambios sin guardar, envio de mensajes
 *  al usuario o solicitud de datos sencillo o de decisiones al usuario.
 * @author  Pedro Cardoso Rodriguez
 */
public class ModeloFrameInterno extends javax.swing.JInternalFrame {
    
    /**Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)*/
    private FramePrincipal ventana;
    /**Referencia al jmenuite usado en la ventana principal en el menu ventana el cual comparte el titulo de esta ventana*/
    private javax.swing.JMenuItem mnu;
    /**Bandera que indica si en un momento hay cambios sin guardar en datos contenidos por esta ventana*/
    private boolean hayCambios;
    
    /** Crea un nuevo ModeloFrameInterno
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     * @param nomIcon El nombre del icono de la ventana (debe existir en el paquete iconos)
     */
    public ModeloFrameInterno(FramePrincipal ventana, String nomIcon) {
        //initComponents();
        this.ventana=ventana;
        if(nomIcon!=null){
            setFrameIcon(iconos.Iconos.getIcono(nomIcon));
        }
        mnu=new javax.swing.JMenuItem(getTitle());
        mnu.setActionCommand(getTitle());
        hayCambios=false;
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                if(hayCambios){
                    TipoRespuesta res=pideDesicion(getTitle(),"<html>Hay cambios sin guardar<br>¿Desea guardarlos antes de salir?</html>");
                    if(res.getTipo()==TipoRespuesta.CANCELAR.getTipo()){
                        return;
                    }
                    else if(res.getTipo()==TipoRespuesta.ACEPTAR.getTipo()){
                        if(!guardaCambios()){
                            return;
                        }
                    }
                }
                cerrarVentana(getTitle());
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){}
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt){}
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt){}
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt){}
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt){}
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt){}
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 147, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /** Establece si hay cambios sin guardar en datos contenidos en la ventana
     * @param hc un booleano que indica si hay cambios sin guardar en datos contenidos en la ventana
     */
    public void setCambios(boolean hc){ hayCambios=hc; }
    
    /** Obtiene un booleano que indica si hay cambios sin guardar en datos contenidos en la ventana
     * @return un booleano que indica si hay cambios sin guardar en datos contenidos en la ventana
     */
    public boolean hayCambios(){ return hayCambios; }
    
    /** Debe ser implementado por la clases hijas y debe guardar los datos que maneje la ventana 
     * @return un boolean que indica si los datos se han guardado correctamente
     */
    public boolean guardaCambios(){
        muestraMensaje("No se pudo guardar cambios","Metodo no implementado",TipoMensaje.ERROR);
        return false;
    }
 
    /** Llama al metodo de la ventana principal que despliega un mensaje
     * @param titulo El titulo del mensaje
     * @param mensaje El texto de mensaje
     * @param tp El tipo de mensaje
     */
    public void muestraMensaje(String titulo,String mensaje,TipoMensaje tp){
        ventana.mensaje(titulo,mensaje,tp);
    }
    
    /** Llama al metodo de la ventana principal que pide un valor entero
     * @param titulo El titulo a mostrar en el cuadro de dialogo
     * @param mensaje El mensaje a mostrar en el cuadro de dialogo
     * @return El entero ingresado si se ingresan caracteres regresa 0
     */
    public int pideEntero(String titulo, String mensaje){
        return ventana.pideEntero(titulo, mensaje);
    }
    
    /** Llama al metodo de la ventana principal que pide una string por medio de un joptionpane
     * @param titulo El titulo a mostrar en el cuadro de dialogo
     * @param mensaje El mensaje a mostrar en el cuadro de dialogo
     * @return La cadena ingresada por el usuario
     */
    public String pideString(String titulo, String mensaje){
        return ventana.pideString(titulo, mensaje);
    }
  
    /** Llama al metodo de la ventana principal que pide una desicion al usuario (Si, No, Cancelar)
     * @param titulo El titulo a mostrar en el cuadro de dialogo
     * @param mensaje El mensaje a mostrar en el cuadro de dialogo
     * @return El TipoRespuesta con la desicion tomada por el usuario
     */
    public TipoRespuesta pideDesicion(String titulo, String mensaje){
        return ventana.pideDesicion(titulo, mensaje);
    }

    /** Llama al metodo de la ventana principal que agrega una ventana interna
     * @param vent La ventana a agregar
     */
    public void agregaVentana(ModeloFrameInterno vent){
        ventana.agregaVentana(vent);
    }
   
    /** Llama al metodo de la ventana principal que indica tiene acutalmente una determinada ventana hija
     * @param tit Titulo de la ventana a buscar 
     * @param actual Si es true y si existe la ventana buscada la hace actual
     * @return true si la ventana buscada existe false en caso contrario
     */
    public boolean existeVentana(String tit, boolean actual){
        return ventana.existeVentana(tit, actual);
    }
    
    /** Cambia el titulo de la ventana y del menu que le corresponde en la ventana principal menu ventana
     * @param titNuevo El nuevo titulo de la ventana
     */
    @Override
    public void setTitle(String titNuevo){
        mnu.setText(titNuevo);
        mnu.setActionCommand(titNuevo);
        super.setTitle(titNuevo);
    }
    
    /** Obtiene el jmenuitem usado en la ventana principal en el menu ventana el cual comparte el titulo de esta ventana
     * @return el jmenuitem usado en la ventana principal en el menu ventana el cual comparte el titulo de esta ventana
     */
    public javax.swing.JMenuItem getMenu(){ return mnu; }
    
    /** Cierra una ventana interna
     * @param tit El titulo de la ventana a cerrar
     */
    public void cerrarVentana(String tit){
        ventana.cerrarVentana(tit);
        obtenVentana(tit).dispose();
    }
   
    /** Llama al metodo de la ventaan principal que vnvia un reporte a imprimir
     * @param tit Titulo del reporte a imprimir
     * @param tipoDoc Tipo de reporte a imprimir
     *   donde: 1=lista de alumnos, 2=lista de creditos (calificacion o porcentaje de asistencia)
     *   3=calendario de sesiones de grupo 4=ficha de Registro desempeño academico de alumno
     *   5=ficha de Registro desempeño en grupo de alumno 6=Ficha bibliografica
     *   7=ficha hemeroteca general 8=ficha hemeroteca analitica 
     *   9=reporte de datos de tesista (datos y calendarios de sesiones)
     *   10=horario por dias de semana, 11=Temario
     * @param params parametros del documento a imprimir
     * @param lista Fuente de datos a imprimir (para los campos detail del formulario)
     */
    public void enviarImpresion(String tit,int tipoDoc,Map<String,String> params,ArrayList lista){
        ventana.enviarImpresion(tit, tipoDoc, params, lista);
    }
  
    /** Llama al metodo de la ventana principal que carga los resultados de una busqueda
     * @param modTabla El model obtenido en la consulta a la base de datos
     * @param titulo El titulo de la busqueda
     * @param desc La descripcion de la busqueda
     * @param acols El ancho preferido de las columnas de la tabla a mostrar
     * @param mnus las acciones del popupmenu emergente de la tabla a mostrar
     * @param isAl Indica si los registros encontrados son de alumnos
     */
    public void cargaBusqueda(javax.swing.table.DefaultTableModel modTabla, String titulo, String desc,String[] acols,String[] mnus,boolean isAl){
        ventana.cargaBusqueda(modTabla, titulo, desc, acols, mnus, isAl);
    }
   
    /** Llama al metodo de la ventana principal que obtiene una referencia a una ventana hija
     * @param tit El titulo de la ventana a obtener
     * @return la referencia a la ventana obtenida o null si no existe
     */
    public ModeloFrameInterno obtenVentana(String tit){
        return ventana.obtenVentana(tit);
    }
    
    /** Obtiene una referencia de la ventana principal
     * @return una referencia de la ventana principal
     */
    public sistema.FramePrincipal getPrincipalVnt(){ return ventana; }
    
    /** Obtiene la version actual el sistema
     * @return la version actual el sistema
     */
    public float getVersion(){
        return ventana.getVersion();
    }
   
    
    /** Obtiene el size del jdesktop de la ventana principal
     * @return el size del jdesktop de esta ventana
     */
    public java.awt.Dimension getTamJDesktop(){
        return ventana.getTamJDesktop();
    }
    
    /**Hace un pack a la ventana actual y si sobrepasa el area contenedora la ajusta*/
    public void empaqueta(){
        pack();             
        java.awt.Dimension dim = getSize();  
        java.awt.Dimension dim2 = ventana.getTamJDesktop();        
        java.awt.Point punto = getLocation();
        if(dim.height>dim2.height){
            dim.height=dim2.height;
            punto.y=0;            
        }                
        if(dim.width>dim2.width){
            dim.width=dim2.width;
            punto.x=0;            
        }        
        setLocation(punto);
        setSize(dim);
        validate();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}