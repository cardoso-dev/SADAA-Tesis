/*
 * ControlAvanceObj.java
 *  Control para registrar avances obtenidos en objetivos registrados para sesiones
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package grupos;

import database.Consultas;
import database.Actualiza;
import operaciones.Datos;
import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**  Es un control (JPanel) para registrar avances obtenidos en objetivos 
 *    registrados para sesiones para un grupo. Para cada objetivo que puede 
 *    registrar la fecha y hora del avance asi como el porcentaje cubierto 
 *    e incluye el registro de porcetaje visto para temas planeados.
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class ControlAvanceObj extends javax.swing.JPanel implements TableModelListener,ActionListener{
  
    /**Referencia a la ventana contenedora de este control*/
    private FrameCalendario refCal;
    /**Clave del tema/objetivo del registro cargado*/
    private int clave;
    /**Titulo del tema/objetivo del registro cargado*/
    private String titulo;
    /**Clave de la sesion a que pertenece el registro del objetivo o tema*/
    private int clvSes;
    /**Indica si el registro cargado pertenece a un tema planeado o a un objetivo*/
    private boolean esTema;
    /**Bandera que indica si los datos del registro ya estan cargados desde la bd*/
    private boolean cargado;
    /**La descripcion del utlimo error ocurrido*/
    private String error;
    /**Bandera que indica si hay algun cambio en los datos sin guardar*/
    private boolean hayCambios;
    /**PopupMenu para dar opciones sobre los registro en el control jtbAvances*/
    private javax.swing.JPopupMenu pmnuAvs;
    
    /** Crea un nuevo control ControlAvanceObj
     * @param refCal Referencia a la ventana contenedora de este control
     * @param clv Clave del tema/objetivo del registro a cargar
     * @param cSes Clave de la sesion a que pertenece el registro a cargar
     * @param esTem Indica si el registro cargado pertenece a un tema planeado o a un objetivo
     * @param titulo Titulo del tema/objetivo del registro cargado
     * @param fcha Fecha de la sesion a que pertenece el registro
     */
    public ControlAvanceObj(FrameCalendario refCal, int clv, int cSes, boolean esTem, String titulo,String fcha) {
        initComponents();
        this.refCal=refCal;
        clave=clv; clvSes=cSes; esTema=esTem; this.titulo=titulo;
        lblTitulo.setText("<html><b><u>"+(esTema?"Tema:":"Objetivo:")+"</u> "+titulo+"</b><br><i>(Pertenece a la sesion del "+fcha+" clave:"+clvSes+")</i></html>");
        btnAgregaReg.setVisible(false);
        jScrollPane1.setVisible(false);
        jtbAvances.getModel().addTableModelListener(this);
        crearPopMenu();
        cargado=false; setCambios(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jtbAvances = new javax.swing.JTable();
        lblTitulo = new javax.swing.JLabel();
        btnAgregaReg = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 120));

        jtbAvances.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Fecha y hora", "Tiempo (Minutos)", "Porcentaje cubierto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbAvances.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtbAvances.getTableHeader().setReorderingAllowed(false);
        jtbAvances.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbAvancesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtbAvancesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtbAvancesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtbAvances);
        jtbAvances.getColumnModel().getColumn(0).setPreferredWidth(45);
        jtbAvances.getColumnModel().getColumn(1).setPreferredWidth(120);
        jtbAvances.getColumnModel().getColumn(2).setPreferredWidth(120);
        jtbAvances.getColumnModel().getColumn(3).setPreferredWidth(120);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        add(jScrollPane1, gridBagConstraints);

        lblTitulo.setText("<html><b>Descripcion del objetivo</b><br><i>(Pertenece a la sesion X)</i></html>");
        lblTitulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTituloMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblTituloMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblTituloMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        add(lblTitulo, gridBagConstraints);

        btnAgregaReg.setFont(new java.awt.Font("Tahoma", 1, 18));
        btnAgregaReg.setForeground(new java.awt.Color(0, 0, 255));
        btnAgregaReg.setText("+");
        btnAgregaReg.setToolTipText("Agregar una registro de avance");
        btnAgregaReg.setMargin(new java.awt.Insets(0, 3, 1, 3));
        btnAgregaReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaRegActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        add(btnAgregaReg, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /** Agrega una nueva fila al control jtbAvances para agregar un nuevo registro de abance sobre el registro actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnAgregaRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaRegActionPerformed
        DefaultTableModel modelo=((DefaultTableModel)jtbAvances.getModel());
        modelo.addRow(new Object[]{0,"",0,0});
        setCambios(true);
}//GEN-LAST:event_btnAgregaRegActionPerformed

    /** Despliega/oculta los controles btnAgregaReg y jScrollPane1
     *   al hacer click sobre la etiqueta con el titulo
     * @param evt El MouseEvent que genero el evento
     */
    private void lblTituloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTituloMouseClicked
        if(btnAgregaReg.isVisible()){
            refCal.ocultaAvances(-1,-1);
            return;
        }
        if(!cargado){
            if(!cargaAvances()){
                refCal.muestraMensaje("No se puede mostrar","Ocurrio un error al cargar los avances",TipoMensaje.ERROR);
                return;
            }
            cargado=true;
        }
        despliega();
    }//GEN-LAST:event_lblTituloMouseClicked

    /** Cambia el color de fondo al entrar el mouse sobre el area de la 
     *   etiqueta del titulo para quitar el efecto de resalte
     * @param evt El MouseEvent que genero el evento
     */
    private void lblTituloMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTituloMouseEntered
        setBackground(new java.awt.Color(215,225,255));
    }//GEN-LAST:event_lblTituloMouseEntered

    /** Cambia el color de fondo al entrar el mouse sobre el area de la 
     *   etiqueta del titulo para crear el efecto de resalte
     * @param evt El MouseEvent que genero el evento
     */
    private void lblTituloMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTituloMouseExited
        if(btnAgregaReg.isVisible()){
            setBackground(new java.awt.Color(215,225,255));
            return;
        }
        setBackground(new java.awt.Color(255,255,255));
    }//GEN-LAST:event_lblTituloMouseExited

    /** Llama al evento que muestra el popmenu al hacer click en el control jtbAvances
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAvancesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAvancesMouseClicked
        llamaMenu(evt);
    }//GEN-LAST:event_jtbAvancesMouseClicked

    /** Llama al evento que muestra el popmenu al hacer click en el control jtbAvances
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAvancesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAvancesMousePressed
        llamaMenu(evt);
    }//GEN-LAST:event_jtbAvancesMousePressed

    /** Llama al evento que muestra el popmenu al hacer click en el control jtbAvances
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAvancesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAvancesMouseReleased
        llamaMenu(evt);
    }//GEN-LAST:event_jtbAvancesMouseReleased
  
    /** Carga los avances registrados en la bd para el objetivo/tema actual
     * @return true si se efectuo la carga correctamente false en caso contrario
     */
    private boolean cargaAvances(){
        String[][] datos;
        String sen="select * from resultados,"+(esTema?"visto":"obtiene")+" where resultados.clvres=";
        sen+=(esTema?"visto":"obtiene")+".clvres and "+(esTema?"clvtem=":"clvobj=")+clave;
        sen+=(esTema?" and clvses="+clvSes:"")+";";
        datos=Consultas.consultaDatos(sen,true);
        if(datos==null){
            error=Consultas.obtenError();
            return false;
        }
        else if(datos[0][0]!=null){
            for(int g=0;g<datos.length;g++){
                Object[] row=new Object[jtbAvances.getColumnCount()];
                row[0]=Integer.parseInt(datos[g][0]);
                row[1]=datos[g][1];
                row[2]=Integer.parseInt(datos[g][2]);
                row[3]=Integer.parseInt(datos[g][3]);
                ((DefaultTableModel)jtbAvances.getModel()).addRow(row);
            }
        }
        setCambios(false);
        return true;
    }
    
    /** Valiad y guarda los registro de avances actuales
     * @return true si se guardo correctamente false de haber datos 
     *   invalidos u ocurrir un error al tratar de guardar en la bd
     */
    public boolean guardaAvances(){
        String[] datos;
        java.util.ArrayList<String> trans;
        if(!sonDatosValidos()){
            return false;
        }
        datos=new String[5];
        trans=new java.util.ArrayList<String>();
        for(int g=0;g<jtbAvances.getRowCount();g++){
            for(int h=0;h<jtbAvances.getColumnCount();h++){
                datos[(h==0?h:(h+1))]=""+jtbAvances.getValueAt(g,h);
            }
            datos[2]=Datos.transformatFchaHora(datos[2],false);
            if(datos[0].equals("0")){
                // al guardar automaticamente guarda la relacion con obtiene o visto
                datos[0]=""+clave;
                datos[1]=""+(esTema?clvSes:0);
                if(Actualiza.nuevoResultado(datos, true)){
                    jtbAvances.setValueAt(""+Actualiza.obtenClave(), g,0);
                }
                else{
                    error="En fila "+(g+1)+" error guardar "+Actualiza.obtenError();
                    return false;
                }
            }
            else{
                trans.add("update resultados set fechayhora='"+datos[2]+"', duracion="+datos[3]+", porcencub="+datos[4]+" where clvres="+datos[0]+";");
            }
        }
        if(trans.size()>0){
            if(!Actualiza.transaccion(trans,false,false)){
                error="Al actualizar datos error:"+Actualiza.obtenError();
                return false;
            }
        }
        setCambios(false);
        return true;
    }
    
    /** Valida los datos de la tabla jtbAvances
     * @return true si todos los datos son correctos false en caso de haber al menos un dato erroneo
     */
    private boolean sonDatosValidos(){
        String aux;
        for(int d=0;d<jtbAvances.getRowCount();d++){
            aux=""+jtbAvances.getValueAt(d,1);
            if(aux.length()<16){
                error="En fila "+(d+1)+" fecha y hora invalida";
                return false;
            }
            if(!operaciones.Datos.valFecha(aux.substring(0,10))){
                error="En fila "+(d+1)+" fecha y hora invalida";
                return false;
            }
            if(!operaciones.Datos.valHorarioSimple(aux.substring(11))){
                error="En fila "+(d+1)+" fecha y hora invalida";
                return false;
            }
            if(Integer.parseInt(""+jtbAvances.getValueAt(d,2))<=0){
                error="En fila "+(d+1)+" tiempo invalido";
                return false;
            }
            if(Integer.parseInt(""+jtbAvances.getValueAt(d,3))<=0 || Integer.parseInt(""+jtbAvances.getValueAt(d,3))>100){
                error="En fila "+(d+1)+" porcentaje cubierto invalido";
                return false;
            }
        }
        return true;
    }

    /** Obtiene el titulo del tema/objetivo del registro actual
     * @return el titulo del tema/objetivo del registro actual
     */
    public String getTitulo(){ return titulo; }
    
    /** Obtiene la clave del registro actual
     * @return la clave del registro actual
     */
    public int getClave(){ return clave; }
    
    /** Obtiene la clave de la sesion a la que pertenece el registro actual
     * @return la clave de la sesion a la que pertenece el registro actual
     */
    public int getClavSes(){ return clvSes; }
   
    /** Obtiene el indicador boolean para saber si el registro actual es tema u objetivo
     * @return el indicador boolean para saber si el registro actual es tema u objetivo
     */
    public boolean esTema(){ return esTema; }
    
    /** Oculta los controles btnAgregaReg y jScrollPane1 */
    public void ocultaAvances(){
        btnAgregaReg.setVisible(false);
        jScrollPane1.setVisible(false);
        setBackground(new java.awt.Color(255,255,255));
    }
    
    /** Muestra los controles btnAgregaReg y jScrollPane1 */
    public void despliega(){
        btnAgregaReg.setVisible(true);
        jScrollPane1.setVisible(true);
        setBackground(new java.awt.Color(215,225,255));
        refCal.ocultaAvances(clave,clvSes);
    }
    
    /** Crea el popupmenu con la accion quitar para los registros de la tabla jtbAvances */
    private void crearPopMenu(){ 
        pmnuAvs=new javax.swing.JPopupMenu();
        javax.swing.JMenuItem mnua=new javax.swing.JMenuItem("Quitar avance");
        mnua.setActionCommand("Quitar avance");
        mnua.addActionListener(this);
        pmnuAvs.add(mnua);
    }
   
    /** Llama al metodo mostrarPopupMenu solo si el click hecho sobre el control jtbAvances
     *   fue hecho sobre el area de celdas validas
     * @param evt El MouseEvent que se genero al hacer click sobre jtbAvances
     */
    private void llamaMenu(java.awt.event.MouseEvent evt){
        int col=jtbAvances.columnAtPoint(evt.getPoint());
        int fila=jtbAvances.rowAtPoint(evt.getPoint());
        if (fila>-1 && col>-1)
            mostrarPopupMenu(evt,""+jtbAvances.getValueAt(fila,0),fila);
    }
  
    /** Muestra el popupmenu sobre la tabla jtbAvances solo si el click hecho sobre el control jtbAvances
     *   ese el disparador de popup segun el so sobre el que se ejecuta el sistema
     * @param evt El MouseEvent que se genero al hacer click sobre jtbAvances
     * @param txClv El texto de la fila sobre la que se hizo click
     * @param fila El numero de fila sobre la que se hizo click
     */
    private void mostrarPopupMenu(java.awt.event.MouseEvent evt, String txClv,int fila){
        javax.swing.JMenuItem menu;
        if (evt.isPopupTrigger()){
            menu=((javax.swing.JMenuItem)pmnuAvs.getComponent(0));
            menu.setActionCommand(""+txClv+":"+fila);
            jtbAvances.setRowSelectionInterval(fila, fila);
            pmnuAvs.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }
   
    /** Obtiene la descripcion del ultimo error ocurrido
     * @return la descripcion del ultimo error ocurrido
     */
    public String getError(){ return  error; }
    
    /** Establece el valor de hayCambios para indicar si hay cambios en los datos sin guardar
     * @param hc un valor boolean que indica si hay cambios en los datos sin guardar
     */
    private void setCambios(boolean hc){
        hayCambios=hc;
        refCal.actualizaCambios();
    }
    
    /** Obtiene el valor de hayCambios que indica si hay cambios en los datos sin guardar
     * @return boolean que indica si hay cambios en los datos sin guardar
     */
    public boolean hayCambios(){ return hayCambios; }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregaReg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbAvances;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables

    /** Establece que hay cambios sin guardar al haber actividad en los datos de la tabla jtbAvances
     * @param e El TableModelEvent que genero el evento
     */
    public void tableChanged(TableModelEvent e) {
        setCambios(true);
    }

    /** Es la implementacion del action command de los menus del menu emergente 
     *   (control pmnuAvs) de acuerdo al ActionCommand de evento llama al metodo 
     *   de la accion en la cual se hizo click (quitar)
     * @param e El ActionEvent que genero el evento
     */
    public void actionPerformed(ActionEvent e) {
        String accion=e.getActionCommand();
        java.util.StringTokenizer tk=new java.util.StringTokenizer(accion,":");
        int clv=Integer.parseInt(tk.nextToken());
        int fila=Integer.parseInt(tk.nextToken());
        String mens="<html>Esta accion no se podra deshacer<br>¿Desea eliminar completamente la fila con el avance clave: "+clv+"?</html>";
        TipoRespuesta tmp=refCal.pideDesicion("Atencion",mens);
        if(tmp.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()) return;
        if(clv!=0){
            if(!Actualiza.actualiza("delete from Resultados where ClvRes="+clv+";",false,true)){
                refCal.muestraMensaje("No se pudo realizar la accion",Actualiza.obtenError(),TipoMensaje.ERROR);
                return;
            }
        }
        ((DefaultTableModel)jtbAvances.getModel()).removeRow(fila);
    }
    
}
