/*
 * FrameCalendario.java
 *  Ventana para mostrar calendario de sesiones programadas de un grupo 
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package grupos;

import database.Consultas;
import database.Actualiza;
import reportes.ImpCalGrupo;
import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import iconos.Iconos;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.table.DefaultTableModel;
import sistema.ControlDiasSemana;

/**  Es una ventana interna (JInternalFrame) para manejar el calendario de sesiones 
 *   programadas de un grupo, proporciona los controles y metodos para agregar, modificar
 *   o eliminar sesiones programadas asi como objetivos y temas para ver relacionados 
 *   a dichas sesiones
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameCalendario extends sistema.ModeloFrameInterno implements java.awt.event.ActionListener{
 
    /**Clave del grupo actual*/
    private String clave;
    /**Materia del grupo actual*/
    private String materia;
    /**Fecha inicial del periodo de vigencia del grupo actual*/
    private String fechaIni;
    /**Fecha final del periodo de vigencia del grupo actual*/
    private String fechaFin;
    /**version del temario aplicada al grupo actual*/
    private int temario;
    /**PopUpMenu para el control jtSesiones para acciones sobre los registros de sesiones*/
    private javax.swing.JPopupMenu pmnuSes;
    /**Descripcion del ultimo error ocurrido*/
    private String error;
    /**Lista de controles de avances para los objetivos y temas palaneados para las sesiones programadas pare el grupo actual*/
    private ArrayList<ControlAvanceObj> lstAvances;
    /**Control de horario semanala para el grupo actual*/
    private ControlDiasSemana horarioSemanal;
    
    /** Crea una nueva ventana FrameCalendario
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameCalendario(sistema.FramePrincipal ventana) {
        super(ventana,"frmcal.png");
        try {
            initComponents();
            clave=materia=error=fechaIni=fechaFin=null;
            temario=0;
            btnCarga.setIcon(Iconos.getIcono("cargar.png"));
            btnVerFicha.setIcon(Iconos.getIcono("frmgru.png"));
            btnVerFicha.setText("");
            btnProgCalif.setIcon(Iconos.getIcono("frmcalif.png"));
            btnProgCalif.setText("");
            btnImprimir.setIcon(Iconos.getIcono("impresora.png"));
            btnImprimir.setText("");
            btnAgrega.setIcon(Iconos.getIcono("nuevo.png"));
            btnQuitar.setIcon(Iconos.getIcono("elimina.png"));
            btnMod.setIcon(Iconos.getIcono("modifica.png"));
            btnGrdAvances.setIcon(Iconos.getIcono("guardar.png"));
            lstAvances = new ArrayList<ControlAvanceObj>();
            horarioSemanal = new ControlDiasSemana("Distribución de horario semanal", "Sesion",this);
            jtbTabs.setComponentAt(2, horarioSemanal);
            crearPopMenu();
        } 
        catch (ControlDiasSemana.RefSuperiorInvalida ex){}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnVerFicha = new javax.swing.JButton();
        btnProgCalif = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtClv = new javax.swing.JTextField();
        btnCarga = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        lblDescGrupo = new javax.swing.JLabel();
        jtbTabs = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        lblTitSes = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtSesiones = new javax.swing.JTable();
        btnQuitar = new javax.swing.JButton();
        btnAgrega = new javax.swing.JButton();
        btnMod = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jcbVerTem = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        lblNumObjs = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlAvances = new javax.swing.JPanel();
        btnGrdAvances = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();

        jLabel1.setText("jLabel1");

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Calendario de grupo");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnVerFicha.setText("fich");
        btnVerFicha.setToolTipText("Ficha de grupo");
        btnVerFicha.setEnabled(false);
        btnVerFicha.setFocusable(false);
        btnVerFicha.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVerFicha.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVerFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerFichaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnVerFicha);

        btnProgCalif.setText("pcal");
        btnProgCalif.setToolTipText("Programacion de rubros de evaluacion");
        btnProgCalif.setEnabled(false);
        btnProgCalif.setFocusable(false);
        btnProgCalif.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProgCalif.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProgCalif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgCalifActionPerformed(evt);
            }
        });
        jToolBar1.add(btnProgCalif);

        btnImprimir.setText("imp");
        btnImprimir.setToolTipText("Imprimir un reporte");
        btnImprimir.setEnabled(false);
        btnImprimir.setFocusable(false);
        btnImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImprimir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnImprimir);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Buscar Clave:");

        btnCarga.setMnemonic('C');
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(378, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCarga)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnCarga)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3))
        );

        jToolBar1.add(jPanel2);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jLabel9.setText("Grupo clave:");

        txtClave.setEditable(false);

        lblDescGrupo.setText("Descripción: GradoGrupo Materia [en Aula]");

        lblTitSes.setText("Sesiones programadas para el grupo:");

        jtSesiones.setAutoCreateRowSorter(true);
        jtSesiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Fecha y hora", "Duracion", "Plan", "Tema(s)", "Objetivos(s)", "Competencia", "Material", "Observaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtSesiones.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtSesiones.getTableHeader().setReorderingAllowed(false);
        jtSesiones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtSesionesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtSesionesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtSesionesMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jtSesiones);
        jtSesiones.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtSesiones.getColumnModel().getColumn(0).setPreferredWidth(45);
        jtSesiones.getColumnModel().getColumn(1).setPreferredWidth(115);
        jtSesiones.getColumnModel().getColumn(2).setPreferredWidth(60);
        jtSesiones.getColumnModel().getColumn(3).setPreferredWidth(150);
        jtSesiones.getColumnModel().getColumn(4).setPreferredWidth(150);
        jtSesiones.getColumnModel().getColumn(5).setPreferredWidth(150);
        jtSesiones.getColumnModel().getColumn(6).setPreferredWidth(150);
        jtSesiones.getColumnModel().getColumn(7).setPreferredWidth(150);
        jtSesiones.getColumnModel().getColumn(8).setMinWidth(220);
        jtSesiones.getColumnModel().getColumn(8).setPreferredWidth(120);

        btnQuitar.setMnemonic('Q');
        btnQuitar.setText("Quitar");
        btnQuitar.setToolTipText("Quitar sesion");
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnAgrega.setMnemonic('G');
        btnAgrega.setText("Agregar");
        btnAgrega.setToolTipText("Agregar nueva sesion");
        btnAgrega.setEnabled(false);
        btnAgrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaActionPerformed(evt);
            }
        });

        btnMod.setText("Modificar");
        btnMod.setToolTipText("Modificar sesion");
        btnMod.setEnabled(false);
        btnMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModActionPerformed(evt);
            }
        });

        jLabel8.setText("Utilizar temario versión");

        jcbVerTem.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitSes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbVerTem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAgrega)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuitar)
                .addContainerGap())
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitSes)
                    .addComponent(btnAgrega)
                    .addComponent(btnMod)
                    .addComponent(btnQuitar)
                    .addComponent(jcbVerTem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
        );

        jtbTabs.addTab("Sesiones programadas", jPanel4);

        lblNumObjs.setText("N objetivos listados (Haga click en el titulo de cualquiera de ellos para registrar avances).");

        pnlAvances.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(pnlAvances);

        btnGrdAvances.setText("Guardar");
        btnGrdAvances.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrdAvancesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNumObjs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                .addComponent(btnGrdAvances)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumObjs)
                    .addComponent(btnGrdAvances))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
        );

        jtbTabs.addTab("Avance en objetivos", jPanel1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 723, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
        );

        jtbTabs.addTab("Horario Semanal", jPanel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtbTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDescGrupo)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescGrupo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtbTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Valida la clave ingresada en el control txtClv y busca en la base de datos un grupo con esa clave
     * @param evt El ActionEvent que genero el evento
     */
    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed
        String tmpClv=txtClv.getText().trim().toUpperCase();
        if(tmpClv.equals("")) {
            muestraMensaje("Error en el parámetro", "Clave invalida",TipoMensaje.ERROR);
            return;
        }
        if(getTitle().equals("Calendario de grupo "+tmpClv)){
            actualiza();
        }
        else if(existeVentana("Calendario de grupo "+tmpClv,true)){ 
            txtClv.setText(tmpClv);
            return;
        }        
        else cargaDatosGrupo(tmpClv);
    }//GEN-LAST:event_btnCargaActionPerformed

    /** Abre la ventana con la ficha del grupo actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnVerFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerFichaActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(txtClave.getText(),1);
    }//GEN-LAST:event_btnVerFichaActionPerformed

    /** Abre una ventana (clase FrmRegSes) para crear el registro de una nueva sesion
     * @param evt El ActionEvent que genero el evento
     */
    private void btnAgregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaActionPerformed
        FrmRegSes newRegInd;
        TipoRespuesta resp;
        String aux;
        int verSel;
        if(jcbVerTem.getSelectedIndex()<0){
            muestraMensaje("Atención","Para poder agregar sesiones debe seleccionar una versión de temario",TipoMensaje.INFORMACION);
            return;
        }
        verSel=Integer.parseInt(""+jcbVerTem.getSelectedItem());
        if(existeVentana("Registro de sesión grupo: "+clave, true)) return;
        if(temario==0){
            if(!asignaTemarioVersion(verSel)){
                aux="<html>No se pudo asignar la nueva versión de temario<br>Error: ";
                aux+=error+"</html>";
                muestraMensaje("Ocurrio un error",aux,TipoMensaje.ERROR);
                return;
            }
        }
        if(verSel!=temario){
            aux="<html>La versión de temario seleccionada no corresponde<br>a la ";
            aux+="versión actualmente utilizada.<br>¿Desea utilizar la versión "+jcbVerTem.getSelectedItem();
            aux+=" en lugar de la "+temario+"?<br>(<i>Si cambia de versión los temas versión "+temario;
            aux+=" en las sesiones seran quitados</i>)</html>";
            resp=pideDesicion("Atención",aux);
            if(resp.getTipo()==TipoRespuesta.ACEPTAR.getTipo()){
                if(!asignaTemarioVersion(verSel)){
                    aux="<html>No se pudo asignar la nueva versión de temario<br>Error: ";
                    aux+=error+"</html>";
                    muestraMensaje("Ocurrio un error",aux,TipoMensaje.ERROR);
                    return;
                }
            }
            else if(resp.getTipo()==TipoRespuesta.CANCELAR.getTipo()){
                return;
            }
            else if(resp.getTipo()==TipoRespuesta.RECHAZAR.getTipo()){
                jcbVerTem.setSelectedItem(""+temario);
            }
        }
        newRegInd = new FrmRegSes(getPrincipalVnt(),this,clave,temario);
        agregaVentana(newRegInd);
    }//GEN-LAST:event_btnAgregaActionPerformed

    /** Pide la clave de una sesion perteneciente al grupo actual y si existe abre 
     *  su registro (ventana clase FrmRegSes) para dar la opcione de modificar/actualizar sus datos
     * @param evt El ActionEvent que genero el evento
     */
    private void btnModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModActionPerformed
        DefaultTableModel modelo=(DefaultTableModel)jtSesiones.getModel();
        boolean bandera=false;
        int claveses=pideEntero("Modificar datos de una sesión", "Ingrese la clave de la sesión que dese modificar:");
        for(int i=0;i<modelo.getRowCount();i++){
            if(Integer.parseInt(""+modelo.getValueAt(i,0))==claveses){                
                modificaSesion(claveses);
                bandera=true;
                break;
            }
        }
        if(!bandera){
            muestraMensaje("No se pudo realizar la acción", "No se encontro registro con la clave: "+claveses,TipoMensaje.ERROR);
        }
    }//GEN-LAST:event_btnModActionPerformed

    /** Recibe una clave de una sesion y verifica que pertenesca a el grupo actual
     *  para abrir su  registro (ventana clase FrmRegSes) de una sesion perteneciente al grupo actual
     *   para dar la opcion de modificar/actualizar sus datos
     * @param clave La clave de la sesion que desea abrir
     */
    public void muestraSesion(String clave){
        DefaultTableModel modelo=(DefaultTableModel)jtSesiones.getModel();
        int fila=-1;
        for(int j=0;j<modelo.getRowCount();j++) 
            if(clave.equals(""+modelo.getValueAt(j,0))){
                fila=j; break;
            }
        if(fila!=-1) modificaSesion(Integer.parseInt(clave));
        else muestraMensaje("Error","No existe la sesión con clave "+clave,TipoMensaje.ERROR);
    }
   
    /** Abre el registro (ventana clase FrmRegSes) de una sesion perteneciente al grupo actual
     *   para dar la opcion de modificar/actualizar sus datos
     * @param claveses La clave de la sesion a abrir
     */
    private void modificaSesion(int claveses){
        FrmRegSes newRegInd;
        int verSel;
        String aux;
        TipoRespuesta resp;
        if(jcbVerTem.getSelectedItem()==null){
            muestraMensaje("Atención","Para poder modificar sesiones debe seleccionar una versión de temario",TipoMensaje.ERROR);
            return;
        }
        verSel=Integer.parseInt(""+jcbVerTem.getSelectedItem());
        if(!existeVentana("Registro de sesión "+claveses+" grupo: "+clave, true)){
            if(verSel!=temario){
                aux="<html>La versión de temario seleccionada no corresponde<br>a la ";
                aux+="versión actualmente utilizada.<br>¿Desea utilizar la versión "+jcbVerTem.getSelectedItem();
                aux+=" en lugar de la "+temario+"?<br>(<i>Si cambia de versión los temas versión "+temario;
                aux+=" en las sesiones seran quitados</i>)</html>";
                resp=pideDesicion("Atención",aux);
                if(resp.getTipo()==TipoRespuesta.ACEPTAR.getTipo()){
                    if(!asignaTemarioVersion(verSel)){
                        aux="<html>No se pudo asignar la nueva versión de temario<br>Error: ";
                        aux+=error+"</html>";
                        muestraMensaje("Ocurrio un error",aux,TipoMensaje.ERROR);
                        return;
                    }
                }
                else if(resp.getTipo()==TipoRespuesta.CANCELAR.getTipo()){
                    return;
                }
                else if(resp.getTipo()==TipoRespuesta.RECHAZAR.getTipo()){
                    jcbVerTem.setSelectedItem(""+temario);
                }
            }
            newRegInd = new FrmRegSes(getPrincipalVnt(),this,clave,temario);
            if(!newRegInd.cargaSesion(claveses)){
                return;
            }
            agregaVentana(newRegInd);
        }
    }
 
    /** Pide la clave de una sesion perteneciente al grupo actual y si existe envia al metodo para eliminar su registro
     * @param evt El ActionEvent que genero el evento
     */
    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        DefaultTableModel modelo=(DefaultTableModel)jtSesiones.getModel();
        int tmp;
        boolean bandera=false;
        int claveses=pideEntero("Eliminar una sesión", "Ingrese la clave de la sesión que desea eliminar");
        for(int i=0;i<modelo.getRowCount();i++){
            tmp = Integer.parseInt(""+modelo.getValueAt(i,0));
            if(tmp==claveses){
                quitarSesion(claveses);
                bandera=true;
                break;
            }
        }
        if(!bandera){
            muestraMensaje("No se pudo realizar la acción", "No se encontro registro con la clave: "+claveses,TipoMensaje.ERROR);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    /** Llama al metodo que muestra el popupmenu para la tabla de sesiones (control jtSesiones)
     * @param evt El MouseEvent que genero el evento
     */
    private void jtSesionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSesionesMouseClicked
        llamaMenu(evt);
    }//GEN-LAST:event_jtSesionesMouseClicked

    /** Llama al metodo que muestra el popupmenu para la tabla de sesiones (control jtSesiones)
     * @param evt El MouseEvent que genero el evento
     */
    private void jtSesionesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSesionesMousePressed
        llamaMenu(evt);
    }//GEN-LAST:event_jtSesionesMousePressed

    /** Llama al metodo que muestra el popupmenu para la tabla de sesiones (control jtSesiones)
     * @param evt El MouseEvent que genero el evento
     */
    private void jtSesionesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSesionesMouseReleased
        llamaMenu(evt);
    }//GEN-LAST:event_jtSesionesMouseReleased

    /** Llama al metodo mostrarPopupMenu solo si el click hecho sobre el control jtSesiones
     *   fue hecho sobre el area de celdas validas
     * @param evt El MouseEvent que se genero al hacer click sobre jtSesiones
     */
    private void llamaMenu(java.awt.event.MouseEvent evt){
        int col=jtSesiones.columnAtPoint(evt.getPoint());
        int fila=jtSesiones.rowAtPoint(evt.getPoint());        
        int filaClave=0;
        for(int i=0;i<jtSesiones.getColumnCount();i++)
            if(jtSesiones.getColumnName(i).equals("Clave")){
                filaClave=i; break;
            }
        if (fila>-1 && col>-1 && jtSesiones.getValueAt(fila,filaClave)!=null)
            mostrarPopupMenu(evt,""+jtSesiones.getValueAt(fila,filaClave),fila);
    }
    
    /** Abre la ventana con los rubros de evaluacion progarmados para el grupo actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnProgCalifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgCalifActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,3);
    }//GEN-LAST:event_btnProgCalifActionPerformed

    /** Genera un reporte con las sesiones programadas para el grupo actual y abre un 
     *   dialogo para enviarlo a la impresora
     * @param evt El ActionEvent que genero el evento
     */
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Map<String,String> parametros = new HashMap<String,String>();
        ArrayList campos=new ArrayList();
        ImpCalGrupo campo;
        String grupo=txtClave.getText().substring(0,2)+" "+txtClave.getText().substring(7);
        DefaultTableModel modelo=(DefaultTableModel)jtSesiones.getModel();
        if(modelo.getRowCount()<1){
            muestraMensaje("No se puede imprimir","No hay sesiones programadas",TipoMensaje.ERROR);
            return;
        }
        String[] datosDoc=Consultas.consultaUnCampo("select * from datosdoc,datosinst;",false);
        if(datosDoc==null){
            muestraMensaje("Error al consultar datos de cabecera de reporte",Consultas.obtenError(),TipoMensaje.ERROR);
            return;
        }
        parametros.put("NOMINST",datosDoc[2]);
        parametros.put("UNIACAESC",datosDoc[3]);
        parametros.put("AREAPROG",datosDoc[4]);
        parametros.put("NOMDOC",datosDoc[0]);
        parametros.put("NOMMATE",materia);
        parametros.put("GRUPO",grupo);
        for(int s=0;s<modelo.getRowCount();s++){
            StringTokenizer tk=new StringTokenizer(""+modelo.getValueAt(s,1));
            campo=new ImpCalGrupo(tk.nextToken(),tk.nextToken(),""+modelo.getValueAt(s,3),(modelo.getValueAt(s,4)!=null?""+modelo.getValueAt(s,4):null)
                    ,(modelo.getValueAt(s,6)!=null?""+modelo.getValueAt(s,6):null),(modelo.getValueAt(s,7)!=null?""+modelo.getValueAt(s,7):null));
            campos.add(campo);
        }
        enviarImpresion("Calendario de sesiones "+grupo,3,parametros,campos);
    }//GEN-LAST:event_btnImprimirActionPerformed

    /** Llama al metodo para guardar los cambios en los avances de objetivos registrados
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGrdAvancesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrdAvancesActionPerformed
        if(guardaCambios()){
            muestraMensaje("Acción realizada","Se han guardado todos los avances de objetivos",TipoMensaje.INFORMACION);
        }
}//GEN-LAST:event_btnGrdAvancesActionPerformed
    
    /** Crea los registros de avances de objetivos ingresados en los controle actuales
     * @return true si los registros se guardaron correctamente. 
     *   false si no se pudo guardar al menos un registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        ControlAvanceObj avance;
        String aux;
        for(int h=0;h<lstAvances.size();h++){
            avance=lstAvances.get(h);
            if(avance.hayCambios()){
                if(!avance.guardaAvances()){
                    aux="<html>Ocurrio un error al guardar avances<br>En "+(avance.esTema()?"tema ":"objetivo ");
                    aux+=avance.getTitulo()+" sesión clave "+avance.getClavSes();
                    aux+="<br>"+avance.getError()+"</html>";
                    avance.despliega();
                    muestraMensaje("No se pudo guardar",aux,TipoMensaje.ERROR);
                    return false;
                }
            }
        }
        return true;
    }
    
    /** Elimina el registro de una sesion perteneciente al grupo actual
     * @param claveses La clave de la sesion a eliminar
     */
    private void quitarSesion(int claveses){
        String mens="<html>Al eliminar una sesión se borraran sus objetivos<br>y posibles avances registrados";
        mens+="<br>Esta acción no se podra deshacer<br>¿Desea eliminar completamente la sesión clave: "+claveses+"?</html>";
        TipoRespuesta tmp=pideDesicion("Atención",mens);
        if(tmp.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()) return;
        if(!Actualiza.actualiza("delete from Sesiones where ClvSes="+claveses+";",false,true))
            muestraMensaje("No se pudo realizar la acción",Actualiza.obtenError(),TipoMensaje.ERROR);
        else{
            muestraMensaje("Acción realizada", "Se ha eliminado completamente la sesión",TipoMensaje.INFORMACION);
            actualiza();
        }
    }
    
    /** Vuelve a cargar todos los registros desde la base de datos de todos los controles para el grupo actual */
    public void actualiza(){        
        cargaDatosGrupo(clave);
    }
  
    /** Busca en la base de datos el registro de un grupo y si lo encuentra carga 
     *   todos los registros relaciondos con los controles de esta ventana
     * @param newClave La clave del grupo a cargar
     * @return true si encontro el grupo y cargo la informacion false en caso de 
     *   que el grupo no exista o halla ocurrido algun error al cargar los datos.
     */
    public boolean cargaDatosGrupo(String newClave){
        String sen="select distinct(version) from temario,cubre where temario.clvtem=cubre.clvtem and cubre.clvm='"+newClave.substring(3,6)+"' order by version;";
        int[] versTema;
        String[] dts;
        DefaultTableModel modelo;
        DefaultTableModel modelPrevio;
        int aux;
        versTema=Consultas.consultaEnteros(sen,true);
        if(versTema==null){
            muestraMensaje("Error al cargar datos del grupo",Consultas.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        jcbVerTem.removeAllItems();
        if(versTema[0]!=-1){
            for(int i=0;i<versTema.length;i++) jcbVerTem.addItem(versTema[i]);
            jcbVerTem.setSelectedIndex(-1);
        }
        sen="select grupos.*,nombre,verstem from grupos,imparte,materias where grupos.clvg='"+newClave;
        sen+="' and grupos.clvg=imparte.clvg and materias.clvm=imparte.clvm;";
        dts=Consultas.consultaUnCampo(sen,false);
        if(dts==null){
            muestraMensaje("Error al cargar datos del grupo",Consultas.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else if(dts[0]!=null){
            clave=newClave; txtClave.setText(""+newClave);
            setTitle("Calendario de grupo "+newClave);
            materia=dts[6]; fechaIni=dts[3]; fechaFin=dts[4];
            lblDescGrupo.setText(dts[1]+dts[2]+" "+materia+(dts[5]!=null?" en Aula "+dts[5]:""));
            if(!dts[7].equals("0")){
                aux=Integer.parseInt(dts[7]);
                jcbVerTem.setSelectedItem(aux);
                temario=aux;
            }
            btnAgrega.setEnabled(true); btnVerFicha.setEnabled(true);
            btnProgCalif.setEnabled(true); btnImprimir.setEnabled(true);
            jcbVerTem.setEnabled(true);
            if(!horarioSemanal.cargaDatos()){
                muestraMensaje("Error al consultar horario semanal",horarioSemanal.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            horarioSemanal.setTitulo("Horario semanal grupo "+lblDescGrupo.getText()+" "+clave.substring(7));
            // carga de sesiones
            sen="select sesiones.clvses,fechayhora,duracion,plan,concat(temario.numtem,'- ',";
            sen+="temario.tittem,' (Objetivo cubrir ',cast(vetema.porcenplan as char),'%)'),descrip,competencia";
            sen+=",material,observaciones,clvObj,clvtem from ProgSes,Sesiones left join vetema using(clvses) left ";
            sen+="join temario using(clvtem) left join busca using(clvses) left join objetivos";
            sen+=" using(clvobj) where Sesiones.ClvSes=ProgSes.ClvSes and ProgSes.";
            sen+="ClvG='"+newClave+"' order by FechaYHora;";
            modelo=Consultas.consTipoTable(sen,false);
            if(modelo==null){
                muestraMensaje("Error al consultar las sesiones",Consultas.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            modelPrevio=((DefaultTableModel)jtSesiones.getModel());
            while(modelPrevio.getRowCount()>0){modelPrevio.removeRow(0);}
            lstAvances.clear();
            pnlAvances.removeAll();
            if(modelo.getRowCount()>0){
                for(int j=0;j<modelo.getRowCount();j++){
                    Object[] row=new Object[modelo.getColumnCount()-2];
                    for(int i=0;i<row.length;i++){
                        if(i==0 || i==2) row[i]=Integer.parseInt(""+modelo.getValueAt(j, i));
                        else if(modelo.getValueAt(j, i)!=null) row[i]=""+modelo.getValueAt(j, i);
                        else row[i]=null;
                    }
                    if(modelo.getValueAt(j,modelo.getColumnCount()-2)!=null){
                        aux=Integer.parseInt(""+modelo.getValueAt(j,modelo.getColumnCount()-2));
                        cargaObjetivo(aux,Integer.parseInt(""+modelo.getValueAt(j,0)),""+modelo.getValueAt(j,5),false,""+modelo.getValueAt(j,1));
                    }
                    if(modelo.getValueAt(j,modelo.getColumnCount()-1)!=null){
                        aux=Integer.parseInt(""+modelo.getValueAt(j,modelo.getColumnCount()-1));
                        cargaObjetivo(aux,Integer.parseInt(""+modelo.getValueAt(j,0)),""+modelo.getValueAt(j,4),true,""+modelo.getValueAt(j,1));
                    }
                    modelPrevio.addRow(row);
                }
                btnQuitar.setEnabled(true); btnMod.setEnabled(true);
                lblTitSes.setText("Sesiones programadas para el grupo: ");
                lblNumObjs.setText(""+lstAvances.size()+" objetivos listados (Haga click en el titulo de cualquiera de ellos para registrar avances).");
            }
        }
        else{
            muestraMensaje("Error", "No se encontraron datos para esa clave",TipoMensaje.ERROR);
            return false;
        }
        return true;
    }
  
    /** Carga los objetivos/temas por ver para una sesion del grupo actual
     * @param clv La clave del objetivo a cargar
     * @param ses La clave de la sesion a la que pertenece
     * @param tit El titulo del objetivo a cargar
     * @param esTema Indica si el objetivo es tema planeado u objetivo especifico
     * @param fecha La fecha de la sesion a la que pertenece
     */
    private void cargaObjetivo(int clv,int ses,String tit,boolean esTema,String fecha){
        ControlAvanceObj avance;
        java.awt.GridBagLayout gbl=((java.awt.GridBagLayout)pnlAvances.getLayout());
        java.awt.GridBagConstraints gbc=new java.awt.GridBagConstraints();
        for(int f=0;f<lstAvances.size();f++){
            if(lstAvances.get(f).getClave()==clv && lstAvances.get(f).getClavSes()==ses){
                return;
            }
        }
        avance=new ControlAvanceObj(this,clv,ses,esTema,tit,fecha);
        gbc.gridx=0; gbc.gridy=lstAvances.size();
        gbc.fill=java.awt.GridBagConstraints.HORIZONTAL;
        gbc.insets=new java.awt.Insets(0,0,4,0);
        gbl.setConstraints(avance, gbc);
        pnlAvances.add(avance);
        lstAvances.add(avance);
    }
    
    /** Minimiza un control de avance en objetivos (control ControlAvanceObj)
     * @param clv La clave del objetivo del control a minimizar
     * @param ses La clave de la sesion a la que pertenece
     */
    public void ocultaAvances(int clv, int ses){
        for(int f=0;f<lstAvances.size();f++){
            if(lstAvances.get(f).getClave()==clv && lstAvances.get(f).getClavSes()==ses){
                continue;
            }
            lstAvances.get(f).ocultaAvances();
        }
    }
    
    /** Crea el popupmenu con la accion quitar para los registros de la tabla jtbAvances */
    private void crearPopMenu(){ 
        pmnuSes=new javax.swing.JPopupMenu();
        javax.swing.JMenuItem mnua=new javax.swing.JMenuItem("Modificar datos");
        mnua.setActionCommand("Modificar datos");
        mnua.addActionListener(this);
        javax.swing.JMenuItem mnuq=new javax.swing.JMenuItem("Quitar sesion");
        mnuq.setActionCommand("Quitar sesion");        
        mnuq.addActionListener(this);
        pmnuSes.add(mnua);
        pmnuSes.add(mnuq);
    }
    
    /** Muestra el popupmenu sobre la tabla jtSesiones solo si el click hecho sobre el control jtSesiones
     *   ese el disparador de popup segun el so sobre el que se ejecuta el sistema
     * @param evt El MouseEvent que se genero al hacer click sobre jtSesiones
     * @param txClv El texto de la fila sobre la que se hizo click
     * @param fila El numero de fila sobre la que se hizo click
     */
    private void mostrarPopupMenu(java.awt.event.MouseEvent evt, String txClv,int fila){
        java.awt.Component[] mns;
        if (evt.isPopupTrigger()){
            mns =pmnuSes.getComponents();
            for(int y=0;y<mns.length;y++){
                String tmp=((javax.swing.JMenuItem)mns[y]).getText();
                ((javax.swing.JMenuItem)mns[y]).setActionCommand(tmp+":"+txClv+":"+fila);
            }
            jtSesiones.setRowSelectionInterval(fila, fila);
            pmnuSes.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }
  
    /** Es la implementacion del action command de los menus del menu emergente 
     *   (control pmnuSes) de acuerdo al ActionCommand de evento llama al metodo 
     *   de la accion en la cual se hizo click (modificar o quitar)
     * @param evt El ActionEvent que genero el evento
     */
    public void actionPerformed(java.awt.event.ActionEvent evt){
        java.util.StringTokenizer toks=new java.util.StringTokenizer(evt.getActionCommand(),":");
        String accion=toks.nextToken();
        int claveSes=Integer.parseInt(toks.nextToken());     
        //int fila=Integer.parseInt(toks.nextToken());
        if(accion.equals("Modificar datos")) modificaSesion(claveSes);
        else quitarSesion(claveSes);
        pmnuSes.setVisible(false);
    }

    /** Asigna a las sesiones programadas del grupo actual una version 
     *   de temario de la materia
     * @param version La version del temario a asiganr
     * @return true si la asignacion s epudo hacer correctamente, false en caso ocntrario
     */
    private boolean asignaTemarioVersion(int version){
        String sen;
        int[] temas;
        int[] sesiones;
        java.util.ArrayList<String> trans = new java.util.ArrayList<String>();
        error=null;
        sen="select distinct(clvses) from progses where clvg='"+clave+"';";
        sesiones=Consultas.consultaEnteros(sen,false);
        if(sesiones==null){
            error=Consultas.obtenError();
            return false;
        }
        else if(sesiones[0]!=-1){
            sen="select distinct(cubre.clvtem) from cubre,temario where clvm='"+clave.substring(3,6);
            sen+="' and cubre.clvtem=temario.clvtem and version<>"+version+";";
            temas=Consultas.consultaEnteros(sen,false);
            if(temas==null){
                error=Consultas.obtenError();
                return false;
            }
            else if(temas[0]!=-1){
                for(int g=0;g<sesiones.length;g++){
                    for(int h=0;h<temas.length;h++){
                        trans.add("delete from vetema where clvses="+sesiones[g]+" and clvtem="+temas[h]+";");
                    }
                }
            }
        }
        trans.add("update imparte set verstem="+version+" where clvm='"+clave.substring(3,6)+"' and clvg='"+clave+"';");
        if(!Actualiza.transaccion(trans,false,false)){
            error=Actualiza.obtenError();
            return false;
        }
        temario=version;
        return true;
    }
  
    /** Obtiene la clave del grupo actual
     * @return la clave del grupo actual
     */
    public String getClavegrupo(){ return clave; }
  
    /** Actualiza la lista de controles ControlAvanceObj al haber cambios en las sesiones programadas */
    public void actualizaCambios(){
        ControlAvanceObj avance;
        setCambios(false);
        for(int h=0;h<lstAvances.size();h++){
            avance=lstAvances.get(h);
            if(avance.hayCambios()){
                setCambios(true);
                break;
            }
        }
    }
    
    /** Obtiene el rango de las fechas de vigencia del grupo actual
     * @return Vector con las fechas de vigencia del grupo actual
     *   el primer elemento es la fgecha inicial y el segundo la fecha final
     */
    public String[] getFechasVigencia(){
        String[] vigencia=new String[2];
        vigencia[0]=fechaIni;
        vigencia[1]=fechaFin;
        return vigencia;
    }

    /** Genera automaticamente registros de sesiones programadas para N fehas
     * @param fechas Lista de fechas (N>0) donde para cada fecha se generara 
     *   el registro de una sesion programada
     */
    public void generaSesiones(ArrayList<String> fechas){
        int[] resultados=new int[3]; //indice 0=numYaExistentes, 1=numCreados, 2=numFallas
        StringTokenizer tk;
        String[] dts=new String[7];
        int aux;
        resultados[0]=resultados[1]=resultados[2]=0;
        for(String str:fechas){
            tk=new StringTokenizer(str);
            dts[0]=tk.nextToken("+")+":00"; dts[1]=tk.nextToken();
            dts[2]="No Especificado!"; dts[3]=null; dts[4]=null;
            dts[5]=null; dts[6]=clave;
            if(Actualiza.nuevoRgSesProg(dts,true)){
                aux=Actualiza.obtenClave();
                if(aux==0) resultados[0]++;
                else resultados[1]++;
            }
            else{
                error=Actualiza.obtenError();
                resultados[2]++;
            }
        }
        actualiza();
        dts[0]="<html>Se ejecuto la generación automatica de sesiones<br>";
        dts[0]+=fechas.size()+" sesiones calculadas de acuerdo a la tabla<br>Se generaron ";
        dts[0]+=resultados[1]+" sesiones nuevas<br>"+resultados[0]+" Existian previamente<br>Ocurrieron ";
        dts[0]+=resultados[2]+" errores";
        if(resultados[2]>0){
            dts[0]+="<br>El ultimo error detectado fue:<br>"+error;
        }
        muestraMensaje("Generación de sesiones",dts[0]+"</html>",TipoMensaje.INFORMACION);
    }
   
    /** Obtiene la descripcion del utlimo error ocurrido
     * @return la descripcion del utlimo error ocurrido
     */
    public String getError(){ return error; }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgrega;
    private javax.swing.JButton btnCarga;
    private javax.swing.JButton btnGrdAvances;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnMod;
    private javax.swing.JButton btnProgCalif;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnVerFicha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jcbVerTem;
    private javax.swing.JTable jtSesiones;
    private javax.swing.JTabbedPane jtbTabs;
    private javax.swing.JLabel lblDescGrupo;
    private javax.swing.JLabel lblNumObjs;
    private javax.swing.JLabel lblTitSes;
    private javax.swing.JPanel pnlAvances;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtClv;
    // End of variables declaration//GEN-END:variables
   
}