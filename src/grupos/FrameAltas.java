/*
 * FrameAltas.java
 *  Ventana para crear nuevos registros de grupos
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package grupos;

import definiciones.TipoMensaje;
import iconos.Iconos;

/**  Es una ventana interna (JInternalFrame) desde la cual se puede crear 
 *  el registro de grupos
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameAltas extends sistema.ModeloFrameInterno{

    /**Las claves de la materias que imparte el docente registradas en la bd*/
    private String[] clvsMats;
    /**Clave del gruo una vez creado el registro*/
    private String clave;
    /** Referencia al objeto para detectar cambios en el contenido de los controles de texto */
    private ListenChanges listenCh;
    
    /** Crea una nueva ventana FrameAltas
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameAltas(sistema.FramePrincipal ventana){
        super(ventana,"frmaltas.png");
        initComponents();        
        String[] materias;
        clave=null;
        btnNuevo.setIcon(Iconos.getIcono("borra.png"));
        btnNuevo.setText("");
        btnCrear.setIcon(Iconos.getIcono("guardar.png"));
        btnCrear.setText("");
        btnVFich.setIcon(Iconos.getIcono("frmgru.png"));
        btnVFich.setText("");
        btnPCal.setIcon(Iconos.getIcono("frmcal.png"));
        btnPCal.setText("");
        btnProgCalif.setIcon(Iconos.getIcono("frmcalif.png"));
        btnProgCalif.setText("");
        materias=database.Consultas.consultaLista("select clvm,nombre from materias order by nombre;",false);
        if(materias==null){
            muestraMensaje("Error al consultar lista de materias",database.Consultas.obtenError(),TipoMensaje.ERROR);
            clvsMats=null;
        }
        else if(materias[0]!=null){
            clvsMats=new String[materias.length];
            for(int g=0;g<materias.length;g++){
                clvsMats[g]=materias[g].substring(0,3);
                jcbMaterias.addItem(materias[g].substring(4));
            }
            jcbMaterias.setSelectedIndex(-1);
        }
        else
            muestraMensaje("Aviso!","No se han encontrado materias registradas",TipoMensaje.INFORMACION);
        setCambios(false);
        escuchaCambios();
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtGrd = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtGrp = new javax.swing.JTextField();
        txtFIni = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFFin = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAul = new javax.swing.JTextField();
        jcbMaterias = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnNuevo = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        btnVFich = new javax.swing.JButton();
        btnPCal = new javax.swing.JButton();
        btnProgCalif = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setTitle("Crear nuevo grupo");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Datos del nuevo grupo:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Periodo de vigencia:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel9.setText("*Formato de fechas es dd-mm-aaaa");

        jLabel2.setText("Clave:");

        jLabel5.setText("Materia:");

        txtClave.setEditable(false);

        jLabel3.setText("Grado: ");

        jLabel4.setText("Grupo: ");

        jLabel8.setText("*Fin:");

        jLabel10.setText("Aula:");

        jcbMaterias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMateriasItemStateChanged(evt);
            }
        });

        jLabel7.setText("*Inicio");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAul, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFIni, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFFin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtFFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnNuevo.setText("Nuevo");
        btnNuevo.setToolTipText("Limpiar los campos");
        btnNuevo.setEnabled(false);
        btnNuevo.setFocusable(false);
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNuevo);

        btnCrear.setText("Crear");
        btnCrear.setToolTipText("Guardar nuevo registro de grupo");
        btnCrear.setFocusable(false);
        btnCrear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCrear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCrear);

        btnVFich.setText("Ver ficha");
        btnVFich.setToolTipText("Ver ficha de grupo");
        btnVFich.setEnabled(false);
        btnVFich.setFocusable(false);
        btnVFich.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVFich.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVFich.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVFichActionPerformed(evt);
            }
        });
        jToolBar1.add(btnVFich);

        btnPCal.setText("Preparar calendario");
        btnPCal.setToolTipText("Preparar calendario de sesiones");
        btnPCal.setEnabled(false);
        btnPCal.setFocusable(false);
        btnPCal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPCal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPCal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCalActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPCal);

        btnProgCalif.setText("Programar calificaciones");
        btnProgCalif.setToolTipText("Programacion de rubros de evaluacion");
        btnProgCalif.setEnabled(false);
        btnProgCalif.setFocusable(false);
        btnProgCalif.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProgCalif.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProgCalif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgCalifActionPerformed(evt);
            }
        });
        jToolBar1.add(btnProgCalif);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Llama al metodo guardaCambios
     * @param evt El ActionEvent que genero el evento
     */
    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        guardaCambios();
    }//GEN-LAST:event_btnCrearActionPerformed

    /** Crea el nuevo registro de grupo
     * @return true si el registro se creo correctamente. 
     *   false si no se pudo crear el registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        java.util.ArrayList<String> trans=formaSentenciaAlta();
        String[] datos=new String[5];
        if(trans!=null){ 
            if(!database.Actualiza.transaccion(trans,true,true)){
                muestraMensaje("Acción fallida", database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                txtClave.setText(clave);
                muestraMensaje("Acción realizada", "Se ha creado el registro",TipoMensaje.INFORMACION);
                datos[0]="10"; datos[1]="Calificacion final";
                datos[2]=clave; datos[3]=null;
                datos[4]=operaciones.Datos.transformatFcha(txtFFin.getText().trim());
                database.Actualiza.newRgRubCalif(datos,false);
                btnCrear.setEnabled(false); btnVFich.setEnabled(true);
                btnPCal.setEnabled(true); btnNuevo.setEnabled(true);
                btnProgCalif.setEnabled(true);
                setCambios(false);
                return true;
            }
        }
        return false;
    }

    /** Limpia los controles y reinicializa los valores  necesarios para 
     * ofrecer la opciond e crear un nuevo registro de grupo
     * @param evt El ActionEvent que genero el evento
     */
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        txtClave.setText("");
        txtGrd.setText("");
        txtGrp.setText("");
        jcbMaterias.setSelectedIndex(-1);
        txtFIni.setText("");
        txtFFin.setText("");
        txtAul.setText("");
        btnCrear.setEnabled(true);
        btnVFich.setEnabled(false);
        btnPCal.setEnabled(false);
        btnNuevo.setEnabled(false);
        btnProgCalif.setEnabled(false);
        setCambios(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    /** Abre la ventana con la ficha del grupo actual (una vez registrado)
     * @param evt El ActionEvent que genero el evento
     */
    private void btnVFichActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVFichActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,1);
    }//GEN-LAST:event_btnVFichActionPerformed

    /** Abre la ventana con el calendario del grupo actual (una vez registrado)
     * @param evt El ActionEvent que genero el evento
     */
    private void btnPCalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCalActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,2);
    }//GEN-LAST:event_btnPCalActionPerformed

    /** Indica qua hay cambios sin guardar al cambiar el elemento seleccionado 
     *   en el control jcbMaterias
     * @param evt El ItemEvent del evento que genero el evento
     */
    private void jcbMateriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMateriasItemStateChanged
        setCambios(true);
    }//GEN-LAST:event_jcbMateriasItemStateChanged

    /** Abre la ventana con la ventana de rucros de evaluacion del grupo actual (una vez registrado)
     * @param evt El ActionEvent que genero el evento
     */
    private void btnProgCalifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgCalifActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,3);
    }//GEN-LAST:event_btnProgCalifActionPerformed
    
    /** Valida y forma la sentencia sql para dar de alta el regsitro del grupo
     * @return la sentencia sql para dar de alta el regsitro del grupo o null 
     *   si encontro al menos un dato invalido
     */
    private java.util.ArrayList<String> formaSentenciaAlta(){
        String[] meses={"ENE","FEB","MAR","ABR","MAY","JUN","JUL","AGO","SEP","OCT","NOV","DIC"};
        String[] dts = new String[5];
        dts[0]=txtGrd.getText().trim();
        dts[1]=txtGrp.getText().trim();
        dts[2]=txtFIni.getText().trim();
        dts[3]=txtFFin.getText().trim();
        dts[4]=txtAul.getText().trim();   
        java.util.ArrayList<String> sentencias = new java.util.ArrayList<String>();
        String auxs;
        int aux=0;
        boolean bandera=false;
        // validar el grado que sea un numero entero del rango 1-255
        try{ aux=Integer.parseInt(dts[0]); }
        catch(NumberFormatException nbfExc){ bandera=true; }
        if(bandera || aux<1||aux>99){
            muestraMensaje("Error en los datos", "Grado invalido",TipoMensaje.ERROR);
            return null;
        }
        // validar el grupo que no sea cadena vacia ni tenga mas de 1 caracter
        if(dts[1].length()!=1){
            muestraMensaje("Error en los datos", "Grupo invalido",TipoMensaje.ERROR);
            return null;
        }
        // validar que hay materia seleccionada
        if(jcbMaterias.getSelectedIndex()<0){
            muestraMensaje("Error en los datos", "Materia invalida",TipoMensaje.ERROR);
            return null;
        }
        // validar inicio de vigencia que tenga un formato de fecha valido
        if(!operaciones.Datos.valFecha(dts[2])){
            muestraMensaje("Error en los datos", "Inicio de vigencia invalido",TipoMensaje.ERROR);
            return null;
        }
        // validar fin de vigencia que tenga un formato de fecha valido
        if(!operaciones.Datos.valFecha(dts[3])){
            muestraMensaje("Error en los datos", "Fin de vigencia invalido",TipoMensaje.ERROR);
            return null;
        }
        // validar fin de vigencia que sea posterior a inicio de vigencias
        if(operaciones.Datos.compareFecha(dts[2],dts[3])>=0){
            muestraMensaje("Error en los datos", "Fecha de fin de vigencia debe ser posterior a fecha de inicio",TipoMensaje.ERROR);
            return null;
        }
        // validar aula que no tenga mas de 20 caracteres
        if(dts[4].length()>20){
            muestraMensaje("Error en los datos", "Aula invalida",TipoMensaje.ERROR);
            return null;
        }
        clave=dts[0]+dts[1]+"+"+clvsMats[jcbMaterias.getSelectedIndex()]+"+";
        clave+=meses[operaciones.Datos.obtenMesDeFecha(dts[2])-1]+dts[2].substring(8);
        clave+="-"+meses[operaciones.Datos.obtenMesDeFecha(dts[3])-1]+dts[3].substring(8);
        auxs="insert into grupos values('"+clave+"',"+dts[0]+",'"+dts[1]+"','";
        auxs+=operaciones.Datos.transformatFcha(dts[2])+"','"+operaciones.Datos.transformatFcha(dts[3]);
        sentencias.add(auxs+"',"+(dts[4].equals("")?"null":"'"+dts[4]+"'")+");");
        auxs="insert into Imparte values('"+clvsMats[jcbMaterias.getSelectedIndex()]+"','"+clave+"',0);";
        sentencias.add(auxs);
        return sentencias;
    }
  
    /** Crea un objeto que implementa el DocumentListener y lo agrega a los controles de texto
     * para detectar si un campo es editado y por lo tanto saber si hay cambios sin guardar.
     */
    private void escuchaCambios(){
        listenCh= new ListenChanges();
        txtGrd.getDocument().addDocumentListener(listenCh);
        txtGrp.getDocument().addDocumentListener(listenCh);
        txtAul.getDocument().addDocumentListener(listenCh);
        txtFIni.getDocument().addDocumentListener(listenCh);
        txtFFin.getDocument().addDocumentListener(listenCh);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPCal;
    private javax.swing.JButton btnProgCalif;
    private javax.swing.JButton btnVFich;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jcbMaterias;
    private javax.swing.JTextField txtAul;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtFFin;
    private javax.swing.JTextField txtFIni;
    private javax.swing.JTextField txtGrd;
    private javax.swing.JTextField txtGrp;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrameAltas que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrameAltas que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}
