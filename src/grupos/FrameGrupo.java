/*
 * FrameGrupo.java
 *  Ventana para mostrar datos de un grupo (ficha de grupo)
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package grupos;

import database.Actualiza;
import database.Consultas;
import reportes.ImpListaAl;
import definiciones.TipoMensaje;
import definiciones.TipoRespuesta;
import iconos.Iconos;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import operaciones.Datos;
import operaciones.Tiempo;

/**  Es una ventana interna (JInternalFrame) para manejar los datos de un grupo:
 *   datos generales del grupo, lista de asistencias y calificaciones de alumnos
 * 
 * @author Pedro Cardoso Rodr√≠guez
 */
public class FrameGrupo extends sistema.ModeloFrameInterno implements java.awt.event.ActionListener {
    
    /**Clave del grupo actual*/
    private String clave;
    /**Claves de las materias que imparte el docente registradas en la bd*/
    private String[] clvsMats;
    /**Guarda el resultado de la consulta de las asistencias de los alumnos del grupo*/
    private DefaultTableModel modeloAsis;
    /**Guarda el resultado de la consulta de las calificaciones de los alumnos del grupo*/
    private DefaultTableModel modeloCalif;
    /**Popupmenu para desplegar sobre la matricula de los alumos del grupo*/
    private javax.swing.JPopupMenu pmnuMat;
    /**Popupmenu para desplegar sobre las asistencias de los alumos del grupo*/
    private javax.swing.JPopupMenu pmnuAsis;
    /**Popupmenu para desplegar sobre las calificaciones de los alumos del grupo*/
    private javax.swing.JPopupMenu pmnuCalif;
    /**Indica si hay cambios sin guardar en los datos generales del grupo*/
    private boolean cambiosDts;
    /**Indica si hay cambios sin guardar en las asistencias de los alumnos*/
    private boolean cambiosAsis;
    /**Indica si hay cambios sin guardar en las calificaciones de los alumnos*/
    private boolean cambiosCalif;
    
    /** Crea una nueva ventana FrameGrupo
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameGrupo(sistema.FramePrincipal ventana){
        super(ventana,"frmgru.png");
        initComponents();
        clave=null;
        btnCarga.setIcon(Iconos.getIcono("cargar.png"));
        btnProgSes.setIcon(Iconos.getIcono("frmcal.png"));   
        btnProgSes.setText("");
        btnProgCalif.setIcon(Iconos.getIcono("frmcalif.png"));
        btnProgCalif.setText("");
        btnImprimir.setIcon(Iconos.getIcono("impresora.png"));
        btnImprimir.setText("");
        btnGuarda.setIcon(Iconos.getIcono("guardar.png"));   
        btnGuarda.setText(""); 
        btnElim.setIcon(Iconos.getIcono("elimina.png"));   
        btnElim.setText("");       
        btnAgrega.setIcon(Iconos.getIcono("nuevo.png"));   
        btnQuitar.setIcon(Iconos.getIcono("elimina.png"));   
        btnGuardaAsis.setIcon(Iconos.getIcono("frmaltas.png"));
        btnGuardaCalifs.setIcon(Iconos.getIcono("frmaltas.png"));
        setCambios(false,false,false); escuchaCambios();
        crearPopMenu(); validate();
    }
   
    /** Consulta en la base de datos la lista de materias impartidas por el docente
     *  y la carga en el control: jcbMaterias
     */
    private void listaMaterias(){
        String[] materias;
        materias=Consultas.consultaLista("select clvm,nombre from materias order by nombre;",false);
        if(materias==null){
            muestraMensaje("Error al consultar lista de materias",Consultas.obtenError(),TipoMensaje.ERROR);
            clvsMats=null;
        }
        else{
            clvsMats=new String[materias.length];
            for(int g=0;g<materias.length;g++){
                clvsMats[g]=materias[g].substring(0,3);
                jcbMaterias.addItem(materias[g].substring(4));
            }
            jcbMaterias.setSelectedIndex(-1);
        } 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbtnGrpVerListas = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        btnProgSes = new javax.swing.JButton();
        btnProgCalif = new javax.swing.JButton();
        btnGuarda = new javax.swing.JButton();
        btnElim = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtClv = new javax.swing.JTextField();
        btnCarga = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtPIni = new javax.swing.JTextField();
        jtbTabb = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblNumAlums = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbAsistencias = new javax.swing.JTable();
        btnGuardaAsis = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        btnAgrega = new javax.swing.JButton();
        lblNumSes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        lblNumAlums1 = new javax.swing.JLabel();
        lblNumCalifs = new javax.swing.JLabel();
        btnGuardaCalifs = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtbCalifs = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtGrd = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtGrp = new javax.swing.JTextField();
        txtPFin = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtAul = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jcbMaterias = new javax.swing.JComboBox();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ficha de grupo");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnProgSes.setText("pses");
        btnProgSes.setToolTipText("Calendario de sesiones");
        btnProgSes.setEnabled(false);
        btnProgSes.setFocusable(false);
        btnProgSes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProgSes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProgSes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgSesActionPerformed(evt);
            }
        });
        jToolBar1.add(btnProgSes);

        btnProgCalif.setText("pcal");
        btnProgCalif.setToolTipText("Programacion de rubros de evaluacion");
        btnProgCalif.setEnabled(false);
        btnProgCalif.setFocusable(false);
        btnProgCalif.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProgCalif.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProgCalif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgCalifActionPerformed(evt);
            }
        });
        jToolBar1.add(btnProgCalif);

        btnGuarda.setText("g");
        btnGuarda.setToolTipText("Guardar cambios");
        btnGuarda.setEnabled(false);
        btnGuarda.setFocusable(false);
        btnGuarda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuarda.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGuarda);

        btnElim.setText("el");
        btnElim.setToolTipText("Eliminar grupo actual");
        btnElim.setEnabled(false);
        btnElim.setFocusable(false);
        btnElim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnElim.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnElim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimActionPerformed(evt);
            }
        });
        jToolBar1.add(btnElim);

        btnImprimir.setText("imp");
        btnImprimir.setToolTipText("Imprimir un reporte");
        btnImprimir.setEnabled(false);
        btnImprimir.setFocusable(false);
        btnImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImprimir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnImprimir);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Buscar Clave:");

        btnCarga.setMnemonic('C');
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(311, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCarga)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnCarga)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3))
        );

        jToolBar1.add(jPanel2);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jLabel5.setText("Vigencia   Inicio:");

        jtbTabb.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        lblNumAlums.setText("Alumnos del grupo:");

        jtbAsistencias.setAutoCreateRowSorter(true);
        jtbAsistencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricula", "Alumno", "Fecha sesion 1", "Fecha sesion 2", "Fecha sesion N"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbAsistencias.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtbAsistencias.setEnabled(false);
        jtbAsistencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbAsistenciasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtbAsistenciasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtbAsistenciasMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtbAsistencias);
        jtbAsistencias.getColumnModel().getColumn(1).setPreferredWidth(145);

        btnGuardaAsis.setMnemonic('R');
        btnGuardaAsis.setText("Guardar Asistencia");
        btnGuardaAsis.setToolTipText("");
        btnGuardaAsis.setEnabled(false);
        btnGuardaAsis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaAsisActionPerformed(evt);
            }
        });

        btnQuitar.setMnemonic('Q');
        btnQuitar.setText("Quitar alumno");
        btnQuitar.setToolTipText("Quitar un alumno");
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnAgrega.setMnemonic('G');
        btnAgrega.setText("Agregar alumno");
        btnAgrega.setToolTipText("Agregar un alumno");
        btnAgrega.setEnabled(false);
        btnAgrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaActionPerformed(evt);
            }
        });

        lblNumSes.setText("Sesiones programas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumSes)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNumAlums)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                        .addComponent(btnAgrega)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardaAsis)))
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumAlums)
                    .addComponent(btnAgrega)
                    .addComponent(btnQuitar)
                    .addComponent(btnGuardaAsis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNumSes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        jtbTabb.addTab("Lista de asistencias", jScrollPane3);

        lblNumAlums1.setText("Alumnos del grupo:");

        lblNumCalifs.setText("Sesiones programas");

        btnGuardaCalifs.setText("Guardar calificaciones");
        btnGuardaCalifs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaCalifsActionPerformed(evt);
            }
        });

        jtbCalifs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricula", "Alumno", "Rubro 1", "Rubro 2", "Rubro N"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbCalifs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtbCalifs.setEnabled(false);
        jtbCalifs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbCalifsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtbCalifsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtbCalifsMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jtbCalifs);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblNumAlums1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 457, Short.MAX_VALUE)
                        .addComponent(btnGuardaCalifs))
                    .addComponent(lblNumCalifs))
                .addContainerGap())
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumAlums1)
                    .addComponent(btnGuardaCalifs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNumCalifs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel4);

        jtbTabb.addTab("Lista de calificaciones", jScrollPane1);

        jLabel6.setText("  Fin:");

        jLabel9.setText("Clave");

        jLabel7.setText("Materia:");

        txtClave.setEditable(false);

        jLabel1.setText("Grado:");

        jLabel2.setText("Grupo:");

        jLabel8.setText("Aula:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Datos del grupo:");

        jcbMaterias.setEnabled(false);
        jcbMaterias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMateriasItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addContainerGap(75, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAul, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPIni, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPFin, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(72, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtbTabb, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtGrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtAul, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtPIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jcbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtPFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtbTabb, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Valida la clave ingresada en el control txtClv y busca en la base de datos un grupo con esa clave
     * @param evt El ActionEvent que genero el evento
     */
    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed
        String tmpClv=txtClv.getText().trim().toUpperCase();
        if(tmpClv.equals("")) {
            muestraMensaje("Error en el par√°metro", "Clave invalida",TipoMensaje.ERROR);
            return;
        }
        if(getTitle().equals("Ficha de grupo "+tmpClv)){
            actualiza();
        }
        else if(existeVentana("Ficha de grupo "+tmpClv,true)){ 
            txtClv.setText(tmpClv);
            return;
        }        
        else cargaDatosGrupo(tmpClv);
    }//GEN-LAST:event_btnCargaActionPerformed

    /** Llama al metodo para guardar los datos genrales del grupo y muestra un 
     *   mensaje al usurio si los datos se guardan correctamente 
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        if(guardaDatos()){
            muestraMensaje("Acci√≥n realizada","Se han guardado los datos",TipoMensaje.INFORMACION);
        }
    }//GEN-LAST:event_btnGuardaActionPerformed

    /** Valida y guarda los datos generales del grupo: grado, grupo, aula, fechas de vigencia y materia
     * @return true si los datos se guardaron correctamente, false en caso de error en al 
     *   menos un dato o fallar al guardar en la base de datos
     */
    private boolean guardaDatos(){
        String[] meses={"ENE","FEB","MAR","ABR","MAY","JUN","JUL","AGO","SEP","OCT","NOV","DIC"};
        java.util.ArrayList<String> trans = new java.util.ArrayList<String>();
        String clvtmp;
        String[] dts=obtenDatosGrlesValidos();
        if(dts==null){
            return false;
        }
        clvtmp=dts[0]+dts[1]+"+"+clvsMats[jcbMaterias.getSelectedIndex()]+"+";
        clvtmp+=meses[Datos.obtenMesDeFecha(dts[2])-1]+dts[2].substring(8);
        clvtmp+="-"+meses[Datos.obtenMesDeFecha(dts[3])-1]+dts[3].substring(8);
        if(clvtmp.equals(clave)){
            clvtmp="update grupos set perini='"+Datos.transformatFcha(dts[2])+"', perfin='";
            clvtmp+=Datos.transformatFcha(dts[3])+"', aula="+(dts[4].equals("")?"null":"'"+dts[4]+"'")+" where clvg='"+clave+"';";
            if(!database.Actualiza.actualiza(clvtmp,true,true)){
                muestraMensaje("No se pudieron guardar los datos",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                setCambios(false,cambiosAsis,cambiosCalif);
                return true;
            }
        }
        else{
            trans.add("update pertenece set clvg='"+clvtmp+"' where clvg='"+clave+"';");
            trans.add("update progses set clvg='"+clvtmp+"' where clvg='"+clave+"';");
            trans.add("update calificacon set clvg='"+clvtmp+"' where clvg='"+clave+"';");
            trans.add("update imparte set clvg='"+clvtmp+"', clvm='"+clvsMats[jcbMaterias.getSelectedIndex()]+"' where clvg='"+clave+"';");
            trans.add("update grupos set clvg='"+clvtmp+"', grado="+dts[0]+", grupo='"+dts[1]+"', " +
                    "perini='"+Datos.transformatFcha(dts[2])+"', " +
                    "perfin='"+Datos.transformatFcha(dts[3])+"', " +
                    "aula="+(dts[4].equals("")?"null":"'"+dts[4]+"'")+" where clvg='"+clave+"';");
            if(!database.Actualiza.transaccion(trans,true,true)){
                muestraMensaje("No se pudieron guardar los datos",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else{
                setTitle("Ficha de grupo "+clvtmp);
                clave=clvtmp;
                txtClave.setText(clave);
                setCambios(false,cambiosAsis,cambiosCalif);
                return true;
            }
        }
    }
  
    /** Valida y obtiene los datos generales del grupo
     * @return los datos generales del grupo en orden: grado, grupo, fecha inicial, fecha final, aula
     */
    private String[] obtenDatosGrlesValidos(){
        String[] dts = new String[5];
        dts[0]=txtGrd.getText().trim();
        dts[1]=txtGrp.getText().trim();
        dts[2]=txtPIni.getText().trim();
        dts[3]=txtPFin.getText().trim();
        dts[4]=txtAul.getText().trim();
        int aux=0;
        boolean bandera=false;
        // validar el grado que sea un numero entero del rango 1-99
        try{ aux=Integer.parseInt(dts[0]); }
        catch(NumberFormatException nbfExc){ bandera=true; }
        if(bandera || aux<1||aux>99){
            muestraMensaje("Error en los datos", "Grado invalido",TipoMensaje.ERROR); 
            return null;
        }
        // validar el grupo que no sea cadena vacia ni tenga mas de 4 caracteres
        if(dts[1].length()!=1){
            muestraMensaje("Error en los datos", "Grupo invalido",TipoMensaje.ERROR); 
            return null;
        }
        // validar inicio de vigencia que tenga un formato de fecha valido
        if(!Datos.valFecha(dts[2])){
            muestraMensaje("Error en los datos", "Inicio de vigencia invalido",TipoMensaje.ERROR); 
            return null;
        }
        // validar fin de vigencia que tenga un formato de fecha valido
        if(!Datos.valFecha(dts[3])){
            muestraMensaje("Error en los datos", "Fin de vigencia invalido",TipoMensaje.ERROR); 
            return null;
        }
        // validar aula que no tenga mas de 20 caracteres
        if(dts[4].length()>20){
            muestraMensaje("Error en los datos", "Aula invalida",TipoMensaje.ERROR); 
            return null;
        }
        return dts;
    }
  
    /** Abre la ventana con el calendario del grupo actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnProgSesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgSesActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,2);
    }//GEN-LAST:event_btnProgSesActionPerformed

    /** Pide la matricula de un alumno y trata de agregarlo al grupo actual
     *   muestra un mensaje para indicar si el alumno se pudo agregar o fallo 
     *   si no existe el registro del alumno u ocurrio algun error al procesar en la bd
     * @param evt El ActionEvent que genero el evento
     */
    private void btnAgregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaActionPerformed
        String matr=pideString("Agregar alumnos","Ingrese la matricula del alumno a agregar");
        if(matr==null) return;
        if(!Datos.valMatricula(matr)){ 
            muestraMensaje("Error!","Matricula invalida",TipoMensaje.ERROR); 
            return; 
        }
        if(!database.Actualiza.agregaAluGrupo(matr,clave,true))
            muestraMensaje("No se pudo realizar la acci√≥n", database.Actualiza.obtenError(),TipoMensaje.ERROR);
        else{
            muestraMensaje("Se ha realizado la acci√≥n", "Se agrego el alumno al grupo",TipoMensaje.INFORMACION);
            cargaDatosGrupo(clave);
        }
    }//GEN-LAST:event_btnAgregaActionPerformed

    /** Pide la matricula de un alumno y la envia al metodo para quitar al alumno del grupo
     * @param evt El ActionEvent que genero el evento
     */
    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        String matr=pideString("Quitar alumnos","Ingrese la matricula del alumno a quitar del grupo");
        if(matr==null) return;
        if(!Datos.valMatricula(matr)){ 
            muestraMensaje("Error!","Matricula invalida",TipoMensaje.ERROR); 
            return; 
        }
        quitaAlumno(matr);
    }//GEN-LAST:event_btnQuitarActionPerformed

    /** Reciba una matricula de un alumno y verifica si pertenece al grupo actual 
     *   en cuyo caso lo quita del grupo borrando su relacion en la bse de datos
     * @param matricula La matricula del alumno a quitar del grupo
     */
    private void quitaAlumno(String matricula){        
        TipoRespuesta aux;
        DefaultTableModel modelo = (DefaultTableModel)jtbAsistencias.getModel();
        for(int k=0;k<modelo.getRowCount();k++){
            if(matricula.equals(""+modelo.getValueAt(k,0))){
                aux=pideDesicion("Confirme accion","¬øEn verdad desea quitar el alumno del grupo?");
                if(aux.getTipo()==TipoRespuesta.ACEPTAR.getTipo()){
                    if(!database.Actualiza.actualiza("delete from Pertenece where matricula='"+matricula+"' and clvg='"+clave+"'",false,true))
                        muestraMensaje("No se pudo realizar la acci√≥n", database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    else{
                        muestraMensaje("Se ha realizado la acci√≥n", "Se quito el alumno del grupo",TipoMensaje.INFORMACION);
                        cargaDatosGrupo(clave);
                    }                    
                }
                break;
            }
        }
    }
   
    /** Elimina el registro del grupo actual y sus registro relacionados tales como 
     *  sesiones programadas, rubros de evaluacion programados, calificaciones obtenidas
     *  y asistencias de los alumnos
     * @param evt El ActionEvent que genero el evento
     */
    private void btnElimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimActionPerformed
        TipoRespuesta aux=pideDesicion("Confirme accion","¬øEn verdad desea eliminar este grupo?");
        java.util.ArrayList<String> trans = new java.util.ArrayList<String>();
        String[] clvsess;
        String[] clvrubs;
        if(aux.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()) return;
        clvsess=Consultas.consultaLista("select clvses from progses where clvg='"+clave+"'",false);
        clvrubs=Consultas.consultaLista("select clvru from calificacon where clvg='"+clave+"'",false);
        if(clvsess==null||clvrubs==null){
            muestraMensaje("No se pudo realizar la acci√≥n", Consultas.obtenError(),TipoMensaje.ERROR);
            return;
        }
        if(clvsess[0]!=null)
            for(int h=0;h<clvsess.length;h++)
                trans.add("delete from Sesiones where clvses="+clvsess[h]);
        if(clvrubs[0]!=null)
            for(int h=0;h<clvrubs.length;h++)
                trans.add("delete from RubrosCalif where clvru="+clvrubs[h]);
        trans.add("delete from Grupos where clvg='"+clave+"'");
        if(!database.Actualiza.transaccion(trans,false,true))
            muestraMensaje("No se pudo realizar la acci√≥n", database.Actualiza.obtenError(),TipoMensaje.ERROR);
        else{
            muestraMensaje("Se ha realizado la acci√≥n", "Se elimino completamente el grupo",TipoMensaje.INFORMACION);
            cerrarVentana(getTitle());
            dispose();
        }
    }//GEN-LAST:event_btnElimActionPerformed

    /** Llama al evento que guarda las asistencias registradas para los alumnos del grupo
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaAsisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaAsisActionPerformed
        if(guardaAsistencias()){
            muestraMensaje("Se ha realizado la acci√≥n", "Se guardaron las asistencias",TipoMensaje.INFORMACION);
        }
}//GEN-LAST:event_btnGuardaAsisActionPerformed

    /** Guarda las asistencias registradas para los alumnos del grupo
     * @return true si pudo guardar las asistencias correctamente, false en caso contrario
     */
    private boolean guardaAsistencias(){
        java.util.ArrayList<String> trans=new java.util.ArrayList<String>();
        String sen="";
        String asis;
        for(int d=0;d<jtbAsistencias.getRowCount();d++)
            for(int g=0;g<jtbAsistencias.getColumnCount();g++){
                sen=jtbAsistencias.getColumnName(g);
                if(!sen.equals("Matricula")&&!sen.equals("Alumno")){
                    String mat;
                    int aux=0;
                    do{ mat=""+jtbAsistencias.getValueAt(d,aux++); }
                    while(!Datos.valMatricula(mat));
                    String[] clvs=getClavesAsis(mat,sen);
                    asis=(""+jtbAsistencias.getValueAt(d,g)).trim();
                    sen="update Asistencias set valor='"+(asis.length()<1?"_":asis)+"'";
                    sen+=" where clvper="+clvs[0]+" and clvses="+clvs[1]+";";
                    trans.add(sen);
                }
            }            
        if(!Actualiza.transaccion(trans,true,true)){
            muestraMensaje("No se pudo realizar la acci√≥n",Actualiza.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else{
            setCambios(cambiosDts,false,cambiosCalif);
            return true;
        }
    }
    
    /** Obtiene las claves de la tabla Asistencias para un alumno y una sesion del grupo actual
     * @param matr La matricula del alumno a obtener las claves
     * @param fchayh Fecha y hora de la sesion de la cual se quiere obtener las claves
     * @return un vector de String con los datos clvper y clvses respectivos de la 
     *   tabla Asistencias en la base de datos para el alumno y la sesion indicadas en los parametros
     */
    private String[] getClavesAsis(String matr, String fchayh){
        String[] claves=new String[2];
        for(int u=0;u<modeloAsis.getRowCount();u++){
            if(matr.equals(""+modeloAsis.getValueAt(u,0))&&fchayh.equals(""+modeloAsis.getValueAt(u,3))){
                claves[0]=""+modeloAsis.getValueAt(u,1);
                claves[1]=""+modeloAsis.getValueAt(u,2);
            }
        }
        return claves;
    }
    
    /** Obtiene las claves de la tabla Realiza para un alumno y una sesion del grupo actual
     * @param matr La matricula del alumno a obtener las claves
     * @param descrip La descripcion del rubro de evaluacion del cual se quiere obtener las claves
     * @return un vector String con datos clvper y clvru respectivos de la tabla Realiza en 
     *   la base de datos para el alumno y el rubro de evaluacion indicados en los parametros
     */
    private String[] getClavesRub(String matr, String descrip){
        String[] claves=new String[2];
        for(int u=0;u<modeloCalif.getRowCount();u++){
            if(matr.equals(""+modeloCalif.getValueAt(u,0))&&descrip.equals(""+modeloCalif.getValueAt(u,3))){
                claves[0]=""+modeloCalif.getValueAt(u,1);
                claves[1]=""+modeloCalif.getValueAt(u,2);
            }
        }
        return claves;
    }
 
    /** Llama al metodo que muestra el popupmenu para la tabla de asistencias
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAsistenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAsistenciasMouseClicked
        llamaMenu(true,evt);
}//GEN-LAST:event_jtbAsistenciasMouseClicked

    /** Llama al metodo que muestra el popupmenu para la tabla de asistencias
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAsistenciasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAsistenciasMouseReleased
        llamaMenu(true,evt);
}//GEN-LAST:event_jtbAsistenciasMouseReleased

    /** Llama al metodo que muestra el popupmenu para la tabla de asistencias
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbAsistenciasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbAsistenciasMousePressed
        llamaMenu(true,evt);
}//GEN-LAST:event_jtbAsistenciasMousePressed
  
    /** Llama al metodo setCambios para indicarle que hay cambios sin guardar en los datos 
     *   generales del grupo al cambiar el elemento seleccionado en el control jcbMaterias
     * @param evt El ItemEvent qeu genero el evento
     */
    private void jcbMateriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMateriasItemStateChanged
        setCambios(true,cambiosAsis,cambiosCalif);
    }//GEN-LAST:event_jcbMateriasItemStateChanged

    /** Abre la ventana con la plenacion de rubros de evaluacion del grupo actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnProgCalifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgCalifActionPerformed
        getPrincipalVnt().agregaVentanaGrupo(clave,3);
}//GEN-LAST:event_btnProgCalifActionPerformed

    /** Genera un reporte: lista de alumnos, calificaciones (de un rubro) o porcentaje de asistencias 
     *   con los datos del grupo actual y abre un dialogo para enviarlo a la impresora
     * @param evt El ActionEvent que genero el evento
     */
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        String opc;
        String rub;
        Map<String,String> params;
        ArrayList campos;
        int colcalif=-1;
        int tpDoc=1;
        String rubro=null;
        String credito=null;
        String grupo=txtClave.getText().substring(0,2)+" "+txtClave.getText().substring(7);
        String titulo="Lista de alumnos "+grupo;
        DefaultTableModel modelo=(DefaultTableModel)jtbAsistencias.getModel();
        String[] opcs={"Lista de alumnos","Calificaciones de un rubro","Porcentaje de asistencias"};
        if(hayCambios()){
            muestraMensaje("No se puede imprimir","Debe guardar los cambios hechos para poder imprimir",TipoMensaje.INFORMACION);
            return;
        }
        opc=(String)JOptionPane.showInputDialog(getPrincipalVnt(),"Seleccione el tipo de reporte","Imprimir un reporte",JOptionPane.QUESTION_MESSAGE,null,opcs,opcs[0]);
        if(opc==null) return;
        if(jtbAsistencias.getRowCount()<1){
            muestraMensaje("No se puede imprimir","No hay alumnos en el grupo",TipoMensaje.INFORMACION);
            return;
        }
        if(opc.equals("Calificaciones de un rubro")){
            jtbTabb.setSelectedIndex(1);
            modelo=(DefaultTableModel)jtbCalifs.getModel();
            if(modelo.getColumnCount()<3){
                muestraMensaje("No se puede imprimir","No hay rubros de calificaci√≥n para este grupo",TipoMensaje.INFORMACION);
                return;
            }
            opcs=new String[modelo.getColumnCount()-2];
            for(int y=0;y<opcs.length;y++)
                opcs[y]=modelo.getColumnName(y+2);
            rub=(String)JOptionPane.showInputDialog(getPrincipalVnt(),"Seleccione el rubro","Imprimir un reporte",JOptionPane.QUESTION_MESSAGE,null,opcs,opcs[0]);
            if(rub==null) return;
            for(int y=0;y<opcs.length;y++)
                if(rub.equals(opcs[y])){ colcalif=y+2; break; }
            rubro="Calificaciones de "+rub;
            credito="Calificacion"; tpDoc=2;
            titulo="<html>Lista de Calificaciones "+grupo+"<br>("+rubro+")</html>";
        }
        else if(opc.equals("Porcentaje de asistencias")){
            jtbTabb.setSelectedIndex(0);
            if(jtbAsistencias.getColumnCount()<3){
                muestraMensaje("No se puede imprimir","No hay sesiones programadas para este grupo",TipoMensaje.INFORMACION);
                return;
            }
            rubro="Porcentaje de asistencias hasta "+Tiempo.getFechaFormatoNums();
            credito="Porcentaje"; tpDoc=2; colcalif=-2;
            titulo="Porcentaje asistencias "+grupo;
        }
        params=getParametrosImp(rubro,credito,grupo);
        campos=getCamposImp(modelo,colcalif);
        if(params==null||campos==null) return;
        enviarImpresion(titulo,tpDoc,params,campos);
    }//GEN-LAST:event_btnImprimirActionPerformed

    /** Llama al metodo que guarda las calificaciones registradas para el grupo actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaCalifsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaCalifsActionPerformed
        if(guardaCalificaciones()){
            muestraMensaje("Se ha realizado la acci√≥n", "Se guardaron las calificaciones",TipoMensaje.INFORMACION);
        }
    }//GEN-LAST:event_btnGuardaCalifsActionPerformed

    /** Guarda las calificaciones registradas para el grupo actual
     * @return true si se guardaron correctamente las calificaciones, false en caso contrario
     */
    private boolean guardaCalificaciones(){
        java.util.ArrayList<String> trans=new java.util.ArrayList<String>();
        String sen="";
        String calif;
        for(int d=0;d<jtbCalifs.getRowCount();d++)
            for(int g=0;g<jtbCalifs.getColumnCount();g++){
                sen=jtbCalifs.getColumnName(g);
                if(!sen.equals("Matricula")&&!sen.equals("Alumno")){
                    String mat;
                    int aux=0;
                    do{ mat=""+jtbCalifs.getValueAt(d,aux++); }
                    while(!Datos.valMatricula(mat));
                    String[] clvs=getClavesRub(mat,sen);
                    calif=""+jtbCalifs.getValueAt(d,g);
                    calif=(calif.equals("NP")?"0.0":calif);
                    sen="update Realiza set Calif="+calif;
                    sen+=" where clvper="+clvs[0]+" and clvru="+clvs[1]+";";
                    trans.add(sen);
                }
            }            
        if(!Actualiza.transaccion(trans,true,true)){
            muestraMensaje("No se pudo realizar la acci√≥n",Actualiza.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else{
            setCambios(cambiosDts,cambiosAsis,false);
            return true;
        }
    }
    
    /** Llama al metodo que muestra el popupmenu para la tabla de calificaciones
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbCalifsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbCalifsMouseClicked
        llamaMenu(false,evt);
    }//GEN-LAST:event_jtbCalifsMouseClicked

    /** Llama al metodo que muestra el popupmenu para la tabla de calificaciones
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbCalifsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbCalifsMousePressed
        llamaMenu(false,evt);
    }//GEN-LAST:event_jtbCalifsMousePressed

    /** Llama al metodo que muestra el popupmenu para la tabla de calificaciones
     * @param evt El MouseEvent que genero el evento
     */
    private void jtbCalifsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbCalifsMouseReleased
        llamaMenu(false,evt);
    }//GEN-LAST:event_jtbCalifsMouseReleased
 
    /** Valida si el click fue hecho en una area valida de las tablas de asistencias 
     *   o calificaciones y envia al metodo que abre el popupmenu respectivo
     * @param asis Indica si el click fue hecho en la tabla de asistencias, 
     *   caso contrario fue hecho en la tabla de calificaciones
     * @param evt El evento generado por el click hecho en alguna de las tabla (asistencias, calificaciones)
     */
    private void llamaMenu(boolean asis,java.awt.event.MouseEvent evt){
        javax.swing.JTable tabla=(asis?jtbAsistencias:jtbCalifs);
        int col=tabla.columnAtPoint(evt.getPoint());
        int fila=tabla.rowAtPoint(evt.getPoint());
        String colnom=tabla.getColumnName(col);
        if (fila>-1 && col>-1 && !colnom.equals("Alumno")&&!colnom.equals("Nombre equipo")&&tabla.getValueAt(fila,col)!=null)
            mostrarPopupMenu(asis,evt,col,fila,""+tabla.getValueAt(fila,col));
    }

    /** Obtiene los parametros para generar reportes imprimibles
     * @param rubro El rubro de evaluacion del reporte (en caso de aplicar)
     * @param credito El nombre del credito calificacion o porcentaje segun si 
     *   es reporte de calificaiones o asistencias respectivamente
     * @param grupo La denominacion del grupo actual 
     * @return Un map con los datos para elaborar un reporte imprimible
     */
    private Map<String,String> getParametrosImp(String rubro,String credito,String grupo){
        Map<String,String> parametros = new HashMap<String,String>();
        String[] datosDoc=Consultas.consultaUnCampo("select * from datosdoc,datosinst;",false);
        if(datosDoc==null){
            muestraMensaje("Error al consultar datos de cabecera de reporte",Consultas.obtenError(),TipoMensaje.ERROR);
            return null;
        }
        parametros.put("NOMINST",datosDoc[2]);
        parametros.put("UNIACAESC",datosDoc[3]);
        parametros.put("AREAPROG",datosDoc[4]);
        parametros.put("NOMDOC",datosDoc[0]);
        parametros.put("NOMMATE",""+jcbMaterias.getSelectedItem());
        parametros.put("GRUPO",grupo);
        parametros.put("RUBRO",rubro);
        parametros.put("NOMCREDITO",credito);
        return parametros;
    }
    
    /** Obtiene datos de una tabla como campos para generar un reporte imprimible
     * @param modelo El modelo de la tabla de la cual se desean obtener los datos
     * @param colCalif indica para el cuarto campo segun su 
     *   valor: -1 ignorar (vale null), >-1 tomar desde la tabla ==-2 calcular porcentaje de asistencias a la fecha
     * @return La lista de campos para generar un reporte imprimible
     */
    private ArrayList getCamposImp(DefaultTableModel modelo,int colCalif){
        ArrayList lista=new ArrayList();
        DefaultTableModel modAsisTemp=null;
        ImpListaAl campo;
        int numSes=0; // numero de sesiones efectivas a la fecha
        String cal;
        float porAsis;
        if(colCalif==-2){ 
            cal="select valor from pertenece,asistencias,sesiones,alumno where ";
            cal+="clvg='"+txtClave.getText()+"' and pertenece.clvper=asistencias.clvper";
            cal+=" and asistencias.clvses=sesiones.clvses and pertenece.matricula=alumno.matricula";
            cal+=" and timediff(now(),sesiones.fechayhora)>'0000-00-00 00:00:00' order by appat";
            cal+=",apmat,nom,fechayhora,alumno.matricula;";
            modAsisTemp=Consultas.consTipoTable(cal,false);
            if(modAsisTemp==null){
                muestraMensaje("Error al calcular porcentaje de asistencias",Consultas.obtenError(),TipoMensaje.ERROR);
                return null;
            }
            numSes=(modAsisTemp.getRowCount()/jtbAsistencias.getRowCount());
        }
        cal=null;
        for(int j=0;j<modelo.getRowCount();j++){
            if(colCalif>-1) cal=""+modelo.getValueAt(j,colCalif);
            else if(colCalif==-2){
                porAsis=0f;
                for(int q=(j*numSes);q<(numSes*(j+1));q++){
                    char valor=(""+modAsisTemp.getValueAt(q,0)).charAt(0);
                    if(valor!='I'&&valor!='_') porAsis++;
                }
                if(porAsis>0f) cal=""+(porAsis/((float)numSes/100f));
                else cal="0.00";
            }
            campo=new ImpListaAl(""+modelo.getValueAt(j,0),""+modelo.getValueAt(j,1),(j+1),cal);
            lista.add(campo);
        }
        return lista;
    }
    
    /** Llama al metodo cargaDatosGrupo para cargar todos los registros desde la base de datos para el grupo actual 
     * @return true si la carga se hizo correctamente false en caso contrario
     */
    public boolean actualiza(){
        return cargaDatosGrupo(clave); 
    }
    
    /** Cargar todos los registros desde la base de datos para un grupo
     * @param newClv La clave del grupo a cargar
     * @return true si la carga se hizo correctamente false en caso contrario
     */
    public boolean cargaDatosGrupo(String newClv){        
        String sentencia1="select Grupos.ClvG, Grado, Grupo, Imparte.ClvM, PerIni, PerFin, Aula from";
        sentencia1+=" Grupos, Imparte where Grupos.ClvG='"+newClv+"' and Grupos.ClvG=Imparte.ClvG;";
        String[] dts;
        DefaultTableModel modeloAs;
        DefaultTableModel modeloCa;
        if(hayCambios()){
            TipoRespuesta opc=pideDesicion(getTitle(),"Hay cambios sin guardar, ¬øDesea continuar y perder los cambios?");
            if(opc.getTipo()!=TipoRespuesta.ACEPTAR.getTipo()){
                return false;
            }
        }
        dts = database.Consultas.consultaUnCampo(sentencia1,true);
        if(dts==null){
            muestraMensaje("Error al hacer la busqueda", database.Consultas.obtenError(),TipoMensaje.ERROR);
            return false;
        }
        else if(dts[0]!=null){
            listaMaterias();
            setTitle("Ficha de grupo "+newClv);
            txtClave.setText(newClv); txtGrd.setText(dts[1]); txtGrp.setText(dts[2]);
            if(clvsMats!=null){
                sentencia1=Datos.obtenClvMat(newClv);
                for(int h=0;h<clvsMats.length;h++)
                    if(clvsMats[h].equals(sentencia1)){
                        jcbMaterias.setSelectedIndex(h);
                        jcbMaterias.setEnabled(true);
                        break;
                    }
            }            
            txtPIni.setText(dts[4]); txtPFin.setText(dts[5]); txtAul.setText(dts[6]);
            btnProgSes.setEnabled(true); btnProgCalif.setEnabled(true);
            btnGuarda.setEnabled(true); btnElim.setEnabled(true);
            btnAgrega.setEnabled(true); btnImprimir.setEnabled(true);
            sentencia1="select alumno.matricula as Matricula, concat(appat,' ',apmat,' ',nom) as Alumno";
            sentencia1+=" from alumno, pertenece where alumno.matricula=pertenece.matricula and pertenece.clvg='";
            sentencia1+=newClv+"' order by appat,apmat,nom,alumno.matricula";
            modeloAs=Consultas.consTipoTable(sentencia1,false);
            if(modeloAs==null){
                muestraMensaje("Error al consultar alumnos",Consultas.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else if(modeloAs.getRowCount()>0){
                modeloCa=new DefaultTableModel();
                modeloCa.addColumn("Matricula"); modeloCa.addColumn("Alumno");
                for(int g=0;g<modeloAs.getRowCount();g++){
                    Object[] row=new Object[modeloAs.getColumnCount()];
                    for(int y=0;y<modeloAs.getColumnCount();y++){
                        row[y]=modeloAs.getValueAt(g, y);
                    }
                    modeloCa.addRow(row);
                }
                btnQuitar.setEnabled(false);
                modeloAs=cargaAsistencias(modeloAs,newClv);
                jtbAsistencias.setModel(modeloAs);
                jtbAsistencias.getColumn("Matricula").setPreferredWidth(60);
                jtbAsistencias.getColumn("Alumno").setPreferredWidth(225);
                modeloCa=cargaRubrosEval(modeloCa,newClv);
                jtbCalifs.setModel(modeloCa);
                jtbCalifs.getColumn("Matricula").setPreferredWidth(60);
                jtbCalifs.getColumn("Alumno").setPreferredWidth(225);
                lblNumAlums.setText("Alumnos del grupo: "+jtbAsistencias.getRowCount());
                lblNumAlums1.setText("Alumnos del grupo: "+jtbAsistencias.getRowCount());
                lblNumSes.setText((jtbAsistencias.getColumnCount()-2)+" Sesiones programadas");
                lblNumCalifs.setText((jtbCalifs.getColumnCount()-2)+" Rubros de evaluacion programados");
                if(jtbAsistencias.getColumnCount()>2) cambiaOrientacionTitCols(jtbAsistencias);
                if(jtbCalifs.getColumnCount()>2) cambiaOrientacionTitCols(jtbCalifs);
                btnQuitar.setEnabled(true);            
            }
            clave=newClv; setCambios(false,false,false); pack();
        }
        else{
            muestraMensaje("Resultados", "No se encontraron datos para esa clave",TipoMensaje.INFORMACION);
        }
        return true;
    }  
  
    /** Carga las asistencias registradas para los alumnos del grupo actual
     * @param modAlums Un model cargado con el resultado de una consulta de los alumnos del grupo actual
     * @param clvg La clave del grupo actual
     * @return un model cargado con el resultado de una consulta de los alumnos del grupo 
     *   actual y sus respectivas asistencias para cada sesion
     */
    private DefaultTableModel cargaAsistencias(DefaultTableModel modAlums, String clvg){
        int sesiones;
        String asis;
        String sen="select alumno.matricula,asistencias.clvper,asistencias.clvses,fechayhora,valor";
        sen+=" from pertenece,asistencias,sesiones,alumno where pertenece.clvg='"+clvg+"' and ";
        sen+="asistencias.clvper=pertenece.clvper and sesiones.clvses=asistencias.clvses and alumno.";
        sen+="matricula=pertenece.matricula order by appat,apmat,nom,alumno.matricula,fechayhora;";
        btnGuardaAsis.setEnabled(false);
        modeloAsis=Consultas.consTipoTable(sen,false);
        if(modeloAsis==null)
            muestraMensaje("Error al consultar asistencias",Consultas.obtenError(),TipoMensaje.ERROR);
        else if(modeloAsis.getRowCount()>0){
            sesiones=modeloAsis.getRowCount()/modAlums.getRowCount();
            for(int j=0;j<sesiones;j++){
                modAlums.addColumn(""+modeloAsis.getValueAt(j,3));
                for(int k=j, l=0;k<modeloAsis.getRowCount();k+=sesiones, l++){
                    asis=""+modeloAsis.getValueAt(k, 4);
                    asis=(asis.equals("_")?"":asis);
                    modAlums.setValueAt(asis,l,modAlums.getColumnCount()-1);
                }
            }
            btnGuardaAsis.setEnabled(true);
        }
        return modAlums;
    }   
  
    /** Carga las calificaciones registradas para los alumnos del grupo actual por cada rubro de evaluacion programado
     * @param modAlums Un model cargado con el resultado de una consulta de los alumnos del grupo actual
     * @param clvg La clave del grupo actual
     * @return un model cargado con el resultado de una consulta de los alumnos del grupo 
     *   actual y sus respectivas calificaciones obtenidas para cada rubro de evaluacion
     */
    private DefaultTableModel cargaRubrosEval(DefaultTableModel modAlums, String clvg){
        int califs;
        String calif;
        String sen="select alumno.matricula,realiza.clvper,realiza.clvru,descripcion,calif from ";
        sen+="pertenece,realiza,rubroscalif,alumno where pertenece.clvg='"+clvg+"' and ";
        sen+="realiza.clvper=pertenece.clvper and rubroscalif.clvru=realiza.clvru and alumno.";
        sen+="matricula=pertenece.matricula order by appat,apmat,nom,alumno.matricula,fchacal,descripcion;";
        btnGuardaCalifs.setEnabled(false);
        modeloCalif=Consultas.consTipoTable(sen,false);
        if(modeloCalif==null)
            muestraMensaje("Error al consultar calificaciones", Consultas.obtenError(),TipoMensaje.ERROR);
        else if(modeloCalif.getRowCount()>0){
            califs=modeloCalif.getRowCount()/modAlums.getRowCount();
            for(int j=0;j<califs;j++){
                modAlums.addColumn(""+modeloCalif.getValueAt(j,3));
                for(int k=j, l=0;k<modeloCalif.getRowCount();k+=califs, l++){
                    calif=""+modeloCalif.getValueAt(k, 4);
                    calif=(calif.equals("0.0")?"NP":calif);
                    modAlums.setValueAt(calif,l,modAlums.getColumnCount()-1);
                }
            }
            btnGuardaCalifs.setEnabled(true);
        }
        return modAlums;
    }
   
    /** Cambia las cabeceras de columna de jtable por cabeceras para 
     *   desplegar el texto verticalmente
     * @param tabla La tabla en la cual se quieren cambiar las cabeceras 
     *   (Se cambia desde la tercera cabecera en adelante)
     */
    private void cambiaOrientacionTitCols(javax.swing.JTable tabla){
        RenderizadorCabsTabla rendct;
        javax.swing.table.TableColumnModel columnas=tabla.getColumnModel();
        int colini=2;
        ArrayList<String> text=new ArrayList<String>();
        for(int d=0;d<tabla.getColumnCount();d++)
            if(d>=colini){
                java.util.StringTokenizer tk=new java.util.StringTokenizer(tabla.getColumnName(d));
                text.clear();
                while(tk.hasMoreTokens()) text.add(tk.nextToken()); 
                javax.swing.table.TableColumn columna=columnas.getColumn(d);
                rendct=new RenderizadorCabsTabla(text);
                columna.setHeaderRenderer(rendct);
                columna.setPreferredWidth(10+(text.size()*16));
            }
    }
   
    /** Crea los popupmenues con las acciones para las tablas de asistencias y calificaciones*/
    private void crearPopMenu(){
        String[] txts={"Registro personal","Desempe√±o academico","Desempe√±o en grupo",
          "Asesorias","Quitar","Asistencia","Retardo","Inasistencia con permiso previo",
          "Inasistencia con justificacion posterior","Inasistencia"};
        javax.swing.JMenuItem[] mnus = new javax.swing.JMenuItem[10];
        javax.swing.JMenuItem mnucal;
        pmnuMat=new javax.swing.JPopupMenu();
        pmnuAsis=new javax.swing.JPopupMenu();
        pmnuCalif=new javax.swing.JPopupMenu();
        for(int h=0;h<mnus.length;h++){
            mnus[h]=new javax.swing.JMenuItem(txts[h]);
            mnus[h].setActionCommand(txts[h]);
            mnus[h].addActionListener(this);
            if(h<5) pmnuMat.add(mnus[h]);
            else pmnuAsis.add(mnus[h]);
        }
        mnucal = new javax.swing.JMenuItem("NP");
        mnucal.setActionCommand("NP");
        mnucal.addActionListener(this);
        pmnuCalif.add(mnucal);
        for(float y=0.5f;y<=10f;y+=0.5f){
            mnucal = new javax.swing.JMenuItem(""+y);
            mnucal.setActionCommand(""+y);
            mnucal.addActionListener(this);
            pmnuCalif.add(mnucal);
        }
    }
    
    /** Muestra el popupmenu sobre la tabla (calificaciones o asistencias) solo si el click hecho sobre la tabla respectiva
     *   ese el disparador de popup segun el so sobre el que se ejecuta el sistema
     * @param asis Indica si se hizo click sobre la tabla de asistencias
     * @param evt El MouseEvent que se genero al hacer click sobre la tabla
     * @param col El numero de columna sobre la que se hizo click
     * @param fila El numero de fila sobre la que se hizo click
     * @param tx El texto de la celda sobre la que se hizo click
     */
    private void mostrarPopupMenu(boolean asis, java.awt.event.MouseEvent evt, int col, int fila, String tx){
        javax.swing.JTable tabla=(asis?jtbAsistencias:jtbCalifs);
        java.awt.Component[] mns;
        if (evt.isPopupTrigger()){
            if(tx.length()==8) mns =pmnuMat.getComponents();
            else if(asis) mns =pmnuAsis.getComponents();
            else mns =pmnuCalif.getComponents();
            for(int y=0;y<mns.length;y++){
                String tmp=((javax.swing.JMenuItem)mns[y]).getText();
                ((javax.swing.JMenuItem)mns[y]).setActionCommand(""+asis+":"+tmp+":"+(tx.length()<1?"_":tx)+":"+col+":"+fila);
            }
            tabla.setRowSelectionInterval(fila, fila);
            if(tx.length()==8) pmnuMat.show(evt.getComponent(),evt.getX(),evt.getY());
            else if(asis) pmnuAsis.show(evt.getComponent(),evt.getX(),evt.getY());            
            else pmnuCalif.show(evt.getComponent(),evt.getX(),evt.getY());            
        }
    }
 
    /** Es la implementacion del action command de los menus de los menues emergentes
     *   de acuerdo al ActionCommand de evento llama al metodo  de la accion en la cual 
     *   se hizo click (ver registro de alumno, registrar asistencia o calificacion)
     * @param evt El ActionEvent que genero el evento
     */
    public void actionPerformed(java.awt.event.ActionEvent evt){
        // en el actionCommand se espera asis(boolean):textoDelMenu:textoCelda(_=vacio):numColumna:numFila
        java.util.StringTokenizer toks=new java.util.StringTokenizer(evt.getActionCommand(),":");
        boolean asis=toks.nextToken().equals("true");
        String accion=toks.nextToken();
        String txtCelda=toks.nextToken();
        int col=Integer.parseInt(toks.nextToken());
        int fila=Integer.parseInt(toks.nextToken());
        if(txtCelda.length()==8){
            if(accion.equals("Registro personal")){
                getPrincipalVnt().agregaVentanaAlumno(txtCelda,1);
            }
            else if(accion.equals("Desempe√±o academico")){
                getPrincipalVnt().agregaVentanaAlumno(txtCelda,2);
            }
            else if(accion.equals("Desempe√±o en grupo")){
                getPrincipalVnt().agregaVentanaAlumno(txtCelda,3);
                alumnos.FrameDesGru rgd=((alumnos.FrameDesGru)obtenVentana("Registro personal de desempe√±o en grupo alumno "+txtCelda));
                rgd.cargaDatosDesGru(clave);
            }
            else if(accion.equals("Asesorias")){
                getPrincipalVnt().agregaVentanaAlumno(txtCelda,4);
            }
            else if(accion.equals("Quitar")) quitaAlumno(txtCelda);
            pmnuMat.setVisible(false);
        }
        else if(asis){
            if(accion.equals("Asistencia")) txtCelda="A";
            else if(accion.equals("Retardo")) txtCelda="R";
            else if(accion.equals("Inasistencia con permiso previo")) txtCelda="P";
            else if(accion.equals("Inasistencia con justificacion posterior")) txtCelda="J";
            else if(accion.equals("Inasistencia")) txtCelda="I";
            jtbAsistencias.setValueAt(txtCelda,fila,col);
            pmnuAsis.setVisible(false);
            setCambios(cambiosDts,true,cambiosCalif);
        }
        else{
            txtCelda=accion;
            jtbCalifs.setValueAt(txtCelda,fila,col);
            pmnuCalif.setVisible(false);
            setCambios(cambiosDts,cambiosAsis,true);
        }
    }
 
    /** Crea un listener para escuchar si se producen cambios en los controles de texto */
    private void escuchaCambios(){
        ListenChanges listenCh=new ListenChanges();
        txtGrd.getDocument().addDocumentListener(listenCh);
        txtGrp.getDocument().addDocumentListener(listenCh);
        txtAul.getDocument().addDocumentListener(listenCh);
        txtPIni.getDocument().addDocumentListener(listenCh);
        txtPFin.getDocument().addDocumentListener(listenCh);
    }
 
    /** Llama al metodo setCambios (de la super clase) para indicarle si hay cambios sin guardar
     * @param datos Indica si hay cambios en los datos generales
     * @param asis Indica si hay cambios en las asistencias
     * @param calif Indica si hay cambios en las calificaciones
     */
    private void setCambios(boolean datos, boolean asis, boolean calif){
        cambiosDts=datos;
        cambiosAsis=asis;
        cambiosCalif=calif;
        setCambios(cambiosDts||cambiosAsis||cambiosCalif);
    }
   
    /** Llama a los metodos  guardaDatos(), guardaAsistencias() y guardaCalificaciones()
     *  (segun haya cmabios sin guardar) para guardar todos los datos
     * @return true si los datos se guardaron correctamente false en cacontrario
     */
    @Override
    public boolean guardaCambios(){
        if(cambiosDts && !guardaDatos()){ return false; }
        if(cambiosAsis && !guardaAsistencias()){ return false; }
        if(cambiosCalif && !guardaCalificaciones()){ return false; }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgrega;
    private javax.swing.JButton btnCarga;
    private javax.swing.JButton btnElim;
    private javax.swing.JButton btnGuarda;
    private javax.swing.JButton btnGuardaAsis;
    private javax.swing.JButton btnGuardaCalifs;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnProgCalif;
    private javax.swing.JButton btnProgSes;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox jcbMaterias;
    private javax.swing.JTable jtbAsistencias;
    private javax.swing.JTable jtbCalifs;
    private javax.swing.JTabbedPane jtbTabb;
    private javax.swing.JLabel lblNumAlums;
    private javax.swing.JLabel lblNumAlums1;
    private javax.swing.JLabel lblNumCalifs;
    private javax.swing.JLabel lblNumSes;
    private javax.swing.ButtonGroup rbtnGrpVerListas;
    private javax.swing.JTextField txtAul;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtClv;
    private javax.swing.JTextField txtGrd;
    private javax.swing.JTextField txtGrp;
    private javax.swing.JTextField txtPFin;
    private javax.swing.JTextField txtPIni;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
        /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrameGrupo que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            if(clave==null) return;
            setCambios(true,cambiosAsis,cambiosCalif);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrameGrupo que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            if(clave==null) return;
            setCambios(true,cambiosAsis,cambiosCalif);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
    
    /** Clase que hereda del DefaultTableCellRenderer para utilizar como cabeceras de columnas
     *   en una jtable y hacer que control de la cabecera despliege el texto en forma vertical
     */
    private class RenderizadorCabsTabla extends javax.swing.table.DefaultTableCellRenderer {
        /**Etiqueta que sera la cabecera de columna*/
        private javax.swing.JLabel etiq = null;
       
        /** Crea un nuevo RenderizadorCabsTabla
         * @param tx El texto de la cabecera de columna
         */
        public RenderizadorCabsTabla(ArrayList<String> tx){
            super();
            etiq = new javax.swing.JLabel();
            etiq.setUI(new RotaTextoUI(false,tx));
            etiq.setBorder(new javax.swing.border.EtchedBorder());
        }
      
        /** Obtiene el control que se utiliza para renderizar la cabecera de la columna de la tabla
         * @param table
         * @param value
         * @param isSelected
         * @param hasFocus
         * @param row
         * @param column
         * @return El component a mostrar por el renderizador
         */
        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, 
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return etiq; 
        }
    }
    
    /** Implementacion de BasicLabelUI que hace que el texto se despliege verticalmente 
     *   para asignar como LabelUI a una JLabel
     */
    private class RotaTextoUI extends javax.swing.plaf.basic.BasicLabelUI{
        
        protected boolean clockwise;
        private java.awt.Rectangle paintIconR = new java.awt.Rectangle();
        private java.awt.Rectangle paintTextR = new java.awt.Rectangle();
        private java.awt.Rectangle paintViewR = new java.awt.Rectangle();
        private java.awt.Insets paintViewInsets = new java.awt.Insets(0, 0, 0, 0);
        /** Los contenidos de texto a desplegar cada string se considera un reglon */
        private ArrayList<String> tx;
        
        /** Crea un nuevo RotaTextoUI
         * @param clockwise
         * @param tx Lista de string que sera el texto a desplegar
         */
        RotaTextoUI(boolean clockwise, ArrayList<String> tx){
            super();
            this.clockwise=clockwise;
            this.tx=new ArrayList<String>();
            for(int c=0;c<tx.size();c++) this.tx.add(tx.get(c));
        }
    
        @Override
        public java.awt.Dimension getPreferredSize(javax.swing.JComponent c){
            java.awt.Dimension dim = super.getPreferredSize(c);
            return new java.awt.Dimension( dim.height, dim.width );
        }
        
        @Override
        public void paint(java.awt.Graphics g, javax.swing.JComponent c){
            javax.swing.JLabel label=(javax.swing.JLabel)c;
            String clippedText;
            int h=0;
            java.awt.FontMetrics fm=g.getFontMetrics();
            java.awt.Graphics2D g2=(java.awt.Graphics2D)g;
            java.awt.geom.AffineTransform tr=g2.getTransform();       
            paintViewInsets=c.getInsets(paintViewInsets);
            paintViewR.x=paintViewInsets.left;
            paintViewR.y=paintViewInsets.top;
            paintViewR.height=c.getWidth()-(paintViewInsets.left+paintViewInsets.right);
            paintViewR.width=c.getHeight()-(paintViewInsets.top+paintViewInsets.bottom);
            paintIconR.x=paintIconR.y=paintIconR.width=paintIconR.height=0;
            paintTextR.x=paintTextR.y=paintTextR.width=paintTextR.height=0;
            if(clockwise){
	    	g2.rotate(Math.PI/2); 
    		g2.translate(0,-c.getWidth());
            }
            else{
                g2.rotate(-Math.PI/2);
    		g2.translate(-c.getHeight(),0);
            }
            for(int d=0;d<tx.size();d++){
                clippedText=layoutCL(label,fm,tx.get(d),null,paintViewR,paintIconR,paintTextR);
                paintEnabledText(label,g,clippedText,paintTextR.x+5,(d+1)*fm.getHeight());
                h=(d==0?(int)(fm.getStringBounds(tx.get(d),g)).getWidth():h);
                if((int)(fm.getStringBounds(tx.get(d),g)).getWidth()>h){
                    h=(int)(fm.getStringBounds(tx.get(d),g)).getWidth();
                }
            }
            label.setPreferredSize(new java.awt.Dimension(10,h+10));
            g2.setTransform(tr);
        }
    }
    
}

