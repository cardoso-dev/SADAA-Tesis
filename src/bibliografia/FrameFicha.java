/*
 * FrameFicha.java
 *   Ventana ficha bibliografica general (altas, visualizacion, modificacion y eliminacion de fichas)
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package bibliografia;

import definiciones.TipoMensaje;
import iconos.Iconos;
import java.util.HashMap;
import java.util.Map;

/**  Es una ventana interna (JInternalFrame) la cual sirve para la creacion y modificacion
 *  de registros de fichas bibliograficas o hemerograficas.
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameFicha extends sistema.ModeloFrameInterno{
    
    /** indica el tipo de ficha cargada actualmente donde: 
      1=bibliografica general, 2=hemerografica general, 3=hemerografica analitica*/
    private int tipo;
    /** Referencia al objeto para detectar cambios en el contenido de los controles de texto */
    private ListenChanges listenCh;
    
    /** Crea una nueva ventana FrameFicha
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     */
    public FrameFicha(sistema.FramePrincipal ventana) {
        super(ventana,"libro.png");
        initComponents();
        barra.setVisible(false);
        btnGuarda.setIcon(Iconos.getIcono("guardar.png"));
        btnGuarda.setText("");
        btnElimina.setIcon(Iconos.getIcono("elimina.png"));
        btnElimina.setText("");
        btnImprimir.setIcon(Iconos.getIcono("impresora.png"));
        btnImprimir.setText("");
        tipo=0;
        setCambios(false);
        escuchaCambios();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGeneral = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlGeneralp1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtClvReg = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAut = new javax.swing.JTextField();
        txtTit = new javax.swing.JTextField();
        txtClas = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEdit = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtFchaEdi = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtEditNum = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtProl = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtComp = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtTrad = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtLugImp = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtColSr = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtVolTom = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtNumPgs = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtLugCon = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlGeneralp2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPalClv = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRes = new javax.swing.JTextArea();
        pnlHeme = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        pnlHeme1 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        txtClvRgH = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtTitH = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtNomDir = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtPer = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtLugEd = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtCom = new javax.swing.JTextArea();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtKeyWH = new javax.swing.JTextArea();
        jLabel37 = new javax.swing.JLabel();
        pnlHemeAn = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        pnlHemeAn1 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        txtClvRegHA = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtClasHA = new javax.swing.JTextField();
        txtTitHA = new javax.swing.JTextField();
        txtAutHA = new javax.swing.JTextField();
        txtPub = new javax.swing.JTextField();
        txtNumHA = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtPagsHA = new javax.swing.JTextField();
        lblFchaHA = new javax.swing.JLabel();
        txtFchaHA = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtAnyoHA = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txtVolTNumHA = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtResumenHA = new javax.swing.JTextArea();
        rbtnGrpCatsNew = new javax.swing.ButtonGroup();
        pnlNueva = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rbtnGen = new javax.swing.JRadioButton();
        rbtnHem = new javax.swing.JRadioButton();
        rbtnHemAn = new javax.swing.JRadioButton();
        btnElegir = new javax.swing.JButton();
        barra = new javax.swing.JToolBar();
        btnGuarda = new javax.swing.JButton();
        btnElimina = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        pnlGeneral.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jLabel3.setText("Clave de registro:");

        txtClvReg.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel10.setText("* Datos obligatorios");

        jLabel4.setText("*Clasificación:");

        jLabel5.setText("*Titulo:");

        jLabel6.setText("*Autor:");

        jLabel11.setText("*Editorial:");

        jLabel12.setText("Fecha de edición:");

        jLabel13.setText("*Edición Num:");

        jLabel7.setText("Prologuista:");

        jLabel8.setText("Compilador:");

        jLabel9.setText("Traductor:");

        jLabel14.setText("Lugar de impresión:");

        jLabel15.setText("Colección o serie:");

        jLabel16.setText("Volumen o tomo:");

        jLabel17.setText("Número de paginas:");

        jLabel20.setText("*Lugar de consulta");

        javax.swing.GroupLayout pnlGeneralp1Layout = new javax.swing.GroupLayout(pnlGeneralp1);
        pnlGeneralp1.setLayout(pnlGeneralp1Layout);
        pnlGeneralp1Layout.setHorizontalGroup(
            pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtClvReg, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlGeneralp1Layout.createSequentialGroup()
                            .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtAut, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtClas, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(txtEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFchaEdi, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEditNum, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLugCon, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(txtProl, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtComp, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(txtTrad, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLugImp, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtColSr, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVolTom, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumPgs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlGeneralp1Layout.setVerticalGroup(
            pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralp1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtClvReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtClas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtFchaEdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtEditNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtLugCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtProl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtTrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtLugImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtColSr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtVolTom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumPgs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(pnlGeneralp1);

        pnlGeneral.add(jScrollPane1);

        jLabel18.setText("Palabras clave:");

        txtPalClv.setColumns(20);
        txtPalClv.setRows(5);
        jScrollPane3.setViewportView(txtPalClv);

        jLabel19.setText("Resumen:");

        txtRes.setColumns(20);
        txtRes.setRows(5);
        jScrollPane4.setViewportView(txtRes);

        javax.swing.GroupLayout pnlGeneralp2Layout = new javax.swing.GroupLayout(pnlGeneralp2);
        pnlGeneralp2.setLayout(pnlGeneralp2Layout);
        pnlGeneralp2Layout.setHorizontalGroup(
            pnlGeneralp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralp2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        pnlGeneralp2Layout.setVerticalGroup(
            pnlGeneralp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralp2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(pnlGeneralp2);

        pnlGeneral.add(jScrollPane2);

        pnlHeme.setLayout(new java.awt.BorderLayout());

        jLabel21.setText("Clave de registro:");

        txtClvRgH.setEditable(false);

        jLabel22.setText("*Titulo de la publicación:");

        jLabel23.setText("*Director:");

        jLabel24.setText("*Periodicidad:");

        jLabel25.setText("*Lugar de edición:");

        jLabel26.setText("Comentario:");

        txtCom.setColumns(20);
        txtCom.setRows(5);
        jScrollPane5.setViewportView(txtCom);

        jLabel27.setText("Palabras clave:");

        txtKeyWH.setColumns(20);
        txtKeyWH.setRows(5);
        jScrollPane6.setViewportView(txtKeyWH);

        jLabel37.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel37.setText("* Datos obligatorios");

        javax.swing.GroupLayout pnlHeme1Layout = new javax.swing.GroupLayout(pnlHeme1);
        pnlHeme1.setLayout(pnlHeme1Layout);
        pnlHeme1Layout.setHorizontalGroup(
            pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeme1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHeme1Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtClvRgH, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(jLabel37))
                    .addGroup(pnlHeme1Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTitH, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHeme1Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomDir, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHeme1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHeme1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLugEd, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel26)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlHeme1Layout.setVerticalGroup(
            pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeme1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtClvRgH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtTitH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtNomDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHeme1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtLugEd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane7.setViewportView(pnlHeme1);

        pnlHeme.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        pnlHemeAn.setLayout(new java.awt.BorderLayout());

        jLabel28.setText("Clave de registro:");

        txtClvRegHA.setEditable(false);

        jLabel29.setText("*Clasificación:");

        jLabel30.setText("*Titulo:");

        jLabel31.setText("*Autor:");

        jLabel32.setText("*Publicación:");

        jLabel33.setText("*Numero:");

        jLabel34.setText("*Paginas:");

        lblFchaHA.setText("*Fecha:");

        jLabel35.setText("*Año:");

        txtAnyoHA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAnyoHAKeyReleased(evt);
            }
        });

        jLabel36.setText("Volumen o tomo número:");

        jLabel38.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel38.setText("* Datos obligatorios");

        jLabel39.setText("Resumen:");

        txtResumenHA.setColumns(20);
        txtResumenHA.setRows(5);
        jScrollPane9.setViewportView(txtResumenHA);

        javax.swing.GroupLayout pnlHemeAn1Layout = new javax.swing.GroupLayout(pnlHemeAn1);
        pnlHemeAn1.setLayout(pnlHemeAn1Layout);
        pnlHemeAn1Layout.setHorizontalGroup(
            pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClvRegHA, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addComponent(jLabel38))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClasHA, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addGap(18, 18, 18)
                        .addComponent(txtTitHA, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(18, 18, 18)
                        .addComponent(txtAutHA, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPub, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                                .addComponent(lblFchaHA)
                                .addGap(18, 18, 18)
                                .addComponent(txtFchaHA, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel35)
                                .addGap(10, 10, 10)
                                .addComponent(txtAnyoHA, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(18, 18, 18)
                                .addComponent(txtNumHA, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPagsHA, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(66, 66, 66))
                    .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtVolTNumHA, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel39))
                .addContainerGap())
        );
        pnlHemeAn1Layout.setVerticalGroup(
            pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHemeAn1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtClvRegHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(txtClasHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtTitHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtAutHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(txtPub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFchaHA)
                    .addComponent(txtFchaHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(txtAnyoHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(txtNumHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(txtPagsHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHemeAn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtVolTNumHA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane8.setViewportView(pnlHemeAn1);

        pnlHemeAn.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setTitle("Nueva ficha bibliográfica");

        jLabel1.setText("Crear nueva ficha bibliográfica");

        jLabel2.setText("Eliga la categoria de la nueva ficha bibliografica:");

        rbtnGrpCatsNew.add(rbtnGen);
        rbtnGen.setSelected(true);
        rbtnGen.setText("Bibliográfica general");

        rbtnGrpCatsNew.add(rbtnHem);
        rbtnHem.setText("Hemeroteca general");

        rbtnGrpCatsNew.add(rbtnHemAn);
        rbtnHemAn.setText("Hemeroteca analítica");

        btnElegir.setMnemonic('E');
        btnElegir.setText("Elegir");
        btnElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNuevaLayout = new javax.swing.GroupLayout(pnlNueva);
        pnlNueva.setLayout(pnlNuevaLayout);
        pnlNuevaLayout.setHorizontalGroup(
            pnlNuevaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNuevaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlNuevaLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlNuevaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnGen)
                            .addComponent(jLabel2)
                            .addComponent(rbtnHem)
                            .addGroup(pnlNuevaLayout.createSequentialGroup()
                                .addComponent(rbtnHemAn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                                .addComponent(btnElegir)))))
                .addContainerGap())
        );
        pnlNuevaLayout.setVerticalGroup(
            pnlNuevaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnGen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnHem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNuevaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnHemAn)
                    .addComponent(btnElegir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlNueva, java.awt.BorderLayout.CENTER);

        barra.setFloatable(false);
        barra.setRollover(true);

        btnGuarda.setText("grd");
        btnGuarda.setToolTipText("Guardar los datos");
        btnGuarda.setFocusable(false);
        btnGuarda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuarda.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });
        barra.add(btnGuarda);

        btnElimina.setText("elm");
        btnElimina.setToolTipText("Eliminar esta ficha");
        btnElimina.setEnabled(false);
        btnElimina.setFocusable(false);
        btnElimina.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnElimina.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaActionPerformed(evt);
            }
        });
        barra.add(btnElimina);

        btnImprimir.setText("imp");
        btnImprimir.setToolTipText("Imprimir");
        btnImprimir.setEnabled(false);
        btnImprimir.setFocusable(false);
        btnImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImprimir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        barra.add(btnImprimir);

        getContentPane().add(barra, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Cambia los controles para adecuar la ficha al tipo elegido entre los controles
     *   rbtnGen, rbtnHem y rbtnHemAn
     * @param evt El ActionEvent que genero el evento
     */
    private void btnElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirActionPerformed
        tipo=(rbtnGen.isSelected()?1:(rbtnHem.isSelected()?2:3));
        cargaTipo();
    }//GEN-LAST:event_btnElegirActionPerformed

    /** Llama al metodo para los datos de la ficha actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        guardaCambios();
    }//GEN-LAST:event_btnGuardaActionPerformed
   
    /** Guarda los cambios realizados en la ficha actual (de acuerdo al valor en tipo)
     * (si es la primera vez que se edita se crea el registro)
     * @return true si el registro se creo/guardo correctamente. 
     *   false si no se pudo crear/guardar el registro en cuyo caso muestra una mensaje 
     *   indicando el error ocurrido (Comunicacion con la bd, datos invalidos, etc...).
     */
    @Override
    public boolean guardaCambios(){
        String sent="";
        String[] datos;
        boolean upd=false;
        if(!sonDatosValidos()) return false;
        datos=obtenDatos();
        if(tipo==1){ // categoria bibliografica general
            if((txtClvReg.getText()).equals("")){ // es alta                
                if(database.Actualiza.nuevaFichaBibGen(datos,true)){
                    txtClvReg.setText(""+database.Actualiza.obtenClave());
                    muestraMensaje("Acción realizada","Se ha agregado el nuevo registro ",TipoMensaje.INFORMACION);
                    setTitle("Ficha bibliográfica general "+txtClvReg.getText());
                    setCambios(false);
                    btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
                    return true;
                }
                else{
                    muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    return false;
                }
            }
            else{ // es upd
                sent="update Fbibl set titulo='"+datos[0]+"', autor='"+datos[1]+"', clasificacion=";
                sent+="'"+datos[2]+"', prologista="+(datos[3].equals("")?"null":"'"+datos[3]+"'");
                sent+=", compilador="+(datos[4].equals("")?"null":"'"+datos[4]+"'");
                sent+=", traductor="+(datos[5].equals("")?"null":"'"+datos[5]+"'");
                sent+=", NumEdit="+datos[6]+", NomEdit='"+datos[7]+"', FchaEdit=";
                sent+=(datos[8].equals("")?"null":"'"+datos[8]+"'");
                sent+=", LugImp="+(datos[9].equals("")?"null":"'"+datos[9]+"'");
                sent+=", ColSer="+(datos[10].equals("")?"null":"'"+datos[10]+"'");
                sent+=", VolTom="+datos[11]+", NumPgs="+datos[12]+", RefLugCon='"+datos[13];
                sent+="', Resumen="+(datos[14].equals("")?"null":"'"+datos[14]+"'");
                sent+=", KeyWords="+(datos[15].equals("")?"null":"'"+datos[15]+"'");  
                sent+=" where ClvFBib="+txtClvReg.getText()+";";
                upd=true;
            }
        }
        else if(tipo==2){ // categoria hemeroteca general
            if((txtClvRgH.getText()).equals("")){ // es alta
                if(database.Actualiza.nuevaFichaHemGen(datos,true)){
                    txtClvRgH.setText(""+database.Actualiza.obtenClave());
                    muestraMensaje("Acción realizada","Se ha agregado el nuevo registro ",TipoMensaje.INFORMACION);
                    setTitle("Ficha hemeroteca general "+txtClvRgH.getText());
                    setCambios(false);
                    btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
                    return true;
                }
                else{
                    muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    return false;
                }
            }
            else{ // es upd
                sent="update FHeme set Titulo='"+datos[0]+"', NomDir='"+datos[1]+"', Per='"+datos[2]+"'";
                sent+=", LugEd='"+datos[3]+"', Comentario="+(datos[4].equals("")?"null":"'"+datos[4]+"'");
                sent+=", KeyWords="+(datos[5].equals("")?"null":"'"+datos[5]+"'");
                sent+=" where ClvHem="+txtClvRgH.getText();
                upd=true;
            }
        } 
        else{ // categoria hemeroteca general
            if((txtClvRegHA.getText()).equals("")){ // es alta
                if(database.Actualiza.nuevaFichaHemAn(datos,true)){
                    txtClvRegHA.setText(""+database.Actualiza.obtenClave());
                    muestraMensaje("Acción realizada","Se ha agregado el nuevo registro ",TipoMensaje.INFORMACION);
                    setTitle("Ficha hemeroteca analítica "+txtClvRegHA.getText());
                    setCambios(false);
                    btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
                    return true;
                }
                else{
                    muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                    return false;
                }
            }
            else{ // es upd
                sent="update FHemAn set Titulo='"+datos[0]+"', Autor='"+datos[1]+"'";
                sent+=", Clasificacion='"+datos[2]+"', NomPub='"+datos[3]+"', Paginas";
                sent+="='"+datos[4]+"', Numero="+datos[5]+", Fcha='"+datos[6]+"'";
                sent+=", YearPub='"+datos[7]+"', NumTomVol="+datos[8]+", Resumen=";
                sent+=(datos[9].equals("")?"null":"'"+datos[9]+"'");
                sent+=" where ClvHmAn="+txtClvRegHA.getText()+";";
                upd=true;
            }
        }
        if(upd){
            if(database.Actualiza.actualiza(sent,true,true)){
                muestraMensaje("Acción realizada","Se ha actualizado el registro ",TipoMensaje.INFORMACION);
                setCambios(false);
                btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
                return true;
            }
            else{
                muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.ERROR);
                return false;
            }
        }
        return false;
    }
  
    /** Convierte a mayusculas el texto del control txtAnyoHA
     *   (anio de una publicacion ficha hemerografica analitica, el anio debe estar en formato romano)
     * @param evt El KeyEvent que genero el evento
     */
    private void txtAnyoHAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnyoHAKeyReleased
        String texto=txtAnyoHA.getText();
        txtAnyoHA.setText(texto.toUpperCase());
    }//GEN-LAST:event_txtAnyoHAKeyReleased

    /** Borra el registro de la ficha actual
     * @param evt El ActionEvent que genero el evento
     */
    private void btnEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaActionPerformed
        String[] tablas={"Fbibl","FHeme","FHemAn"};
        String[] claves={"ClvFBib","ClvHem","ClvHmAn"};
        String clave=(tipo==1?txtClvReg.getText():(tipo==2?txtClvRgH.getText():txtClvRegHA.getText()));
        String sen="delete from "+tablas[tipo-1]+" where "+claves[tipo-1]+"="+clave+";";
        if(database.Actualiza.actualiza(sen,false,true)){
            muestraMensaje("Acción realizada","Se ha eliminado la ficha",TipoMensaje.INFORMACION); 
            cerrarVentana(getTitle());
        }
        else muestraMensaje("Acción fallida",database.Actualiza.obtenError(),TipoMensaje.INFORMACION);
    }//GEN-LAST:event_btnEliminaActionPerformed

    /** Prepara un reporte con los datos del registro actual y abre el cuadro de 
     *   dialogo para enviarlo a imprimir como ficha (tamanio 74 mm X 105 mm especificación ISO A7)
     * @param evt
     */
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Map<String,String> parametros = new HashMap<String,String>();
        String ref;
        String tit=null;
        if(hayCambios()){
            muestraMensaje("No se puede imprimir","Debe guardar los cambios hechos para poder imprimir",TipoMensaje.INFORMACION);
            return;
        }
        if(tipo==1){
            ref=""+(txtProl.getText().trim().length()>0?"Prologo de: "+txtProl.getText().trim():"");
            ref+=(txtComp.getText().trim().length()>0?"\nCompilacion: "+txtComp.getText().trim():"");
            ref+=(txtTrad.getText().trim().length()>0?"\nTraducion: "+txtTrad.getText().trim():"");
            ref+="\nEditorial "+txtEdit.getText().trim()+", "+txtEditNum.getText()+" edicion.";
            ref+=(txtFchaEdi.getText().trim().length()>0?"\nFecha de impresion: "+txtFchaEdi.getText().trim():"");
            ref+=(txtLugImp.getText().trim().length()>0?"\nLugar de impresion: "+txtLugImp.getText().trim():"");
            ref+=(txtColSr.getText().trim().length()>0?"\nColeccion: "+txtColSr.getText().trim():"");
            ref+=(txtVolTom.getText().trim().length()>0?"\nVol. "+txtVolTom.getText().trim()+",":"");
            ref+=(txtNumPgs.getText().trim().length()>0?" "+txtNumPgs.getText().trim()+"pp":"");
            parametros.put("CLASIFICACION",txtClas.getText());
            parametros.put("AUTOR",txtAut.getText());
            parametros.put("TITULO",txtTit.getText());
            parametros.put("REFERENCIA",ref);
            parametros.put("CLVREG",txtClvReg.getText());
            parametros.put("LUGARCONS",""+txtLugCon.getText());
            parametros.put("FCHACONS",null);
            tit="Ficha bibliografica "+txtClvReg.getText();
        }
        else if(tipo==2){
            parametros.put("TITULO",txtTitH.getText());
            parametros.put("NOMDIR",txtNomDir.getText());
            parametros.put("PERIORICIDAD",txtPer.getText());
            parametros.put("LUGEDICION",txtLugEd.getText());
            parametros.put("COMENTARIO",txtCom.getText().trim());
            tit="Ficha Hemerografica general "+txtClvRgH.getText();
        }
        else if(tipo==3){
            ref=txtPub.getText().trim()+" pp. "+txtPagsHA.getText().trim();
            ref+="\nNumero "+txtNumHA.getText().trim();
            ref+="\n"+txtFchaHA.getText().trim();
            ref+="\nAño "+txtAnyoHA.getText().trim();
            ref+=(txtVolTNumHA.getText().trim().length()>0?" Tomo "+txtVolTNumHA.getText():"");
            parametros.put("CLASIFICACION",txtClasHA.getText());
            parametros.put("AUTOR",txtAutHA.getText());
            parametros.put("TITULO",txtTitHA.getText());
            parametros.put("REFERENCIA",ref);
            tit="Ficha hemerografica analitica "+txtClvRegHA.getText();
        }
        enviarImpresion(tit,tipo+5,parametros,null);
    }//GEN-LAST:event_btnImprimirActionPerformed
   
    /** Carga los datos de una ficha bibiografica
     * @param clave la clave de la ficha a cargar
     * @param tipo el tipo de la ficha a cargar donde: 
     *   1=ficha general, 2=ficha hemeroteca, 3=ficha hemeroteca analitica
     */
    public boolean cargaDatos(int clave,int tipo){
        String cons="select * from ";
        String[] datos;
        this.tipo=tipo; 
        cargaTipo();
        if(tipo==1){
            datos=database.Consultas.consultaUnCampo(cons+"FBibl where ClvFBib="+clave,false);
            if(datos==null){
                muestraMensaje("Error al tratar de consultar el servidor", database.Consultas.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else if(datos[0]==null){
                muestraMensaje("Resultados de la búsqueda", "No se encontro registro con clave"+clave,TipoMensaje.INFORMACION);
                return false;
            }
            else{
                txtClvReg.setText(datos[0]); txtClas.setText(datos[3]);
                txtTit.setText(datos[1]); txtAut.setText(datos[2]);
                txtEdit.setText(datos[8]); txtFchaEdi.setText(datos[9]);
                txtEditNum.setText(datos[7]); txtLugCon.setText(datos[14]);
                txtProl.setText(datos[4]); txtComp.setText(datos[5]);
                txtTrad.setText(datos[6]); txtLugImp.setText(datos[10]);
                txtColSr.setText(datos[11]); txtPalClv.setText(datos[16]);
                txtVolTom.setText((datos[12].equals("0")?"":datos[12]));
                txtNumPgs.setText((datos[13].equals("0")?"":datos[13]));
                txtRes.setText(datos[15]);  
                setCambios(false);
                setTitle("Ficha bibliográfica general "+clave);
                btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
            }
        }
        else if(tipo==2){
            datos=database.Consultas.consultaUnCampo(cons+"FHeme where ClvHem="+clave,false);
            if(datos==null){
                muestraMensaje("Error al tratar de consultar el servidor", database.Consultas.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else if(datos[0]==null){
                muestraMensaje("Resultados de la búsqueda", "No se encontro registro con clave"+clave,TipoMensaje.ERROR);
                return false;
            }
            else{
                txtClvRgH.setText(datos[0]); txtTitH.setText(datos[1]);
                txtNomDir.setText(datos[2]); txtPer.setText(datos[3]);
                txtLugEd.setText(datos[4]); txtCom.setText(datos[5]);                
                txtKeyWH.setText(datos[6]);
                setCambios(false);
                setTitle("Ficha hemeroteca general "+clave);
                btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
            }
        }
        else{
            datos=database.Consultas.consultaUnCampo(cons+"FHemAn where ClvHmAn="+clave,false);
            if(datos==null){
                muestraMensaje("Error al tratar de consultar el servidor", database.Consultas.obtenError(),TipoMensaje.ERROR);
                return false;
            }
            else if(datos[0]==null){
                muestraMensaje("Resultados de la búsqueda", "No se encontro registro con clave"+clave,TipoMensaje.INFORMACION);
                return false;
            }
            else{
                txtClvRegHA.setText(datos[0]); txtClasHA.setText(datos[3]);
                txtTitHA.setText(datos[1]); txtAutHA.setText(datos[2]);
                txtPub.setText(datos[4]); txtFchaHA.setText(datos[7]);
                txtAnyoHA.setText(datos[8]); txtNumHA.setText(datos[6]);
                txtPagsHA.setText(datos[5]); txtVolTNumHA.setText(datos[9]);
                txtResumenHA.setText(datos[10]);
                setCambios(false);
                setTitle("Ficha hemeroteca analítica "+clave);
                btnElimina.setEnabled(true); btnImprimir.setEnabled(true);
            }
        }
        return true;
    }
    
    /** Carga los controles adecuados para el tipo de ficha de acuerdo al valor en la
     * variable tipo donde: 1=ficha general, 2=ficha hemeroteca, 3=ficha hemeroteca analitica
     */
    private void cargaTipo(){
        int alt=405;
        if(tipo==1){
            if(existeVentana("Ficha bibliografica general",true)) return;
            remove(pnlNueva);
            add(pnlGeneral,java.awt.BorderLayout.CENTER);
            setTitle("Ficha bibliográfica general");
        }
        else if(tipo==2){
            if(existeVentana("Ficha hemeroteca general",true)) return;
            remove(pnlNueva);
            add(pnlHeme,java.awt.BorderLayout.CENTER);            
            setTitle("Ficha hemeroteca general");
        }
        else if(tipo==3){
            if(existeVentana("Ficha hemeroteca analitica",true)) return;
            remove(pnlNueva);
            add(pnlHemeAn,java.awt.BorderLayout.CENTER);
            setTitle("Ficha hemeroteca analítica");
            alt=300;
        }
        pack(); validateTree(); 
        setSize(getSize().width+20,alt); validate();
        setPreferredSize(getSize()); setMaximumSize(getSize());
        barra.setVisible(true);
    }
   
    /** Valida todos los datos ingresados en los controles actuales segun el tipo de ficha actual
     * @return true si los datos son validos false en caso de haber al menos un dato invalido
     */
    private boolean sonDatosValidos(){
        String aux;
        int auxi;
        if(tipo==1){
            aux=txtClas.getText().trim();
            if(aux.equals("")||aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Clasificación invalida",TipoMensaje.ERROR);
                return false; }
            aux=txtTit.getText().trim();
            if(aux.equals("")||aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Titulo invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtAut.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Autor invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtEdit.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Editorial invalida",TipoMensaje.ERROR);
                return false; }
            aux=txtFchaEdi.getText().trim();
            if(aux.length()>15){
                muestraMensaje("No se puede guadar","Datos invalidos: Fecha de edición invalida",TipoMensaje.ERROR);
                return false; }
            try{ auxi=Integer.parseInt(txtEditNum.getText().trim()); }
            catch(NumberFormatException nbfExc){ auxi=0; }
            if(auxi<=0 || auxi>255){
                muestraMensaje("No se puede guadar","Datos invalidos: Numero de edición invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtLugCon.getText().trim();
            if(aux.equals("")||aux.length()>255){
                muestraMensaje("No se puede guadar","Datos invalidos: Lugar de consulta invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtProl.getText().trim();
            if(aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Prologuista invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtComp.getText().trim();
            if(aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Compilador invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtTrad.getText().trim();
            if(aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Traductor invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtLugImp.getText().trim();
            if(aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Lugar de impresión invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtColSr.getText().trim();
            if(aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Colección o serie invalida",TipoMensaje.ERROR);
                return false; }       
            try{ auxi=Integer.parseInt(txtVolTom.getText().trim()); }
            catch(NumberFormatException nbfExc){ auxi=0; }
            if((auxi<=0||auxi>65535)&&!txtVolTom.getText().trim().equals("")){
                muestraMensaje("No se puede guadar","Datos invalidos: Volumen/Tomo invalido",TipoMensaje.ERROR);
                return false; }
            try{ auxi=Integer.parseInt(txtNumPgs.getText().trim()); }
            catch(NumberFormatException nbfExc){ auxi=0; }
            if(auxi<=0&&!txtNumPgs.getText().trim().equals("")){
                muestraMensaje("No se puede guadar","Datos invalidos: Número de paginas invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtRes.getText().trim();
            if(aux.length()>450){
                muestraMensaje("No se puede guadar","Datos invalidos: Resumen invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtPalClv.getText().trim();
            if(aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Palabras clave invalida",TipoMensaje.ERROR);
                return false; } 
        }
        else if(tipo==2){
            aux=txtTitH.getText().trim();
            if(aux.equals("")||aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Titulo invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtNomDir.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Nombre de director invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtPer.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Periodicidad invalida",TipoMensaje.ERROR);
                return false; } 
            aux=txtLugEd.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Lugar de edición invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtCom.getText().trim();
            if(aux.length()>450){
                muestraMensaje("No se puede guadar","Datos invalidos: Comentario invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtKeyWH.getText().trim();
            if(aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Palabras clave invalida",TipoMensaje.ERROR);
                return false; } 
        }
        else if(tipo==3){
            aux=txtClasHA.getText().trim();
            if(aux.equals("")||aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Clasificación invalida",TipoMensaje.ERROR);
                return false; } 
            aux=txtTitHA.getText().trim();
            if(aux.equals("")||aux.length()>125){
                muestraMensaje("No se puede guadar","Datos invalidos: Titulo invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtAutHA.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Autor invalido",TipoMensaje.ERROR);
                return false; } 
            aux=txtPub.getText().trim();
            if(aux.equals("")||aux.length()>75){
                muestraMensaje("No se puede guadar","Datos invalidos: Publicación invalida",TipoMensaje.ERROR);
                return false; } 
            aux=txtFchaHA.getText().trim();
            if(aux.equals("")||aux.length()>15){
                muestraMensaje("No se puede guadar","Datos invalidos: Fecha invalida",TipoMensaje.ERROR);
                return false; } 
            aux=txtAnyoHA.getText().trim();
            if(!operaciones.Datos.valRomanYear(aux)||aux.length()>7){
                muestraMensaje("No se puede guadar","Datos invalidos: Año invalido",TipoMensaje.ERROR);
                return false; }
            try{ auxi=Integer.parseInt(txtNumHA.getText().trim()); }
            catch(NumberFormatException nbfExc){ auxi=0; }
            if(auxi<=0){
                muestraMensaje("No se puede guadar","Datos invalidos: Número invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtPagsHA.getText().trim();
            if(aux.equals("")||aux.length()>15){
                muestraMensaje("No se puede guadar","Datos invalidos: Paginas invalido",TipoMensaje.ERROR);
                return false; } 
            try{ auxi=Integer.parseInt(txtVolTNumHA.getText().trim()); }
            catch(NumberFormatException nbfExc){ auxi=0; }
            if(auxi<=0&&!txtVolTNumHA.getText().trim().equals("")){
                muestraMensaje("No se puede guadar","Datos invalidos: Número de volumen/tomo invalido",TipoMensaje.ERROR);
                return false; }
            aux=txtResumenHA.getText().trim();
            if(aux.length()>450){
                muestraMensaje("No se puede guadar","Datos invalidos: Resumen invalido",TipoMensaje.ERROR);
                return false; } 
        }
        return true;
    }
 
    /** Obtiene los datos ingresados en los controles y los regresa en un arreglo de String
     *   de acuerdo al tipo de ficha actual
     * @return La lista de datos 
     */   
    private String[] obtenDatos(){
        String[] datos=null;
        if(tipo==1){
            datos=new String[16];
            datos[0]=txtTit.getText().trim(); datos[1]=txtAut.getText().trim();
            datos[2]=txtClas.getText().trim(); datos[3]=txtProl.getText().trim();
            datos[4]=txtComp.getText().trim(); datos[5]=txtTrad.getText().trim(); 
            datos[6]=txtEditNum.getText().trim(); datos[7]=txtEdit.getText().trim();
            datos[8]=txtFchaEdi.getText().trim(); datos[9]=txtLugImp.getText().trim();
            datos[10]=txtColSr.getText().trim(); datos[11]=txtVolTom.getText().trim();
            datos[12]=txtNumPgs.getText().trim(); datos[13]=txtLugCon.getText().trim();
            datos[14]=txtRes.getText().trim(); datos[15]=txtPalClv.getText().trim();
            if(datos[11].equals("")) datos[11]="0";
            if(datos[12].equals("")) datos[12]="0";
        }
        else if(tipo==2){
            datos=new String[6];
            datos[0]=txtTitH.getText().trim(); datos[1]=txtNomDir.getText().trim();
            datos[2]=txtPer.getText().trim(); datos[3]=txtLugEd.getText().trim();
            datos[4]=txtCom.getText().trim(); datos[5]=txtKeyWH.getText().trim();
        }
        else if(tipo==3){
            datos=new String[10];
            datos[0]=txtTitHA.getText().trim(); datos[1]=txtAutHA.getText().trim();
            datos[2]=txtClasHA.getText().trim(); datos[3]=txtPub.getText().trim();
            datos[4]=txtPagsHA.getText().trim(); datos[5]=txtNumHA.getText().trim();
            datos[6]=txtFchaHA.getText().trim(); datos[7]=txtAnyoHA.getText().trim();
            datos[8]=txtVolTNumHA.getText().trim(); datos[9]=txtResumenHA.getText().trim();
            if(datos[8].equals("")) datos[8]="0";
        }
        return datos;
    }

    /** Crea un objeto que implementa el DocumentListener y lo agrega a los controles de texto
     * para detectar si un campo es editado y por lo tanto saber si hay cambios sin guardar.
     */
    private void escuchaCambios(){
        listenCh= new ListenChanges();
        txtClas.getDocument().addDocumentListener(listenCh);
        txtTit.getDocument().addDocumentListener(listenCh);
        txtAut.getDocument().addDocumentListener(listenCh);
        txtEdit.getDocument().addDocumentListener(listenCh);
        txtFchaEdi.getDocument().addDocumentListener(listenCh);
        txtEditNum.getDocument().addDocumentListener(listenCh);
        txtLugCon.getDocument().addDocumentListener(listenCh);
        txtProl.getDocument().addDocumentListener(listenCh);
        txtComp.getDocument().addDocumentListener(listenCh);
        txtTrad.getDocument().addDocumentListener(listenCh);
        txtLugImp.getDocument().addDocumentListener(listenCh);
        txtColSr.getDocument().addDocumentListener(listenCh);
        txtVolTom.getDocument().addDocumentListener(listenCh);
        txtNumPgs.getDocument().addDocumentListener(listenCh);
        txtPalClv.getDocument().addDocumentListener(listenCh);
        txtRes.getDocument().addDocumentListener(listenCh);        
        txtPalClv.getDocument().addDocumentListener(listenCh);        
        txtTitH.getDocument().addDocumentListener(listenCh);        
        txtNomDir.getDocument().addDocumentListener(listenCh);        
        txtPer.getDocument().addDocumentListener(listenCh);        
        txtLugEd.getDocument().addDocumentListener(listenCh);        
        txtCom.getDocument().addDocumentListener(listenCh);        
        txtKeyWH.getDocument().addDocumentListener(listenCh);        
        txtClasHA.getDocument().addDocumentListener(listenCh);        
        txtTitHA.getDocument().addDocumentListener(listenCh);        
        txtAutHA.getDocument().addDocumentListener(listenCh);        
        txtPub.getDocument().addDocumentListener(listenCh);        
        txtFchaHA.getDocument().addDocumentListener(listenCh);        
        txtAnyoHA.getDocument().addDocumentListener(listenCh);        
        txtNumHA.getDocument().addDocumentListener(listenCh);        
        txtPagsHA.getDocument().addDocumentListener(listenCh);        
        txtVolTNumHA.getDocument().addDocumentListener(listenCh);  
        txtResumenHA.getDocument().addDocumentListener(listenCh);  
    }
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barra;
    private javax.swing.JButton btnElegir;
    private javax.swing.JButton btnElimina;
    private javax.swing.JButton btnGuarda;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblFchaHA;
    private javax.swing.JPanel pnlGeneral;
    private javax.swing.JPanel pnlGeneralp1;
    private javax.swing.JPanel pnlGeneralp2;
    private javax.swing.JPanel pnlHeme;
    private javax.swing.JPanel pnlHeme1;
    private javax.swing.JPanel pnlHemeAn;
    private javax.swing.JPanel pnlHemeAn1;
    private javax.swing.JPanel pnlNueva;
    private javax.swing.JRadioButton rbtnGen;
    private javax.swing.ButtonGroup rbtnGrpCatsNew;
    private javax.swing.JRadioButton rbtnHem;
    private javax.swing.JRadioButton rbtnHemAn;
    private javax.swing.JTextField txtAnyoHA;
    private javax.swing.JTextField txtAut;
    private javax.swing.JTextField txtAutHA;
    private javax.swing.JTextField txtClas;
    private javax.swing.JTextField txtClasHA;
    private javax.swing.JTextField txtClvReg;
    private javax.swing.JTextField txtClvRegHA;
    private javax.swing.JTextField txtClvRgH;
    private javax.swing.JTextField txtColSr;
    private javax.swing.JTextArea txtCom;
    private javax.swing.JTextField txtComp;
    private javax.swing.JTextField txtEdit;
    private javax.swing.JTextField txtEditNum;
    private javax.swing.JTextField txtFchaEdi;
    private javax.swing.JTextField txtFchaHA;
    private javax.swing.JTextArea txtKeyWH;
    private javax.swing.JTextField txtLugCon;
    private javax.swing.JTextField txtLugEd;
    private javax.swing.JTextField txtLugImp;
    private javax.swing.JTextField txtNomDir;
    private javax.swing.JTextField txtNumHA;
    private javax.swing.JTextField txtNumPgs;
    private javax.swing.JTextField txtPagsHA;
    private javax.swing.JTextArea txtPalClv;
    private javax.swing.JTextField txtPer;
    private javax.swing.JTextField txtProl;
    private javax.swing.JTextField txtPub;
    private javax.swing.JTextArea txtRes;
    private javax.swing.JTextArea txtResumenHA;
    private javax.swing.JTextField txtTit;
    private javax.swing.JTextField txtTitH;
    private javax.swing.JTextField txtTitHA;
    private javax.swing.JTextField txtTrad;
    private javax.swing.JTextField txtVolTNumHA;
    private javax.swing.JTextField txtVolTom;
    // End of variables declaration//GEN-END:variables

    /** Clase que implementa la interfaz DocumentListener 
     * para detectar si hay edicion en los controles de texto y saber si hay 
     * cambios sin guardar en el registro
     */
    private class ListenChanges implements javax.swing.event.DocumentListener{
       /** Crea un nuevo objeto ListenChanges */
        public ListenChanges(){}
        /** Metodo de la interfaz DocumentListener
         * detecta si se inserto contenido al documento (contenido del control de texto)
         * y avisa al FrmFicha que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void insertUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si se quito contenido al documento (contenido del control de texto)
         * y avisa al FrmFicha que hay cambios sin guardar
         * @param e El DocumentEvent que genero el evento
         */
        public void removeUpdate(javax.swing.event.DocumentEvent e){ 
            setCambios(true);
        }
        /** Metodo de la interfaz DocumentListener
         * detecta si cambio el contenido del documento (contenido del control de texto)
         * @param e El DocumentEvent que genero el evento
         */
        public void changedUpdate(javax.swing.event.DocumentEvent e){}
    }
}
