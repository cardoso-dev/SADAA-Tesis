/*
 * FrameReporte.java
 *  Ventana para crear reportes graficos de materias o grupos
 * Parte de proyecto: SADAA
 * Author: Pedro Cardoso Rodriguez
 * Mail: ingpedro@live.com
 * Place: Zacatecas Mexico
 * 
    Copyright © 2010 Pedro Cardoso Rodriguez

    SADAA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SADAA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SADAA.  If not, see <http://www.gnu.org/licenses/>
 */

package reportes;

import definiciones.TipoMensaje;
import java.util.ArrayList;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

/**  Es una ventana interna (JInternalFrame) desde la cual se puede generar
 *  reportes graficos para materias o grupos registrados
 * 
 * Los tipos de reportes que genera son:
 * 
 * Para grupos: 1 reporte de porcentaje de temas visto; 2 reporte de tiempo gastado por tema visto
 *  3 calificacion de grupo (segun los rubros de evaluacion existentes); 4 avance en objetivos
 *  porcentaje de avance registrado para objetivos planeados
 * 
 * Para materias: 1 indice de calificaciones (indice obtenido por los alumnos que han cursado la materia);
 * 2 porcentaje de aprobacion de alumnos (muestra porcentaje de alumnos aprobados, reprobados y 
 *  repetidores del total que han cursado la materia)
 * 
 * @author Pedro Cardoso Rodríguez
 */
public class FrameReporte extends sistema.ModeloFrameInterno{
    
    /**Lista de reportes generados*/
    private ArrayList<Reporte> reportes;
    /**Categoria de reporte donde: 1=grupo, 2=materia*/
    private int tipo;
    /**Descripcion del ultimo error ocurrido*/
    private String error;
    
    /** Crea una nueva ventana FrameReporte
     * @param ventana Referencia a la ventana principal contenedora (clase sistema.FramePrincipal)
     * @param tipo La categoria de reportes grupo o materia (1 o 2 respectivamente)
     */
    public FrameReporte(sistema.FramePrincipal ventana, int tipo){
        super(ventana,"grafico.png");
        initComponents();
        this.tipo=tipo;
        error=null;
        if(tipo==1){
            lbDescTipo.setText("Clave del grupo: ");
            setTitle("Reportes de grupo");
        }
        else if(tipo==2){
            lbDescTipo.setText("Clave de materia: ");
            setTitle("Reportes de materia");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspDespliege = new javax.swing.JSplitPane();
        jspDesp2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        pnlGrafica = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlMinis = new javax.swing.JPanel();
        jtbBarraBotones = new javax.swing.JToolBar();
        pnlPideClv = new javax.swing.JPanel();
        lbDescTipo = new javax.swing.JLabel();
        txtClv = new javax.swing.JTextField();
        btnCarga = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reporte de");

        jspDespliege.setDividerLocation(301);
        jspDespliege.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        txtDescripcion.setColumns(20);
        txtDescripcion.setEditable(false);
        txtDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtDescripcion);

        jspDesp2.setRightComponent(jScrollPane1);

        pnlGrafica.setLayout(new java.awt.BorderLayout());
        jspDesp2.setLeftComponent(pnlGrafica);

        jspDespliege.setTopComponent(jspDesp2);

        pnlMinis.setLayout(new java.awt.GridBagLayout());
        jScrollPane2.setViewportView(pnlMinis);

        jspDespliege.setRightComponent(jScrollPane2);

        getContentPane().add(jspDespliege, java.awt.BorderLayout.CENTER);

        jtbBarraBotones.setFloatable(false);
        jtbBarraBotones.setRollover(true);

        pnlPideClv.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbDescTipo.setText("Clave:");

        btnCarga.setMnemonic('C');
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPideClvLayout = new javax.swing.GroupLayout(pnlPideClv);
        pnlPideClv.setLayout(pnlPideClvLayout);
        pnlPideClvLayout.setHorizontalGroup(
            pnlPideClvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPideClvLayout.createSequentialGroup()
                .addContainerGap(289, Short.MAX_VALUE)
                .addComponent(lbDescTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCarga)
                .addContainerGap())
        );
        pnlPideClvLayout.setVerticalGroup(
            pnlPideClvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPideClvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnCarga)
                .addComponent(txtClv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lbDescTipo))
        );

        jtbBarraBotones.add(pnlPideClv);

        getContentPane().add(jtbBarraBotones, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Llama al metodo apropiado para generar los reportes de acuerdo a la categoria establecida grupo o materia
     * @param evt El ActionEvent que genero el evento
     */
    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed
        String clave=txtClv.getText().trim().toUpperCase();
        boolean cargo=true;
        if(clave.equals("")) {
            muestraMensaje("Error en el parámetro", "Clave invalida",TipoMensaje.ERROR);
            return;
        }
        if(tipo==1){
            if(getTitle().equals("Reportes de grupo "+clave)){
                cargo=cargaReportesGrupo(clave);
            }
            else if(existeVentana("Reportes de grupo "+clave,true)){
                return;
            }
            else cargo=cargaReportesGrupo(clave);
        }
        else if(tipo==2){
            if(getTitle().equals("Reportes de materia "+clave)){
                cargo=cargaReportesMateria(clave);
            }
            else if(existeVentana("Reportes de materia "+clave,true)){
                return;
            }
            else cargo=cargaReportesMateria(clave);
        }
        if(!cargo){
            muestraMensaje("Error","Al generar los reportes ocurrio el error "+error,TipoMensaje.ERROR);
        }
    }//GEN-LAST:event_btnCargaActionPerformed
        
    /** Genera y carga los reportes para un grupo
     * @param clave La clave del grupo a generar los reportes
     * @return true si los reportes se generaron y cargaron correctamente, false en caso contrario
     */
    public boolean cargaReportesGrupo(String clave){
        RepsUnGrupo calcReps=new RepsUnGrupo();
        reportes=calcReps.getReportes(clave);
        if(reportes==null){
            error=calcReps.getError();
            return false;
        }
        setTitle("Reportes de grupo "+clave);
        muestraReportes();
        return true;
    }
   
    /** Genera y carga los reportes para una materia
     * @param clave La clave de la materia a generar los reportes
     * @return true si los reportes se generaron y cargaron correctamente, false en caso contrario
     */
    public boolean cargaReportesMateria(String clave){
        RepsMateria calcReps=new RepsMateria();
        reportes=calcReps.getReportes(clave);
        if(reportes==null){
            error=calcReps.getError();
            return false;
        }
        setTitle("Reportes de materia "+clave);
        muestraReportes();
        return true;
    }
    
    /** Carga los reportes en el arraylist reportes en los controles para su visualizacion */
    private void muestraReportes(){
        java.awt.GridBagConstraints gbc=new java.awt.GridBagConstraints();
        java.awt.GridBagLayout gbl=((java.awt.GridBagLayout)pnlMinis.getLayout());
        int x=0;
        pnlMinis.removeAll();
        gbc.gridx=0; gbc.gridy=0;
        gbc.insets=new java.awt.Insets(8,2,0,2);
        gbc.fill=java.awt.GridBagConstraints.HORIZONTAL;
        for(Reporte rep:reportes){
            rep.setFrameReporte(this);
            if(x==0){ setGrafica(rep); }
            gbc.gridx=x++;
            gbl.setConstraints(rep, gbc);
            pnlMinis.add(rep);
        }
        setSize(getTamJDesktop());
        setLocation(0,0);
        validate();
        jspDespliege.setDividerLocation(0.80);
        jspDesp2.setDividerLocation(0.80);
    }
    
    /** Establece como actual la grafica de un reporte en el centro de la ventana
     * @param repo El reporte a establecer como actual
     */
    public void setGrafica(Reporte repo){
        javax.swing.JComponent panl;
        JFreeChart comp;
        if(repo.getGrafica()!=null){
            try{
                comp=(JFreeChart) (repo.getGrafica().getChart()).clone();
            }
            catch(Exception e){ 
                comp=repo.getGrafica().getChart();
            }
            comp.setTitle(repo.getTitulo());
            panl=new ChartPanel(comp);
        }
        else{
            panl=new javax.swing.JLabel("No hay suficientes datos para generar este reporte");
        }
        pnlGrafica.removeAll();
        pnlGrafica.add(panl,java.awt.BorderLayout.CENTER);
        txtDescripcion.setText(repo.getDesc());
        validate();
    }
 
    /** Obtiene la descripcion del ultimo error ocurrido
     * @return la descripcion del ultimo error ocurrido
     */
    public String getError(){ return error; }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarga;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jspDesp2;
    private javax.swing.JSplitPane jspDespliege;
    private javax.swing.JToolBar jtbBarraBotones;
    private javax.swing.JLabel lbDescTipo;
    private javax.swing.JPanel pnlGrafica;
    private javax.swing.JPanel pnlMinis;
    private javax.swing.JPanel pnlPideClv;
    private javax.swing.JTextField txtClv;
    private javax.swing.JTextArea txtDescripcion;
    // End of variables declaration//GEN-END:variables

}
